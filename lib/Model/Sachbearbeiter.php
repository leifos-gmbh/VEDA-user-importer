<?php
/**
 * Sachbearbeiter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers f체r die Version 2. Die Dokumentation zu speziellen Versionen kann 체ber die Angabe des zus채tzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 f체r die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * The version of the OpenAPI document: 2
 * Contact: info@veda.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Sachbearbeiter Class Doc Comment
 *
 * @category Class
 * @description Die Informationen zu einem Sachbearbeiter.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Sachbearbeiter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Sachbearbeiter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'freitext_titel' => 'string',
        'geschaeftliche_e_mail_adresse' => 'string',
        'geschaeftliche_telefonnummer' => 'string',
        'nachname' => 'string',
        'oid' => 'string',
        'titel' => 'string',
        'vorname' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'freitext_titel' => null,
        'geschaeftliche_e_mail_adresse' => null,
        'geschaeftliche_telefonnummer' => null,
        'nachname' => null,
        'oid' => null,
        'titel' => null,
        'vorname' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'freitext_titel' => false,
		'geschaeftliche_e_mail_adresse' => false,
		'geschaeftliche_telefonnummer' => false,
		'nachname' => false,
		'oid' => false,
		'titel' => false,
		'vorname' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'freitext_titel' => 'freitextTitel',
        'geschaeftliche_e_mail_adresse' => 'geschaeftlicheEMailAdresse',
        'geschaeftliche_telefonnummer' => 'geschaeftlicheTelefonnummer',
        'nachname' => 'nachname',
        'oid' => 'oid',
        'titel' => 'titel',
        'vorname' => 'vorname'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'freitext_titel' => 'setFreitextTitel',
        'geschaeftliche_e_mail_adresse' => 'setGeschaeftlicheEMailAdresse',
        'geschaeftliche_telefonnummer' => 'setGeschaeftlicheTelefonnummer',
        'nachname' => 'setNachname',
        'oid' => 'setOid',
        'titel' => 'setTitel',
        'vorname' => 'setVorname'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'freitext_titel' => 'getFreitextTitel',
        'geschaeftliche_e_mail_adresse' => 'getGeschaeftlicheEMailAdresse',
        'geschaeftliche_telefonnummer' => 'getGeschaeftlicheTelefonnummer',
        'nachname' => 'getNachname',
        'oid' => 'getOid',
        'titel' => 'getTitel',
        'vorname' => 'getVorname'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('freitext_titel', $data ?? [], null);
        $this->setIfExists('geschaeftliche_e_mail_adresse', $data ?? [], null);
        $this->setIfExists('geschaeftliche_telefonnummer', $data ?? [], null);
        $this->setIfExists('nachname', $data ?? [], null);
        $this->setIfExists('oid', $data ?? [], null);
        $this->setIfExists('titel', $data ?? [], null);
        $this->setIfExists('vorname', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets freitext_titel
     *
     * @return string|null
     */
    public function getFreitextTitel()
    {
        return $this->container['freitext_titel'];
    }

    /**
     * Sets freitext_titel
     *
     * @param string|null $freitext_titel Titel (Freitext) des Sachbearbeiters
     *
     * @return self
     */
    public function setFreitextTitel($freitext_titel)
    {
        if (is_null($freitext_titel)) {
            throw new \InvalidArgumentException('non-nullable freitext_titel cannot be null');
        }
        $this->container['freitext_titel'] = $freitext_titel;

        return $this;
    }

    /**
     * Gets geschaeftliche_e_mail_adresse
     *
     * @return string|null
     */
    public function getGeschaeftlicheEMailAdresse()
    {
        return $this->container['geschaeftliche_e_mail_adresse'];
    }

    /**
     * Sets geschaeftliche_e_mail_adresse
     *
     * @param string|null $geschaeftliche_e_mail_adresse Die gesch채ftliche E-Mail-Adresse des Sachbearbeiters
     *
     * @return self
     */
    public function setGeschaeftlicheEMailAdresse($geschaeftliche_e_mail_adresse)
    {
        if (is_null($geschaeftliche_e_mail_adresse)) {
            throw new \InvalidArgumentException('non-nullable geschaeftliche_e_mail_adresse cannot be null');
        }
        $this->container['geschaeftliche_e_mail_adresse'] = $geschaeftliche_e_mail_adresse;

        return $this;
    }

    /**
     * Gets geschaeftliche_telefonnummer
     *
     * @return string|null
     */
    public function getGeschaeftlicheTelefonnummer()
    {
        return $this->container['geschaeftliche_telefonnummer'];
    }

    /**
     * Sets geschaeftliche_telefonnummer
     *
     * @param string|null $geschaeftliche_telefonnummer Telefonnummer des Sachbearbeiters
     *
     * @return self
     */
    public function setGeschaeftlicheTelefonnummer($geschaeftliche_telefonnummer)
    {
        if (is_null($geschaeftliche_telefonnummer)) {
            throw new \InvalidArgumentException('non-nullable geschaeftliche_telefonnummer cannot be null');
        }
        $this->container['geschaeftliche_telefonnummer'] = $geschaeftliche_telefonnummer;

        return $this;
    }

    /**
     * Gets nachname
     *
     * @return string|null
     */
    public function getNachname()
    {
        return $this->container['nachname'];
    }

    /**
     * Sets nachname
     *
     * @param string|null $nachname Nachname des Sachbearbeiters
     *
     * @return self
     */
    public function setNachname($nachname)
    {
        if (is_null($nachname)) {
            throw new \InvalidArgumentException('non-nullable nachname cannot be null');
        }
        $this->container['nachname'] = $nachname;

        return $this;
    }

    /**
     * Gets oid
     *
     * @return string|null
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param string|null $oid Eindeutige ID des Sachbearbeiters
     *
     * @return self
     */
    public function setOid($oid)
    {
        if (is_null($oid)) {
            throw new \InvalidArgumentException('non-nullable oid cannot be null');
        }
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets titel
     *
     * @return string|null
     */
    public function getTitel()
    {
        return $this->container['titel'];
    }

    /**
     * Sets titel
     *
     * @param string|null $titel Titel des Sachbearbeiters
     *
     * @return self
     */
    public function setTitel($titel)
    {
        if (is_null($titel)) {
            throw new \InvalidArgumentException('non-nullable titel cannot be null');
        }
        $this->container['titel'] = $titel;

        return $this;
    }

    /**
     * Gets vorname
     *
     * @return string|null
     */
    public function getVorname()
    {
        return $this->container['vorname'];
    }

    /**
     * Sets vorname
     *
     * @param string|null $vorname Vorname des Sachbearbeiters
     *
     * @return self
     */
    public function setVorname($vorname)
    {
        if (is_null($vorname)) {
            throw new \InvalidArgumentException('non-nullable vorname cannot be null');
        }
        $this->container['vorname'] = $vorname;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


