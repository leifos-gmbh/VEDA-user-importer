<?php
/**
 * Mitgliedsunternehmen
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers f체r die Version 2. Die Dokumentation zu speziellen Versionen kann 체ber die Angabe des zus채tzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 f체r die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * The version of the OpenAPI document: 2
 * Contact: info@veda.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Mitgliedsunternehmen Class Doc Comment
 *
 * @category Class
 * @description Beschreibt ein Mitgliedsunternehmen
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Mitgliedsunternehmen implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Mitgliedsunternehmen';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'oid' => 'string',
        'adresse' => '\OpenAPI\Client\Model\Adresse',
        'anzahl_offener_rueckmeldungen' => 'int',
        'anzahl_versicherter' => 'int',
        'asik' => 'string',
        'asik_pruefungsstatus' => 'string',
        'aufsichtsperson_e_mail' => 'string',
        'aufsichtsperson_name' => 'string',
        'aufsichtsperson_telefon_nr' => 'string',
        'begruendung_zum_betreuungsmodell' => 'string',
        'bemerkung' => 'string',
        'bemerkung2' => 'string',
        'betreuungsmodell' => 'string',
        'betriebsart' => 'string',
        'effektives_anforderunsprofil' => 'string',
        'emailadresse' => 'string',
        'emailadresse2' => 'string',
        'geschenk_gewuenscht' => 'bool',
        'geschenkwunsch_bemerkung' => 'string',
        'geschenkwunsch_entscheidungszeitpunkt' => '\DateTime',
        'grund_fuer_fehlende_betreuungspflicht' => 'string',
        'hauptbetrieb_id' => 'string',
        'homepage' => 'string',
        'letzter_nachweis_regelbetreuung' => '\DateTime',
        'letztes_geschenk_am' => '\DateTime',
        'links' => '\OpenAPI\Client\Model\Link[]',
        'mahnschwelle_ueberschritten' => 'bool',
        'mitgliedsnummer' => 'string',
        'organisationsart' => 'string',
        'organisationsname1' => 'string',
        'organisationsname2' => 'string',
        'organisationsname3' => 'string',
        'organisationsname4' => 'string',
        'praeventionszentrum_id' => 'string',
        'ressourcenverwalter_id' => 'string',
        'telefax' => 'string',
        'telefonnummer1' => 'string',
        'telefonnummer2' => 'string',
        'unternehmensnummer' => 'string',
        'verantwortliche_si_fa_id' => 'string',
        'wz_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'oid' => null,
        'adresse' => null,
        'anzahl_offener_rueckmeldungen' => 'int32',
        'anzahl_versicherter' => 'int32',
        'asik' => null,
        'asik_pruefungsstatus' => null,
        'aufsichtsperson_e_mail' => null,
        'aufsichtsperson_name' => null,
        'aufsichtsperson_telefon_nr' => null,
        'begruendung_zum_betreuungsmodell' => null,
        'bemerkung' => null,
        'bemerkung2' => null,
        'betreuungsmodell' => null,
        'betriebsart' => null,
        'effektives_anforderunsprofil' => null,
        'emailadresse' => null,
        'emailadresse2' => null,
        'geschenk_gewuenscht' => null,
        'geschenkwunsch_bemerkung' => null,
        'geschenkwunsch_entscheidungszeitpunkt' => 'date',
        'grund_fuer_fehlende_betreuungspflicht' => null,
        'hauptbetrieb_id' => null,
        'homepage' => null,
        'letzter_nachweis_regelbetreuung' => 'date',
        'letztes_geschenk_am' => 'date',
        'links' => null,
        'mahnschwelle_ueberschritten' => null,
        'mitgliedsnummer' => null,
        'organisationsart' => null,
        'organisationsname1' => null,
        'organisationsname2' => null,
        'organisationsname3' => null,
        'organisationsname4' => null,
        'praeventionszentrum_id' => null,
        'ressourcenverwalter_id' => null,
        'telefax' => null,
        'telefonnummer1' => null,
        'telefonnummer2' => null,
        'unternehmensnummer' => null,
        'verantwortliche_si_fa_id' => null,
        'wz_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'oid' => false,
		'adresse' => false,
		'anzahl_offener_rueckmeldungen' => false,
		'anzahl_versicherter' => false,
		'asik' => false,
		'asik_pruefungsstatus' => false,
		'aufsichtsperson_e_mail' => false,
		'aufsichtsperson_name' => false,
		'aufsichtsperson_telefon_nr' => false,
		'begruendung_zum_betreuungsmodell' => false,
		'bemerkung' => false,
		'bemerkung2' => false,
		'betreuungsmodell' => false,
		'betriebsart' => false,
		'effektives_anforderunsprofil' => false,
		'emailadresse' => false,
		'emailadresse2' => false,
		'geschenk_gewuenscht' => false,
		'geschenkwunsch_bemerkung' => false,
		'geschenkwunsch_entscheidungszeitpunkt' => false,
		'grund_fuer_fehlende_betreuungspflicht' => false,
		'hauptbetrieb_id' => false,
		'homepage' => false,
		'letzter_nachweis_regelbetreuung' => false,
		'letztes_geschenk_am' => false,
		'links' => false,
		'mahnschwelle_ueberschritten' => false,
		'mitgliedsnummer' => false,
		'organisationsart' => false,
		'organisationsname1' => false,
		'organisationsname2' => false,
		'organisationsname3' => false,
		'organisationsname4' => false,
		'praeventionszentrum_id' => false,
		'ressourcenverwalter_id' => false,
		'telefax' => false,
		'telefonnummer1' => false,
		'telefonnummer2' => false,
		'unternehmensnummer' => false,
		'verantwortliche_si_fa_id' => false,
		'wz_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oid' => 'oid',
        'adresse' => 'adresse',
        'anzahl_offener_rueckmeldungen' => 'anzahlOffenerRueckmeldungen',
        'anzahl_versicherter' => 'anzahlVersicherter',
        'asik' => 'asik',
        'asik_pruefungsstatus' => 'asikPruefungsstatus',
        'aufsichtsperson_e_mail' => 'aufsichtspersonEMail',
        'aufsichtsperson_name' => 'aufsichtspersonName',
        'aufsichtsperson_telefon_nr' => 'aufsichtspersonTelefonNr',
        'begruendung_zum_betreuungsmodell' => 'begruendungZumBetreuungsmodell',
        'bemerkung' => 'bemerkung',
        'bemerkung2' => 'bemerkung2',
        'betreuungsmodell' => 'betreuungsmodell',
        'betriebsart' => 'betriebsart',
        'effektives_anforderunsprofil' => 'effektivesAnforderunsprofil',
        'emailadresse' => 'emailadresse',
        'emailadresse2' => 'emailadresse2',
        'geschenk_gewuenscht' => 'geschenkGewuenscht',
        'geschenkwunsch_bemerkung' => 'geschenkwunschBemerkung',
        'geschenkwunsch_entscheidungszeitpunkt' => 'geschenkwunschEntscheidungszeitpunkt',
        'grund_fuer_fehlende_betreuungspflicht' => 'grundFuerFehlendeBetreuungspflicht',
        'hauptbetrieb_id' => 'hauptbetriebId',
        'homepage' => 'homepage',
        'letzter_nachweis_regelbetreuung' => 'letzterNachweisRegelbetreuung',
        'letztes_geschenk_am' => 'letztesGeschenkAm',
        'links' => 'links',
        'mahnschwelle_ueberschritten' => 'mahnschwelleUeberschritten',
        'mitgliedsnummer' => 'mitgliedsnummer',
        'organisationsart' => 'organisationsart',
        'organisationsname1' => 'organisationsname1',
        'organisationsname2' => 'organisationsname2',
        'organisationsname3' => 'organisationsname3',
        'organisationsname4' => 'organisationsname4',
        'praeventionszentrum_id' => 'praeventionszentrumId',
        'ressourcenverwalter_id' => 'ressourcenverwalterId',
        'telefax' => 'telefax',
        'telefonnummer1' => 'telefonnummer1',
        'telefonnummer2' => 'telefonnummer2',
        'unternehmensnummer' => 'unternehmensnummer',
        'verantwortliche_si_fa_id' => 'verantwortlicheSiFaId',
        'wz_code' => 'wzCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oid' => 'setOid',
        'adresse' => 'setAdresse',
        'anzahl_offener_rueckmeldungen' => 'setAnzahlOffenerRueckmeldungen',
        'anzahl_versicherter' => 'setAnzahlVersicherter',
        'asik' => 'setAsik',
        'asik_pruefungsstatus' => 'setAsikPruefungsstatus',
        'aufsichtsperson_e_mail' => 'setAufsichtspersonEMail',
        'aufsichtsperson_name' => 'setAufsichtspersonName',
        'aufsichtsperson_telefon_nr' => 'setAufsichtspersonTelefonNr',
        'begruendung_zum_betreuungsmodell' => 'setBegruendungZumBetreuungsmodell',
        'bemerkung' => 'setBemerkung',
        'bemerkung2' => 'setBemerkung2',
        'betreuungsmodell' => 'setBetreuungsmodell',
        'betriebsart' => 'setBetriebsart',
        'effektives_anforderunsprofil' => 'setEffektivesAnforderunsprofil',
        'emailadresse' => 'setEmailadresse',
        'emailadresse2' => 'setEmailadresse2',
        'geschenk_gewuenscht' => 'setGeschenkGewuenscht',
        'geschenkwunsch_bemerkung' => 'setGeschenkwunschBemerkung',
        'geschenkwunsch_entscheidungszeitpunkt' => 'setGeschenkwunschEntscheidungszeitpunkt',
        'grund_fuer_fehlende_betreuungspflicht' => 'setGrundFuerFehlendeBetreuungspflicht',
        'hauptbetrieb_id' => 'setHauptbetriebId',
        'homepage' => 'setHomepage',
        'letzter_nachweis_regelbetreuung' => 'setLetzterNachweisRegelbetreuung',
        'letztes_geschenk_am' => 'setLetztesGeschenkAm',
        'links' => 'setLinks',
        'mahnschwelle_ueberschritten' => 'setMahnschwelleUeberschritten',
        'mitgliedsnummer' => 'setMitgliedsnummer',
        'organisationsart' => 'setOrganisationsart',
        'organisationsname1' => 'setOrganisationsname1',
        'organisationsname2' => 'setOrganisationsname2',
        'organisationsname3' => 'setOrganisationsname3',
        'organisationsname4' => 'setOrganisationsname4',
        'praeventionszentrum_id' => 'setPraeventionszentrumId',
        'ressourcenverwalter_id' => 'setRessourcenverwalterId',
        'telefax' => 'setTelefax',
        'telefonnummer1' => 'setTelefonnummer1',
        'telefonnummer2' => 'setTelefonnummer2',
        'unternehmensnummer' => 'setUnternehmensnummer',
        'verantwortliche_si_fa_id' => 'setVerantwortlicheSiFaId',
        'wz_code' => 'setWzCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oid' => 'getOid',
        'adresse' => 'getAdresse',
        'anzahl_offener_rueckmeldungen' => 'getAnzahlOffenerRueckmeldungen',
        'anzahl_versicherter' => 'getAnzahlVersicherter',
        'asik' => 'getAsik',
        'asik_pruefungsstatus' => 'getAsikPruefungsstatus',
        'aufsichtsperson_e_mail' => 'getAufsichtspersonEMail',
        'aufsichtsperson_name' => 'getAufsichtspersonName',
        'aufsichtsperson_telefon_nr' => 'getAufsichtspersonTelefonNr',
        'begruendung_zum_betreuungsmodell' => 'getBegruendungZumBetreuungsmodell',
        'bemerkung' => 'getBemerkung',
        'bemerkung2' => 'getBemerkung2',
        'betreuungsmodell' => 'getBetreuungsmodell',
        'betriebsart' => 'getBetriebsart',
        'effektives_anforderunsprofil' => 'getEffektivesAnforderunsprofil',
        'emailadresse' => 'getEmailadresse',
        'emailadresse2' => 'getEmailadresse2',
        'geschenk_gewuenscht' => 'getGeschenkGewuenscht',
        'geschenkwunsch_bemerkung' => 'getGeschenkwunschBemerkung',
        'geschenkwunsch_entscheidungszeitpunkt' => 'getGeschenkwunschEntscheidungszeitpunkt',
        'grund_fuer_fehlende_betreuungspflicht' => 'getGrundFuerFehlendeBetreuungspflicht',
        'hauptbetrieb_id' => 'getHauptbetriebId',
        'homepage' => 'getHomepage',
        'letzter_nachweis_regelbetreuung' => 'getLetzterNachweisRegelbetreuung',
        'letztes_geschenk_am' => 'getLetztesGeschenkAm',
        'links' => 'getLinks',
        'mahnschwelle_ueberschritten' => 'getMahnschwelleUeberschritten',
        'mitgliedsnummer' => 'getMitgliedsnummer',
        'organisationsart' => 'getOrganisationsart',
        'organisationsname1' => 'getOrganisationsname1',
        'organisationsname2' => 'getOrganisationsname2',
        'organisationsname3' => 'getOrganisationsname3',
        'organisationsname4' => 'getOrganisationsname4',
        'praeventionszentrum_id' => 'getPraeventionszentrumId',
        'ressourcenverwalter_id' => 'getRessourcenverwalterId',
        'telefax' => 'getTelefax',
        'telefonnummer1' => 'getTelefonnummer1',
        'telefonnummer2' => 'getTelefonnummer2',
        'unternehmensnummer' => 'getUnternehmensnummer',
        'verantwortliche_si_fa_id' => 'getVerantwortlicheSiFaId',
        'wz_code' => 'getWzCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ASIK_JA = 'JA';
    public const ASIK_NEIN = 'NEIN';
    public const ASIK_UNBEKANNT = 'UNBEKANNT';
    public const ASIK_NICHT_ZUTREFFEND = 'NICHT_ZUTREFFEND';
    public const ASIK_PRUEFUNGSSTATUS_OFFEN = 'OFFEN';
    public const ASIK_PRUEFUNGSSTATUS_ABGESCHLOSSEN = 'ABGESCHLOSSEN';
    public const ASIK_PRUEFUNGSSTATUS_ABGEBROCHEN = 'ABGEBROCHEN';
    public const ASIK_PRUEFUNGSSTATUS_ANTRAG_EINGEGANGEN = 'ANTRAG_EINGEGANGEN';
    public const ASIK_PRUEFUNGSSTATUS_ANTRAGSFORMULAR_VERSCHICKT = 'ANTRAGSFORMULAR_VERSCHICKT';
    public const BETREUUNGSMODELL_REGELBETREUUNG = 'REGELBETREUUNG';
    public const BETREUUNGSMODELL_U_MODELL = 'U-MODELL';
    public const BETREUUNGSMODELL_KEINE_BETREUUNGSPFLICHT = 'KEINE_BETREUUNGSPFLICHT';
    public const BETREUUNGSMODELL_KEINE_ANGABE = 'KEINE_ANGABE';
    public const BETREUUNGSMODELL_NICHT_ZUTREFFEND = 'NICHT_ZUTREFFEND';
    public const BETRIEBSART_KEINE_ANGABE = 'KEINE_ANGABE';
    public const BETRIEBSART_HAUPTBETRIEB = 'HAUPTBETRIEB';
    public const BETRIEBSART_ZWEIGBETRIEB = 'ZWEIGBETRIEB';
    public const ORGANISATIONSART_MITGLIEDSUNTERNEHMEN = 'MITGLIEDSUNTERNEHMEN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAsikAllowableValues()
    {
        return [
            self::ASIK_JA,
            self::ASIK_NEIN,
            self::ASIK_UNBEKANNT,
            self::ASIK_NICHT_ZUTREFFEND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAsikPruefungsstatusAllowableValues()
    {
        return [
            self::ASIK_PRUEFUNGSSTATUS_OFFEN,
            self::ASIK_PRUEFUNGSSTATUS_ABGESCHLOSSEN,
            self::ASIK_PRUEFUNGSSTATUS_ABGEBROCHEN,
            self::ASIK_PRUEFUNGSSTATUS_ANTRAG_EINGEGANGEN,
            self::ASIK_PRUEFUNGSSTATUS_ANTRAGSFORMULAR_VERSCHICKT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBetreuungsmodellAllowableValues()
    {
        return [
            self::BETREUUNGSMODELL_REGELBETREUUNG,
            self::BETREUUNGSMODELL_U_MODELL,
            self::BETREUUNGSMODELL_KEINE_BETREUUNGSPFLICHT,
            self::BETREUUNGSMODELL_KEINE_ANGABE,
            self::BETREUUNGSMODELL_NICHT_ZUTREFFEND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBetriebsartAllowableValues()
    {
        return [
            self::BETRIEBSART_KEINE_ANGABE,
            self::BETRIEBSART_HAUPTBETRIEB,
            self::BETRIEBSART_ZWEIGBETRIEB,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganisationsartAllowableValues()
    {
        return [
            self::ORGANISATIONSART_MITGLIEDSUNTERNEHMEN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('oid', $data ?? [], null);
        $this->setIfExists('adresse', $data ?? [], null);
        $this->setIfExists('anzahl_offener_rueckmeldungen', $data ?? [], null);
        $this->setIfExists('anzahl_versicherter', $data ?? [], null);
        $this->setIfExists('asik', $data ?? [], null);
        $this->setIfExists('asik_pruefungsstatus', $data ?? [], null);
        $this->setIfExists('aufsichtsperson_e_mail', $data ?? [], null);
        $this->setIfExists('aufsichtsperson_name', $data ?? [], null);
        $this->setIfExists('aufsichtsperson_telefon_nr', $data ?? [], null);
        $this->setIfExists('begruendung_zum_betreuungsmodell', $data ?? [], null);
        $this->setIfExists('bemerkung', $data ?? [], null);
        $this->setIfExists('bemerkung2', $data ?? [], null);
        $this->setIfExists('betreuungsmodell', $data ?? [], null);
        $this->setIfExists('betriebsart', $data ?? [], null);
        $this->setIfExists('effektives_anforderunsprofil', $data ?? [], null);
        $this->setIfExists('emailadresse', $data ?? [], null);
        $this->setIfExists('emailadresse2', $data ?? [], null);
        $this->setIfExists('geschenk_gewuenscht', $data ?? [], null);
        $this->setIfExists('geschenkwunsch_bemerkung', $data ?? [], null);
        $this->setIfExists('geschenkwunsch_entscheidungszeitpunkt', $data ?? [], null);
        $this->setIfExists('grund_fuer_fehlende_betreuungspflicht', $data ?? [], null);
        $this->setIfExists('hauptbetrieb_id', $data ?? [], null);
        $this->setIfExists('homepage', $data ?? [], null);
        $this->setIfExists('letzter_nachweis_regelbetreuung', $data ?? [], null);
        $this->setIfExists('letztes_geschenk_am', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('mahnschwelle_ueberschritten', $data ?? [], null);
        $this->setIfExists('mitgliedsnummer', $data ?? [], null);
        $this->setIfExists('organisationsart', $data ?? [], null);
        $this->setIfExists('organisationsname1', $data ?? [], null);
        $this->setIfExists('organisationsname2', $data ?? [], null);
        $this->setIfExists('organisationsname3', $data ?? [], null);
        $this->setIfExists('organisationsname4', $data ?? [], null);
        $this->setIfExists('praeventionszentrum_id', $data ?? [], null);
        $this->setIfExists('ressourcenverwalter_id', $data ?? [], null);
        $this->setIfExists('telefax', $data ?? [], null);
        $this->setIfExists('telefonnummer1', $data ?? [], null);
        $this->setIfExists('telefonnummer2', $data ?? [], null);
        $this->setIfExists('unternehmensnummer', $data ?? [], null);
        $this->setIfExists('verantwortliche_si_fa_id', $data ?? [], null);
        $this->setIfExists('wz_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['oid'] === null) {
            $invalidProperties[] = "'oid' can't be null";
        }
        $allowedValues = $this->getAsikAllowableValues();
        if (!is_null($this->container['asik']) && !in_array($this->container['asik'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'asik', must be one of '%s'",
                $this->container['asik'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAsikPruefungsstatusAllowableValues();
        if (!is_null($this->container['asik_pruefungsstatus']) && !in_array($this->container['asik_pruefungsstatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'asik_pruefungsstatus', must be one of '%s'",
                $this->container['asik_pruefungsstatus'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBetreuungsmodellAllowableValues();
        if (!is_null($this->container['betreuungsmodell']) && !in_array($this->container['betreuungsmodell'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'betreuungsmodell', must be one of '%s'",
                $this->container['betreuungsmodell'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBetriebsartAllowableValues();
        if (!is_null($this->container['betriebsart']) && !in_array($this->container['betriebsart'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'betriebsart', must be one of '%s'",
                $this->container['betriebsart'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrganisationsartAllowableValues();
        if (!is_null($this->container['organisationsart']) && !in_array($this->container['organisationsart'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'organisationsart', must be one of '%s'",
                $this->container['organisationsart'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets oid
     *
     * @return string
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param string $oid UUID des Datensatzes
     *
     * @return self
     */
    public function setOid($oid)
    {
        if (is_null($oid)) {
            throw new \InvalidArgumentException('non-nullable oid cannot be null');
        }
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets adresse
     *
     * @return \OpenAPI\Client\Model\Adresse|null
     */
    public function getAdresse()
    {
        return $this->container['adresse'];
    }

    /**
     * Sets adresse
     *
     * @param \OpenAPI\Client\Model\Adresse|null $adresse adresse
     *
     * @return self
     */
    public function setAdresse($adresse)
    {
        if (is_null($adresse)) {
            throw new \InvalidArgumentException('non-nullable adresse cannot be null');
        }
        $this->container['adresse'] = $adresse;

        return $this;
    }

    /**
     * Gets anzahl_offener_rueckmeldungen
     *
     * @return int|null
     */
    public function getAnzahlOffenerRueckmeldungen()
    {
        return $this->container['anzahl_offener_rueckmeldungen'];
    }

    /**
     * Sets anzahl_offener_rueckmeldungen
     *
     * @param int|null $anzahl_offener_rueckmeldungen Die Anzahl offener R체ckmeldungen.
     *
     * @return self
     */
    public function setAnzahlOffenerRueckmeldungen($anzahl_offener_rueckmeldungen)
    {
        if (is_null($anzahl_offener_rueckmeldungen)) {
            throw new \InvalidArgumentException('non-nullable anzahl_offener_rueckmeldungen cannot be null');
        }
        $this->container['anzahl_offener_rueckmeldungen'] = $anzahl_offener_rueckmeldungen;

        return $this;
    }

    /**
     * Gets anzahl_versicherter
     *
     * @return int|null
     */
    public function getAnzahlVersicherter()
    {
        return $this->container['anzahl_versicherter'];
    }

    /**
     * Sets anzahl_versicherter
     *
     * @param int|null $anzahl_versicherter Die Anzahl Versicherter.
     *
     * @return self
     */
    public function setAnzahlVersicherter($anzahl_versicherter)
    {
        if (is_null($anzahl_versicherter)) {
            throw new \InvalidArgumentException('non-nullable anzahl_versicherter cannot be null');
        }
        $this->container['anzahl_versicherter'] = $anzahl_versicherter;

        return $this;
    }

    /**
     * Gets asik
     *
     * @return string|null
     */
    public function getAsik()
    {
        return $this->container['asik'];
    }

    /**
     * Sets asik
     *
     * @param string|null $asik Hat das Mitgliedsunternehmen AsiK?
     *
     * @return self
     */
    public function setAsik($asik)
    {
        if (is_null($asik)) {
            throw new \InvalidArgumentException('non-nullable asik cannot be null');
        }
        $allowedValues = $this->getAsikAllowableValues();
        if (!in_array($asik, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'asik', must be one of '%s'",
                    $asik,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['asik'] = $asik;

        return $this;
    }

    /**
     * Gets asik_pruefungsstatus
     *
     * @return string|null
     */
    public function getAsikPruefungsstatus()
    {
        return $this->container['asik_pruefungsstatus'];
    }

    /**
     * Sets asik_pruefungsstatus
     *
     * @param string|null $asik_pruefungsstatus Der AsiK-Pr체fungsstatus.
     *
     * @return self
     */
    public function setAsikPruefungsstatus($asik_pruefungsstatus)
    {
        if (is_null($asik_pruefungsstatus)) {
            throw new \InvalidArgumentException('non-nullable asik_pruefungsstatus cannot be null');
        }
        $allowedValues = $this->getAsikPruefungsstatusAllowableValues();
        if (!in_array($asik_pruefungsstatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'asik_pruefungsstatus', must be one of '%s'",
                    $asik_pruefungsstatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['asik_pruefungsstatus'] = $asik_pruefungsstatus;

        return $this;
    }

    /**
     * Gets aufsichtsperson_e_mail
     *
     * @return string|null
     */
    public function getAufsichtspersonEMail()
    {
        return $this->container['aufsichtsperson_e_mail'];
    }

    /**
     * Sets aufsichtsperson_e_mail
     *
     * @param string|null $aufsichtsperson_e_mail Die E-Mail-Adresse der Aufsichtsperson.
     *
     * @return self
     */
    public function setAufsichtspersonEMail($aufsichtsperson_e_mail)
    {
        if (is_null($aufsichtsperson_e_mail)) {
            throw new \InvalidArgumentException('non-nullable aufsichtsperson_e_mail cannot be null');
        }
        $this->container['aufsichtsperson_e_mail'] = $aufsichtsperson_e_mail;

        return $this;
    }

    /**
     * Gets aufsichtsperson_name
     *
     * @return string|null
     */
    public function getAufsichtspersonName()
    {
        return $this->container['aufsichtsperson_name'];
    }

    /**
     * Sets aufsichtsperson_name
     *
     * @param string|null $aufsichtsperson_name Der Name der Aufsichtsperson.
     *
     * @return self
     */
    public function setAufsichtspersonName($aufsichtsperson_name)
    {
        if (is_null($aufsichtsperson_name)) {
            throw new \InvalidArgumentException('non-nullable aufsichtsperson_name cannot be null');
        }
        $this->container['aufsichtsperson_name'] = $aufsichtsperson_name;

        return $this;
    }

    /**
     * Gets aufsichtsperson_telefon_nr
     *
     * @return string|null
     */
    public function getAufsichtspersonTelefonNr()
    {
        return $this->container['aufsichtsperson_telefon_nr'];
    }

    /**
     * Sets aufsichtsperson_telefon_nr
     *
     * @param string|null $aufsichtsperson_telefon_nr Die Telefonnummer der Aufsichtsperson.
     *
     * @return self
     */
    public function setAufsichtspersonTelefonNr($aufsichtsperson_telefon_nr)
    {
        if (is_null($aufsichtsperson_telefon_nr)) {
            throw new \InvalidArgumentException('non-nullable aufsichtsperson_telefon_nr cannot be null');
        }
        $this->container['aufsichtsperson_telefon_nr'] = $aufsichtsperson_telefon_nr;

        return $this;
    }

    /**
     * Gets begruendung_zum_betreuungsmodell
     *
     * @return string|null
     */
    public function getBegruendungZumBetreuungsmodell()
    {
        return $this->container['begruendung_zum_betreuungsmodell'];
    }

    /**
     * Sets begruendung_zum_betreuungsmodell
     *
     * @param string|null $begruendung_zum_betreuungsmodell Die Begr체ndung f체r das verwendete Betreuungsmodell.
     *
     * @return self
     */
    public function setBegruendungZumBetreuungsmodell($begruendung_zum_betreuungsmodell)
    {
        if (is_null($begruendung_zum_betreuungsmodell)) {
            throw new \InvalidArgumentException('non-nullable begruendung_zum_betreuungsmodell cannot be null');
        }
        $this->container['begruendung_zum_betreuungsmodell'] = $begruendung_zum_betreuungsmodell;

        return $this;
    }

    /**
     * Gets bemerkung
     *
     * @return string|null
     */
    public function getBemerkung()
    {
        return $this->container['bemerkung'];
    }

    /**
     * Sets bemerkung
     *
     * @param string|null $bemerkung Bemerkung.
     *
     * @return self
     */
    public function setBemerkung($bemerkung)
    {
        if (is_null($bemerkung)) {
            throw new \InvalidArgumentException('non-nullable bemerkung cannot be null');
        }
        $this->container['bemerkung'] = $bemerkung;

        return $this;
    }

    /**
     * Gets bemerkung2
     *
     * @return string|null
     */
    public function getBemerkung2()
    {
        return $this->container['bemerkung2'];
    }

    /**
     * Sets bemerkung2
     *
     * @param string|null $bemerkung2 Bemerkung 2.
     *
     * @return self
     */
    public function setBemerkung2($bemerkung2)
    {
        if (is_null($bemerkung2)) {
            throw new \InvalidArgumentException('non-nullable bemerkung2 cannot be null');
        }
        $this->container['bemerkung2'] = $bemerkung2;

        return $this;
    }

    /**
     * Gets betreuungsmodell
     *
     * @return string|null
     */
    public function getBetreuungsmodell()
    {
        return $this->container['betreuungsmodell'];
    }

    /**
     * Sets betreuungsmodell
     *
     * @param string|null $betreuungsmodell Das Betreuungsmodell.
     *
     * @return self
     */
    public function setBetreuungsmodell($betreuungsmodell)
    {
        if (is_null($betreuungsmodell)) {
            throw new \InvalidArgumentException('non-nullable betreuungsmodell cannot be null');
        }
        $allowedValues = $this->getBetreuungsmodellAllowableValues();
        if (!in_array($betreuungsmodell, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'betreuungsmodell', must be one of '%s'",
                    $betreuungsmodell,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['betreuungsmodell'] = $betreuungsmodell;

        return $this;
    }

    /**
     * Gets betriebsart
     *
     * @return string|null
     */
    public function getBetriebsart()
    {
        return $this->container['betriebsart'];
    }

    /**
     * Sets betriebsart
     *
     * @param string|null $betriebsart Die Betriebsart.
     *
     * @return self
     */
    public function setBetriebsart($betriebsart)
    {
        if (is_null($betriebsart)) {
            throw new \InvalidArgumentException('non-nullable betriebsart cannot be null');
        }
        $allowedValues = $this->getBetriebsartAllowableValues();
        if (!in_array($betriebsart, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'betriebsart', must be one of '%s'",
                    $betriebsart,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['betriebsart'] = $betriebsart;

        return $this;
    }

    /**
     * Gets effektives_anforderunsprofil
     *
     * @return string|null
     */
    public function getEffektivesAnforderunsprofil()
    {
        return $this->container['effektives_anforderunsprofil'];
    }

    /**
     * Sets effektives_anforderunsprofil
     *
     * @param string|null $effektives_anforderunsprofil Das effektive Anforderungsprofil.
     *
     * @return self
     */
    public function setEffektivesAnforderunsprofil($effektives_anforderunsprofil)
    {
        if (is_null($effektives_anforderunsprofil)) {
            throw new \InvalidArgumentException('non-nullable effektives_anforderunsprofil cannot be null');
        }
        $this->container['effektives_anforderunsprofil'] = $effektives_anforderunsprofil;

        return $this;
    }

    /**
     * Gets emailadresse
     *
     * @return string|null
     */
    public function getEmailadresse()
    {
        return $this->container['emailadresse'];
    }

    /**
     * Sets emailadresse
     *
     * @param string|null $emailadresse Die E-Mail-Adresse.
     *
     * @return self
     */
    public function setEmailadresse($emailadresse)
    {
        if (is_null($emailadresse)) {
            throw new \InvalidArgumentException('non-nullable emailadresse cannot be null');
        }
        $this->container['emailadresse'] = $emailadresse;

        return $this;
    }

    /**
     * Gets emailadresse2
     *
     * @return string|null
     */
    public function getEmailadresse2()
    {
        return $this->container['emailadresse2'];
    }

    /**
     * Sets emailadresse2
     *
     * @param string|null $emailadresse2 Die E-Mail-Adresse 2.
     *
     * @return self
     */
    public function setEmailadresse2($emailadresse2)
    {
        if (is_null($emailadresse2)) {
            throw new \InvalidArgumentException('non-nullable emailadresse2 cannot be null');
        }
        $this->container['emailadresse2'] = $emailadresse2;

        return $this;
    }

    /**
     * Gets geschenk_gewuenscht
     *
     * @return bool|null
     */
    public function getGeschenkGewuenscht()
    {
        return $this->container['geschenk_gewuenscht'];
    }

    /**
     * Sets geschenk_gewuenscht
     *
     * @param bool|null $geschenk_gewuenscht Ob ein Geschenk gew체nscht ist.
     *
     * @return self
     */
    public function setGeschenkGewuenscht($geschenk_gewuenscht)
    {
        if (is_null($geschenk_gewuenscht)) {
            throw new \InvalidArgumentException('non-nullable geschenk_gewuenscht cannot be null');
        }
        $this->container['geschenk_gewuenscht'] = $geschenk_gewuenscht;

        return $this;
    }

    /**
     * Gets geschenkwunsch_bemerkung
     *
     * @return string|null
     */
    public function getGeschenkwunschBemerkung()
    {
        return $this->container['geschenkwunsch_bemerkung'];
    }

    /**
     * Sets geschenkwunsch_bemerkung
     *
     * @param string|null $geschenkwunsch_bemerkung Die Bemerkung zum Geschenkwunsch.
     *
     * @return self
     */
    public function setGeschenkwunschBemerkung($geschenkwunsch_bemerkung)
    {
        if (is_null($geschenkwunsch_bemerkung)) {
            throw new \InvalidArgumentException('non-nullable geschenkwunsch_bemerkung cannot be null');
        }
        $this->container['geschenkwunsch_bemerkung'] = $geschenkwunsch_bemerkung;

        return $this;
    }

    /**
     * Gets geschenkwunsch_entscheidungszeitpunkt
     *
     * @return \DateTime|null
     */
    public function getGeschenkwunschEntscheidungszeitpunkt()
    {
        return $this->container['geschenkwunsch_entscheidungszeitpunkt'];
    }

    /**
     * Sets geschenkwunsch_entscheidungszeitpunkt
     *
     * @param \DateTime|null $geschenkwunsch_entscheidungszeitpunkt Der Zeitpunkt der Entscheidung / Mitteilung des Geschenkwunsches.
     *
     * @return self
     */
    public function setGeschenkwunschEntscheidungszeitpunkt($geschenkwunsch_entscheidungszeitpunkt)
    {
        if (is_null($geschenkwunsch_entscheidungszeitpunkt)) {
            throw new \InvalidArgumentException('non-nullable geschenkwunsch_entscheidungszeitpunkt cannot be null');
        }
        $this->container['geschenkwunsch_entscheidungszeitpunkt'] = $geschenkwunsch_entscheidungszeitpunkt;

        return $this;
    }

    /**
     * Gets grund_fuer_fehlende_betreuungspflicht
     *
     * @return string|null
     */
    public function getGrundFuerFehlendeBetreuungspflicht()
    {
        return $this->container['grund_fuer_fehlende_betreuungspflicht'];
    }

    /**
     * Sets grund_fuer_fehlende_betreuungspflicht
     *
     * @param string|null $grund_fuer_fehlende_betreuungspflicht Der Grund f체r die fehlende Betreuungspflicht.
     *
     * @return self
     */
    public function setGrundFuerFehlendeBetreuungspflicht($grund_fuer_fehlende_betreuungspflicht)
    {
        if (is_null($grund_fuer_fehlende_betreuungspflicht)) {
            throw new \InvalidArgumentException('non-nullable grund_fuer_fehlende_betreuungspflicht cannot be null');
        }
        $this->container['grund_fuer_fehlende_betreuungspflicht'] = $grund_fuer_fehlende_betreuungspflicht;

        return $this;
    }

    /**
     * Gets hauptbetrieb_id
     *
     * @return string|null
     */
    public function getHauptbetriebId()
    {
        return $this->container['hauptbetrieb_id'];
    }

    /**
     * Sets hauptbetrieb_id
     *
     * @param string|null $hauptbetrieb_id Die ID des Hauptbetriebs.
     *
     * @return self
     */
    public function setHauptbetriebId($hauptbetrieb_id)
    {
        if (is_null($hauptbetrieb_id)) {
            throw new \InvalidArgumentException('non-nullable hauptbetrieb_id cannot be null');
        }
        $this->container['hauptbetrieb_id'] = $hauptbetrieb_id;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string|null
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string|null $homepage Die Homepage.
     *
     * @return self
     */
    public function setHomepage($homepage)
    {
        if (is_null($homepage)) {
            throw new \InvalidArgumentException('non-nullable homepage cannot be null');
        }
        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets letzter_nachweis_regelbetreuung
     *
     * @return \DateTime|null
     */
    public function getLetzterNachweisRegelbetreuung()
    {
        return $this->container['letzter_nachweis_regelbetreuung'];
    }

    /**
     * Sets letzter_nachweis_regelbetreuung
     *
     * @param \DateTime|null $letzter_nachweis_regelbetreuung Das Datum des letzten Nachweises der Regelbetreuung.
     *
     * @return self
     */
    public function setLetzterNachweisRegelbetreuung($letzter_nachweis_regelbetreuung)
    {
        if (is_null($letzter_nachweis_regelbetreuung)) {
            throw new \InvalidArgumentException('non-nullable letzter_nachweis_regelbetreuung cannot be null');
        }
        $this->container['letzter_nachweis_regelbetreuung'] = $letzter_nachweis_regelbetreuung;

        return $this;
    }

    /**
     * Gets letztes_geschenk_am
     *
     * @return \DateTime|null
     */
    public function getLetztesGeschenkAm()
    {
        return $this->container['letztes_geschenk_am'];
    }

    /**
     * Sets letztes_geschenk_am
     *
     * @param \DateTime|null $letztes_geschenk_am Datum an dem das letzte Geschenk 체bergeben wurde.
     *
     * @return self
     */
    public function setLetztesGeschenkAm($letztes_geschenk_am)
    {
        if (is_null($letztes_geschenk_am)) {
            throw new \InvalidArgumentException('non-nullable letztes_geschenk_am cannot be null');
        }
        $this->container['letztes_geschenk_am'] = $letztes_geschenk_am;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\Link[]|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\Link[]|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets mahnschwelle_ueberschritten
     *
     * @return bool|null
     */
    public function getMahnschwelleUeberschritten()
    {
        return $this->container['mahnschwelle_ueberschritten'];
    }

    /**
     * Sets mahnschwelle_ueberschritten
     *
     * @param bool|null $mahnschwelle_ueberschritten Ist der Schwellenwert der Mahnschwelle 체berschritten?
     *
     * @return self
     */
    public function setMahnschwelleUeberschritten($mahnschwelle_ueberschritten)
    {
        if (is_null($mahnschwelle_ueberschritten)) {
            throw new \InvalidArgumentException('non-nullable mahnschwelle_ueberschritten cannot be null');
        }
        $this->container['mahnschwelle_ueberschritten'] = $mahnschwelle_ueberschritten;

        return $this;
    }

    /**
     * Gets mitgliedsnummer
     *
     * @return string|null
     */
    public function getMitgliedsnummer()
    {
        return $this->container['mitgliedsnummer'];
    }

    /**
     * Sets mitgliedsnummer
     *
     * @param string|null $mitgliedsnummer Die Mitgliedsnummer inklusive dem 4-stelligem Betriebsst채ttenanteil (12-stellige Betriebsst채tten-Nr.).
     *
     * @return self
     */
    public function setMitgliedsnummer($mitgliedsnummer)
    {
        if (is_null($mitgliedsnummer)) {
            throw new \InvalidArgumentException('non-nullable mitgliedsnummer cannot be null');
        }
        $this->container['mitgliedsnummer'] = $mitgliedsnummer;

        return $this;
    }

    /**
     * Gets organisationsart
     *
     * @return string|null
     */
    public function getOrganisationsart()
    {
        return $this->container['organisationsart'];
    }

    /**
     * Sets organisationsart
     *
     * @param string|null $organisationsart Die Organisationsart.
     *
     * @return self
     */
    public function setOrganisationsart($organisationsart)
    {
        if (is_null($organisationsart)) {
            throw new \InvalidArgumentException('non-nullable organisationsart cannot be null');
        }
        $allowedValues = $this->getOrganisationsartAllowableValues();
        if (!in_array($organisationsart, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'organisationsart', must be one of '%s'",
                    $organisationsart,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['organisationsart'] = $organisationsart;

        return $this;
    }

    /**
     * Gets organisationsname1
     *
     * @return string|null
     */
    public function getOrganisationsname1()
    {
        return $this->container['organisationsname1'];
    }

    /**
     * Sets organisationsname1
     *
     * @param string|null $organisationsname1 Name 1 des Mitgliedsunternehmens.
     *
     * @return self
     */
    public function setOrganisationsname1($organisationsname1)
    {
        if (is_null($organisationsname1)) {
            throw new \InvalidArgumentException('non-nullable organisationsname1 cannot be null');
        }
        $this->container['organisationsname1'] = $organisationsname1;

        return $this;
    }

    /**
     * Gets organisationsname2
     *
     * @return string|null
     */
    public function getOrganisationsname2()
    {
        return $this->container['organisationsname2'];
    }

    /**
     * Sets organisationsname2
     *
     * @param string|null $organisationsname2 Name 2 des Mitgliedsunternehmens (weiterf체hrend).
     *
     * @return self
     */
    public function setOrganisationsname2($organisationsname2)
    {
        if (is_null($organisationsname2)) {
            throw new \InvalidArgumentException('non-nullable organisationsname2 cannot be null');
        }
        $this->container['organisationsname2'] = $organisationsname2;

        return $this;
    }

    /**
     * Gets organisationsname3
     *
     * @return string|null
     */
    public function getOrganisationsname3()
    {
        return $this->container['organisationsname3'];
    }

    /**
     * Sets organisationsname3
     *
     * @param string|null $organisationsname3 Name 3 des Mitgliedsunternehmens (weiterf체hrend).
     *
     * @return self
     */
    public function setOrganisationsname3($organisationsname3)
    {
        if (is_null($organisationsname3)) {
            throw new \InvalidArgumentException('non-nullable organisationsname3 cannot be null');
        }
        $this->container['organisationsname3'] = $organisationsname3;

        return $this;
    }

    /**
     * Gets organisationsname4
     *
     * @return string|null
     */
    public function getOrganisationsname4()
    {
        return $this->container['organisationsname4'];
    }

    /**
     * Sets organisationsname4
     *
     * @param string|null $organisationsname4 Name 4 des Mitgliedsunternehmens (weiterf체hrend).
     *
     * @return self
     */
    public function setOrganisationsname4($organisationsname4)
    {
        if (is_null($organisationsname4)) {
            throw new \InvalidArgumentException('non-nullable organisationsname4 cannot be null');
        }
        $this->container['organisationsname4'] = $organisationsname4;

        return $this;
    }

    /**
     * Gets praeventionszentrum_id
     *
     * @return string|null
     */
    public function getPraeventionszentrumId()
    {
        return $this->container['praeventionszentrum_id'];
    }

    /**
     * Sets praeventionszentrum_id
     *
     * @param string|null $praeventionszentrum_id Die ID des Pr채ventionszentrum.
     *
     * @return self
     */
    public function setPraeventionszentrumId($praeventionszentrum_id)
    {
        if (is_null($praeventionszentrum_id)) {
            throw new \InvalidArgumentException('non-nullable praeventionszentrum_id cannot be null');
        }
        $this->container['praeventionszentrum_id'] = $praeventionszentrum_id;

        return $this;
    }

    /**
     * Gets ressourcenverwalter_id
     *
     * @return string|null
     */
    public function getRessourcenverwalterId()
    {
        return $this->container['ressourcenverwalter_id'];
    }

    /**
     * Sets ressourcenverwalter_id
     *
     * @param string|null $ressourcenverwalter_id Die ID des Ressourcenverwalters.
     *
     * @return self
     */
    public function setRessourcenverwalterId($ressourcenverwalter_id)
    {
        if (is_null($ressourcenverwalter_id)) {
            throw new \InvalidArgumentException('non-nullable ressourcenverwalter_id cannot be null');
        }
        $this->container['ressourcenverwalter_id'] = $ressourcenverwalter_id;

        return $this;
    }

    /**
     * Gets telefax
     *
     * @return string|null
     */
    public function getTelefax()
    {
        return $this->container['telefax'];
    }

    /**
     * Sets telefax
     *
     * @param string|null $telefax Telefax.
     *
     * @return self
     */
    public function setTelefax($telefax)
    {
        if (is_null($telefax)) {
            throw new \InvalidArgumentException('non-nullable telefax cannot be null');
        }
        $this->container['telefax'] = $telefax;

        return $this;
    }

    /**
     * Gets telefonnummer1
     *
     * @return string|null
     */
    public function getTelefonnummer1()
    {
        return $this->container['telefonnummer1'];
    }

    /**
     * Sets telefonnummer1
     *
     * @param string|null $telefonnummer1 Telefonnummer 1.
     *
     * @return self
     */
    public function setTelefonnummer1($telefonnummer1)
    {
        if (is_null($telefonnummer1)) {
            throw new \InvalidArgumentException('non-nullable telefonnummer1 cannot be null');
        }
        $this->container['telefonnummer1'] = $telefonnummer1;

        return $this;
    }

    /**
     * Gets telefonnummer2
     *
     * @return string|null
     */
    public function getTelefonnummer2()
    {
        return $this->container['telefonnummer2'];
    }

    /**
     * Sets telefonnummer2
     *
     * @param string|null $telefonnummer2 Telefonnummer 2.
     *
     * @return self
     */
    public function setTelefonnummer2($telefonnummer2)
    {
        if (is_null($telefonnummer2)) {
            throw new \InvalidArgumentException('non-nullable telefonnummer2 cannot be null');
        }
        $this->container['telefonnummer2'] = $telefonnummer2;

        return $this;
    }

    /**
     * Gets unternehmensnummer
     *
     * @return string|null
     */
    public function getUnternehmensnummer()
    {
        return $this->container['unternehmensnummer'];
    }

    /**
     * Sets unternehmensnummer
     *
     * @param string|null $unternehmensnummer Die Unternehmensnummer.
     *
     * @return self
     */
    public function setUnternehmensnummer($unternehmensnummer)
    {
        if (is_null($unternehmensnummer)) {
            throw new \InvalidArgumentException('non-nullable unternehmensnummer cannot be null');
        }
        $this->container['unternehmensnummer'] = $unternehmensnummer;

        return $this;
    }

    /**
     * Gets verantwortliche_si_fa_id
     *
     * @return string|null
     */
    public function getVerantwortlicheSiFaId()
    {
        return $this->container['verantwortliche_si_fa_id'];
    }

    /**
     * Sets verantwortliche_si_fa_id
     *
     * @param string|null $verantwortliche_si_fa_id Die verantwortliche SiFa.
     *
     * @return self
     */
    public function setVerantwortlicheSiFaId($verantwortliche_si_fa_id)
    {
        if (is_null($verantwortliche_si_fa_id)) {
            throw new \InvalidArgumentException('non-nullable verantwortliche_si_fa_id cannot be null');
        }
        $this->container['verantwortliche_si_fa_id'] = $verantwortliche_si_fa_id;

        return $this;
    }

    /**
     * Gets wz_code
     *
     * @return string|null
     */
    public function getWzCode()
    {
        return $this->container['wz_code'];
    }

    /**
     * Sets wz_code
     *
     * @param string|null $wz_code Der WZ-Code des Wirtschaftszweigs.
     *
     * @return self
     */
    public function setWzCode($wz_code)
    {
        if (is_null($wz_code)) {
            throw new \InvalidArgumentException('non-nullable wz_code cannot be null');
        }
        $this->container['wz_code'] = $wz_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


