<?php
/**
 * Ausbildungsgangabschnitt
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers f체r die Version 2. Die Dokumentation zu speziellen Versionen kann 체ber die Angabe des zus채tzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 f체r die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * The version of the OpenAPI document: 2
 * Contact: info@veda.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Ausbildungsgangabschnitt Class Doc Comment
 *
 * @category Class
 * @description Ausbildungsgangabschnitt mit Details wie Reihenfolge und Art.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Ausbildungsgangabschnitt implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Ausbildungsgangabschnitt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'oid' => 'string',
        'abbildung_auf_e_learning_plattform' => 'bool',
        'ausbildungsgangabschnittsart' => 'string',
        'bezeichnung' => 'string',
        'kurz_bezeichnung' => 'string',
        'links' => '\OpenAPI\Client\Model\Link[]',
        'reihenfolge' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'oid' => null,
        'abbildung_auf_e_learning_plattform' => null,
        'ausbildungsgangabschnittsart' => null,
        'bezeichnung' => null,
        'kurz_bezeichnung' => null,
        'links' => null,
        'reihenfolge' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'oid' => false,
		'abbildung_auf_e_learning_plattform' => false,
		'ausbildungsgangabschnittsart' => false,
		'bezeichnung' => false,
		'kurz_bezeichnung' => false,
		'links' => false,
		'reihenfolge' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oid' => 'oid',
        'abbildung_auf_e_learning_plattform' => 'abbildungAufELearningPlattform',
        'ausbildungsgangabschnittsart' => 'ausbildungsgangabschnittsart',
        'bezeichnung' => 'bezeichnung',
        'kurz_bezeichnung' => 'kurzBezeichnung',
        'links' => 'links',
        'reihenfolge' => 'reihenfolge'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oid' => 'setOid',
        'abbildung_auf_e_learning_plattform' => 'setAbbildungAufELearningPlattform',
        'ausbildungsgangabschnittsart' => 'setAusbildungsgangabschnittsart',
        'bezeichnung' => 'setBezeichnung',
        'kurz_bezeichnung' => 'setKurzBezeichnung',
        'links' => 'setLinks',
        'reihenfolge' => 'setReihenfolge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oid' => 'getOid',
        'abbildung_auf_e_learning_plattform' => 'getAbbildungAufELearningPlattform',
        'ausbildungsgangabschnittsart' => 'getAusbildungsgangabschnittsart',
        'bezeichnung' => 'getBezeichnung',
        'kurz_bezeichnung' => 'getKurzBezeichnung',
        'links' => 'getLinks',
        'reihenfolge' => 'getReihenfolge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('oid', $data ?? [], null);
        $this->setIfExists('abbildung_auf_e_learning_plattform', $data ?? [], null);
        $this->setIfExists('ausbildungsgangabschnittsart', $data ?? [], null);
        $this->setIfExists('bezeichnung', $data ?? [], null);
        $this->setIfExists('kurz_bezeichnung', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('reihenfolge', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['oid'] === null) {
            $invalidProperties[] = "'oid' can't be null";
        }
        if ($this->container['abbildung_auf_e_learning_plattform'] === null) {
            $invalidProperties[] = "'abbildung_auf_e_learning_plattform' can't be null";
        }
        if ($this->container['ausbildungsgangabschnittsart'] === null) {
            $invalidProperties[] = "'ausbildungsgangabschnittsart' can't be null";
        }
        if ($this->container['bezeichnung'] === null) {
            $invalidProperties[] = "'bezeichnung' can't be null";
        }
        if ($this->container['kurz_bezeichnung'] === null) {
            $invalidProperties[] = "'kurz_bezeichnung' can't be null";
        }
        if ($this->container['reihenfolge'] === null) {
            $invalidProperties[] = "'reihenfolge' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets oid
     *
     * @return string
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param string $oid UUID des Datensatzes
     *
     * @return self
     */
    public function setOid($oid)
    {
        if (is_null($oid)) {
            throw new \InvalidArgumentException('non-nullable oid cannot be null');
        }
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets abbildung_auf_e_learning_plattform
     *
     * @return bool
     */
    public function getAbbildungAufELearningPlattform()
    {
        return $this->container['abbildung_auf_e_learning_plattform'];
    }

    /**
     * Sets abbildung_auf_e_learning_plattform
     *
     * @param bool $abbildung_auf_e_learning_plattform Abbildung auf E-Learning-Plattform
     *
     * @return self
     */
    public function setAbbildungAufELearningPlattform($abbildung_auf_e_learning_plattform)
    {
        if (is_null($abbildung_auf_e_learning_plattform)) {
            throw new \InvalidArgumentException('non-nullable abbildung_auf_e_learning_plattform cannot be null');
        }
        $this->container['abbildung_auf_e_learning_plattform'] = $abbildung_auf_e_learning_plattform;

        return $this;
    }

    /**
     * Gets ausbildungsgangabschnittsart
     *
     * @return string
     */
    public function getAusbildungsgangabschnittsart()
    {
        return $this->container['ausbildungsgangabschnittsart'];
    }

    /**
     * Sets ausbildungsgangabschnittsart
     *
     * @param string $ausbildungsgangabschnittsart Art des Ausbildungsgangabschnitts
     *
     * @return self
     */
    public function setAusbildungsgangabschnittsart($ausbildungsgangabschnittsart)
    {
        if (is_null($ausbildungsgangabschnittsart)) {
            throw new \InvalidArgumentException('non-nullable ausbildungsgangabschnittsart cannot be null');
        }
        $this->container['ausbildungsgangabschnittsart'] = $ausbildungsgangabschnittsart;

        return $this;
    }

    /**
     * Gets bezeichnung
     *
     * @return string
     */
    public function getBezeichnung()
    {
        return $this->container['bezeichnung'];
    }

    /**
     * Sets bezeichnung
     *
     * @param string $bezeichnung Bezeichnung des Ausbildungsgangabschnitt
     *
     * @return self
     */
    public function setBezeichnung($bezeichnung)
    {
        if (is_null($bezeichnung)) {
            throw new \InvalidArgumentException('non-nullable bezeichnung cannot be null');
        }
        $this->container['bezeichnung'] = $bezeichnung;

        return $this;
    }

    /**
     * Gets kurz_bezeichnung
     *
     * @return string
     */
    public function getKurzBezeichnung()
    {
        return $this->container['kurz_bezeichnung'];
    }

    /**
     * Sets kurz_bezeichnung
     *
     * @param string $kurz_bezeichnung Kurzbezeichnung des Ausbildungsgangabschnitt
     *
     * @return self
     */
    public function setKurzBezeichnung($kurz_bezeichnung)
    {
        if (is_null($kurz_bezeichnung)) {
            throw new \InvalidArgumentException('non-nullable kurz_bezeichnung cannot be null');
        }
        $this->container['kurz_bezeichnung'] = $kurz_bezeichnung;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\Link[]|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\Link[]|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets reihenfolge
     *
     * @return int
     */
    public function getReihenfolge()
    {
        return $this->container['reihenfolge'];
    }

    /**
     * Sets reihenfolge
     *
     * @param int $reihenfolge Nummer zur Bestimmung der Reihenfolge
     *
     * @return self
     */
    public function setReihenfolge($reihenfolge)
    {
        if (is_null($reihenfolge)) {
            throw new \InvalidArgumentException('non-nullable reihenfolge cannot be null');
        }
        $this->container['reihenfolge'] = $reihenfolge;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


