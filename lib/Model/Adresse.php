<?php
/**
 * Adresse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers für die Version 2. Die Dokumentation zu speziellen Versionen kann über die Angabe des zusätzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 für die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * The version of the OpenAPI document: 2
 * Contact: info@veda.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Adresse Class Doc Comment
 *
 * @category Class
 * @description Eine Adresse bestehend aus Straße, Hausnummer, PLZ, Ort und weiteren Angaben.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Adresse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Adresse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'anschriftenzusatz1' => 'string',
        'anschriftenzusatz2' => 'string',
        'anschriftenzusatz3' => 'string',
        'anschriftenzusatz4' => 'string',
        'breitengrad' => 'float',
        'hausnummer' => 'string',
        'laengengrad' => 'float',
        'land' => 'string',
        'ort' => 'string',
        'ortsteil' => 'string',
        'plz' => 'string',
        'postfach' => 'string',
        'postfach_land' => 'string',
        'postfach_ort' => 'string',
        'postfach_plz' => 'string',
        'postfach_region' => 'string',
        'region' => 'string',
        'strasse' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'anschriftenzusatz1' => null,
        'anschriftenzusatz2' => null,
        'anschriftenzusatz3' => null,
        'anschriftenzusatz4' => null,
        'breitengrad' => 'double',
        'hausnummer' => null,
        'laengengrad' => 'double',
        'land' => null,
        'ort' => null,
        'ortsteil' => null,
        'plz' => null,
        'postfach' => null,
        'postfach_land' => null,
        'postfach_ort' => null,
        'postfach_plz' => null,
        'postfach_region' => null,
        'region' => null,
        'strasse' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'anschriftenzusatz1' => false,
		'anschriftenzusatz2' => false,
		'anschriftenzusatz3' => false,
		'anschriftenzusatz4' => false,
		'breitengrad' => false,
		'hausnummer' => false,
		'laengengrad' => false,
		'land' => false,
		'ort' => false,
		'ortsteil' => false,
		'plz' => false,
		'postfach' => false,
		'postfach_land' => false,
		'postfach_ort' => false,
		'postfach_plz' => false,
		'postfach_region' => false,
		'region' => false,
		'strasse' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'anschriftenzusatz1' => 'anschriftenzusatz1',
        'anschriftenzusatz2' => 'anschriftenzusatz2',
        'anschriftenzusatz3' => 'anschriftenzusatz3',
        'anschriftenzusatz4' => 'anschriftenzusatz4',
        'breitengrad' => 'breitengrad',
        'hausnummer' => 'hausnummer',
        'laengengrad' => 'laengengrad',
        'land' => 'land',
        'ort' => 'ort',
        'ortsteil' => 'ortsteil',
        'plz' => 'plz',
        'postfach' => 'postfach',
        'postfach_land' => 'postfachLand',
        'postfach_ort' => 'postfachOrt',
        'postfach_plz' => 'postfachPlz',
        'postfach_region' => 'postfachRegion',
        'region' => 'region',
        'strasse' => 'strasse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'anschriftenzusatz1' => 'setAnschriftenzusatz1',
        'anschriftenzusatz2' => 'setAnschriftenzusatz2',
        'anschriftenzusatz3' => 'setAnschriftenzusatz3',
        'anschriftenzusatz4' => 'setAnschriftenzusatz4',
        'breitengrad' => 'setBreitengrad',
        'hausnummer' => 'setHausnummer',
        'laengengrad' => 'setLaengengrad',
        'land' => 'setLand',
        'ort' => 'setOrt',
        'ortsteil' => 'setOrtsteil',
        'plz' => 'setPlz',
        'postfach' => 'setPostfach',
        'postfach_land' => 'setPostfachLand',
        'postfach_ort' => 'setPostfachOrt',
        'postfach_plz' => 'setPostfachPlz',
        'postfach_region' => 'setPostfachRegion',
        'region' => 'setRegion',
        'strasse' => 'setStrasse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'anschriftenzusatz1' => 'getAnschriftenzusatz1',
        'anschriftenzusatz2' => 'getAnschriftenzusatz2',
        'anschriftenzusatz3' => 'getAnschriftenzusatz3',
        'anschriftenzusatz4' => 'getAnschriftenzusatz4',
        'breitengrad' => 'getBreitengrad',
        'hausnummer' => 'getHausnummer',
        'laengengrad' => 'getLaengengrad',
        'land' => 'getLand',
        'ort' => 'getOrt',
        'ortsteil' => 'getOrtsteil',
        'plz' => 'getPlz',
        'postfach' => 'getPostfach',
        'postfach_land' => 'getPostfachLand',
        'postfach_ort' => 'getPostfachOrt',
        'postfach_plz' => 'getPostfachPlz',
        'postfach_region' => 'getPostfachRegion',
        'region' => 'getRegion',
        'strasse' => 'getStrasse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('anschriftenzusatz1', $data ?? [], null);
        $this->setIfExists('anschriftenzusatz2', $data ?? [], null);
        $this->setIfExists('anschriftenzusatz3', $data ?? [], null);
        $this->setIfExists('anschriftenzusatz4', $data ?? [], null);
        $this->setIfExists('breitengrad', $data ?? [], null);
        $this->setIfExists('hausnummer', $data ?? [], null);
        $this->setIfExists('laengengrad', $data ?? [], null);
        $this->setIfExists('land', $data ?? [], null);
        $this->setIfExists('ort', $data ?? [], null);
        $this->setIfExists('ortsteil', $data ?? [], null);
        $this->setIfExists('plz', $data ?? [], null);
        $this->setIfExists('postfach', $data ?? [], null);
        $this->setIfExists('postfach_land', $data ?? [], null);
        $this->setIfExists('postfach_ort', $data ?? [], null);
        $this->setIfExists('postfach_plz', $data ?? [], null);
        $this->setIfExists('postfach_region', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('strasse', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets anschriftenzusatz1
     *
     * @return string|null
     */
    public function getAnschriftenzusatz1()
    {
        return $this->container['anschriftenzusatz1'];
    }

    /**
     * Sets anschriftenzusatz1
     *
     * @param string|null $anschriftenzusatz1 Anschriftenzusatz 1.
     *
     * @return self
     */
    public function setAnschriftenzusatz1($anschriftenzusatz1)
    {
        if (is_null($anschriftenzusatz1)) {
            throw new \InvalidArgumentException('non-nullable anschriftenzusatz1 cannot be null');
        }
        $this->container['anschriftenzusatz1'] = $anschriftenzusatz1;

        return $this;
    }

    /**
     * Gets anschriftenzusatz2
     *
     * @return string|null
     */
    public function getAnschriftenzusatz2()
    {
        return $this->container['anschriftenzusatz2'];
    }

    /**
     * Sets anschriftenzusatz2
     *
     * @param string|null $anschriftenzusatz2 Anschriftenzusatz 2.
     *
     * @return self
     */
    public function setAnschriftenzusatz2($anschriftenzusatz2)
    {
        if (is_null($anschriftenzusatz2)) {
            throw new \InvalidArgumentException('non-nullable anschriftenzusatz2 cannot be null');
        }
        $this->container['anschriftenzusatz2'] = $anschriftenzusatz2;

        return $this;
    }

    /**
     * Gets anschriftenzusatz3
     *
     * @return string|null
     */
    public function getAnschriftenzusatz3()
    {
        return $this->container['anschriftenzusatz3'];
    }

    /**
     * Sets anschriftenzusatz3
     *
     * @param string|null $anschriftenzusatz3 Anschriftenzusatz 3.
     *
     * @return self
     */
    public function setAnschriftenzusatz3($anschriftenzusatz3)
    {
        if (is_null($anschriftenzusatz3)) {
            throw new \InvalidArgumentException('non-nullable anschriftenzusatz3 cannot be null');
        }
        $this->container['anschriftenzusatz3'] = $anschriftenzusatz3;

        return $this;
    }

    /**
     * Gets anschriftenzusatz4
     *
     * @return string|null
     */
    public function getAnschriftenzusatz4()
    {
        return $this->container['anschriftenzusatz4'];
    }

    /**
     * Sets anschriftenzusatz4
     *
     * @param string|null $anschriftenzusatz4 Anschriftenzusatz 4.
     *
     * @return self
     */
    public function setAnschriftenzusatz4($anschriftenzusatz4)
    {
        if (is_null($anschriftenzusatz4)) {
            throw new \InvalidArgumentException('non-nullable anschriftenzusatz4 cannot be null');
        }
        $this->container['anschriftenzusatz4'] = $anschriftenzusatz4;

        return $this;
    }

    /**
     * Gets breitengrad
     *
     * @return float|null
     */
    public function getBreitengrad()
    {
        return $this->container['breitengrad'];
    }

    /**
     * Sets breitengrad
     *
     * @param float|null $breitengrad Breitengrad der geographischen Koordinaten.
     *
     * @return self
     */
    public function setBreitengrad($breitengrad)
    {
        if (is_null($breitengrad)) {
            throw new \InvalidArgumentException('non-nullable breitengrad cannot be null');
        }
        $this->container['breitengrad'] = $breitengrad;

        return $this;
    }

    /**
     * Gets hausnummer
     *
     * @return string|null
     */
    public function getHausnummer()
    {
        return $this->container['hausnummer'];
    }

    /**
     * Sets hausnummer
     *
     * @param string|null $hausnummer Hausnummer der Adresse.
     *
     * @return self
     */
    public function setHausnummer($hausnummer)
    {
        if (is_null($hausnummer)) {
            throw new \InvalidArgumentException('non-nullable hausnummer cannot be null');
        }
        $this->container['hausnummer'] = $hausnummer;

        return $this;
    }

    /**
     * Gets laengengrad
     *
     * @return float|null
     */
    public function getLaengengrad()
    {
        return $this->container['laengengrad'];
    }

    /**
     * Sets laengengrad
     *
     * @param float|null $laengengrad Längengrad der geographischen Koordinaten.
     *
     * @return self
     */
    public function setLaengengrad($laengengrad)
    {
        if (is_null($laengengrad)) {
            throw new \InvalidArgumentException('non-nullable laengengrad cannot be null');
        }
        $this->container['laengengrad'] = $laengengrad;

        return $this;
    }

    /**
     * Gets land
     *
     * @return string|null
     */
    public function getLand()
    {
        return $this->container['land'];
    }

    /**
     * Sets land
     *
     * @param string|null $land Land der Adresse.
     *
     * @return self
     */
    public function setLand($land)
    {
        if (is_null($land)) {
            throw new \InvalidArgumentException('non-nullable land cannot be null');
        }
        $this->container['land'] = $land;

        return $this;
    }

    /**
     * Gets ort
     *
     * @return string|null
     */
    public function getOrt()
    {
        return $this->container['ort'];
    }

    /**
     * Sets ort
     *
     * @param string|null $ort Ort der Adresse.
     *
     * @return self
     */
    public function setOrt($ort)
    {
        if (is_null($ort)) {
            throw new \InvalidArgumentException('non-nullable ort cannot be null');
        }
        $this->container['ort'] = $ort;

        return $this;
    }

    /**
     * Gets ortsteil
     *
     * @return string|null
     */
    public function getOrtsteil()
    {
        return $this->container['ortsteil'];
    }

    /**
     * Sets ortsteil
     *
     * @param string|null $ortsteil Ortsteil.
     *
     * @return self
     */
    public function setOrtsteil($ortsteil)
    {
        if (is_null($ortsteil)) {
            throw new \InvalidArgumentException('non-nullable ortsteil cannot be null');
        }
        $this->container['ortsteil'] = $ortsteil;

        return $this;
    }

    /**
     * Gets plz
     *
     * @return string|null
     */
    public function getPlz()
    {
        return $this->container['plz'];
    }

    /**
     * Sets plz
     *
     * @param string|null $plz PLZ der Adresse.
     *
     * @return self
     */
    public function setPlz($plz)
    {
        if (is_null($plz)) {
            throw new \InvalidArgumentException('non-nullable plz cannot be null');
        }
        $this->container['plz'] = $plz;

        return $this;
    }

    /**
     * Gets postfach
     *
     * @return string|null
     */
    public function getPostfach()
    {
        return $this->container['postfach'];
    }

    /**
     * Sets postfach
     *
     * @param string|null $postfach Postfach.
     *
     * @return self
     */
    public function setPostfach($postfach)
    {
        if (is_null($postfach)) {
            throw new \InvalidArgumentException('non-nullable postfach cannot be null');
        }
        $this->container['postfach'] = $postfach;

        return $this;
    }

    /**
     * Gets postfach_land
     *
     * @return string|null
     */
    public function getPostfachLand()
    {
        return $this->container['postfach_land'];
    }

    /**
     * Sets postfach_land
     *
     * @param string|null $postfach_land Name des Landes im Falle eines Postfachs.
     *
     * @return self
     */
    public function setPostfachLand($postfach_land)
    {
        if (is_null($postfach_land)) {
            throw new \InvalidArgumentException('non-nullable postfach_land cannot be null');
        }
        $this->container['postfach_land'] = $postfach_land;

        return $this;
    }

    /**
     * Gets postfach_ort
     *
     * @return string|null
     */
    public function getPostfachOrt()
    {
        return $this->container['postfach_ort'];
    }

    /**
     * Sets postfach_ort
     *
     * @param string|null $postfach_ort Ort im Falle eines Postfachs.
     *
     * @return self
     */
    public function setPostfachOrt($postfach_ort)
    {
        if (is_null($postfach_ort)) {
            throw new \InvalidArgumentException('non-nullable postfach_ort cannot be null');
        }
        $this->container['postfach_ort'] = $postfach_ort;

        return $this;
    }

    /**
     * Gets postfach_plz
     *
     * @return string|null
     */
    public function getPostfachPlz()
    {
        return $this->container['postfach_plz'];
    }

    /**
     * Sets postfach_plz
     *
     * @param string|null $postfach_plz PLZ im Falle eines Postfachs.
     *
     * @return self
     */
    public function setPostfachPlz($postfach_plz)
    {
        if (is_null($postfach_plz)) {
            throw new \InvalidArgumentException('non-nullable postfach_plz cannot be null');
        }
        $this->container['postfach_plz'] = $postfach_plz;

        return $this;
    }

    /**
     * Gets postfach_region
     *
     * @return string|null
     */
    public function getPostfachRegion()
    {
        return $this->container['postfach_region'];
    }

    /**
     * Sets postfach_region
     *
     * @param string|null $postfach_region Region im Falle eines Postfachs.
     *
     * @return self
     */
    public function setPostfachRegion($postfach_region)
    {
        if (is_null($postfach_region)) {
            throw new \InvalidArgumentException('non-nullable postfach_region cannot be null');
        }
        $this->container['postfach_region'] = $postfach_region;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region Region.
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets strasse
     *
     * @return string|null
     */
    public function getStrasse()
    {
        return $this->container['strasse'];
    }

    /**
     * Sets strasse
     *
     * @param string|null $strasse Name der Straße der Adresse.
     *
     * @return self
     */
    public function setStrasse($strasse)
    {
        if (is_null($strasse)) {
            throw new \InvalidArgumentException('non-nullable strasse cannot be null');
        }
        $this->container['strasse'] = $strasse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


