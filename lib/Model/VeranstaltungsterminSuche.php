<?php
/**
 * VeranstaltungsterminSuche
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers für die Version 2. Die Dokumentation zu speziellen Versionen kann über die Angabe des zusätzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 für die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * The version of the OpenAPI document: 2
 * Contact: info@veda.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VeranstaltungsterminSuche Class Doc Comment
 *
 * @category Class
 * @description Die Suchparameter für die Veranstaltungsterminsuche.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VeranstaltungsterminSuche implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VeranstaltungsterminSuche';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'modifiziert_ab' => '\DateTime',
        'schlagwort_id' => 'string',
        'sprache' => 'string',
        'stornierte_termine_abrufen' => 'bool',
        'suchbegriff' => 'string',
        'teilnehmer_plz' => 'string',
        'teilnehmergruppekuerzel' => 'string',
        'termin_fruehestens_von' => '\DateTime',
        'termin_spaetestens_bis' => '\DateTime',
        'veranstaltungsart' => 'string',
        'veranstaltungskategorie_id' => 'string',
        'veranstaltungsort' => 'string',
        'veranstaltungstermin_nr' => 'string',
        'veranstaltungstyp_id' => 'string',
        'veranstaltungstyp_nr' => 'string',
        'veranstaltungsunterkategorie_id' => 'string',
        'zielgruppe_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'modifiziert_ab' => 'date-time',
        'schlagwort_id' => null,
        'sprache' => null,
        'stornierte_termine_abrufen' => null,
        'suchbegriff' => null,
        'teilnehmer_plz' => null,
        'teilnehmergruppekuerzel' => null,
        'termin_fruehestens_von' => 'date-time',
        'termin_spaetestens_bis' => 'date-time',
        'veranstaltungsart' => null,
        'veranstaltungskategorie_id' => null,
        'veranstaltungsort' => null,
        'veranstaltungstermin_nr' => null,
        'veranstaltungstyp_id' => null,
        'veranstaltungstyp_nr' => null,
        'veranstaltungsunterkategorie_id' => null,
        'zielgruppe_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'modifiziert_ab' => false,
		'schlagwort_id' => false,
		'sprache' => false,
		'stornierte_termine_abrufen' => false,
		'suchbegriff' => false,
		'teilnehmer_plz' => false,
		'teilnehmergruppekuerzel' => false,
		'termin_fruehestens_von' => false,
		'termin_spaetestens_bis' => false,
		'veranstaltungsart' => false,
		'veranstaltungskategorie_id' => false,
		'veranstaltungsort' => false,
		'veranstaltungstermin_nr' => false,
		'veranstaltungstyp_id' => false,
		'veranstaltungstyp_nr' => false,
		'veranstaltungsunterkategorie_id' => false,
		'zielgruppe_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'modifiziert_ab' => 'modifiziertAb',
        'schlagwort_id' => 'schlagwortID',
        'sprache' => 'sprache',
        'stornierte_termine_abrufen' => 'stornierteTermineAbrufen',
        'suchbegriff' => 'suchbegriff',
        'teilnehmer_plz' => 'teilnehmerPlz',
        'teilnehmergruppekuerzel' => 'teilnehmergruppekuerzel',
        'termin_fruehestens_von' => 'terminFruehestensVon',
        'termin_spaetestens_bis' => 'terminSpaetestensBis',
        'veranstaltungsart' => 'veranstaltungsart',
        'veranstaltungskategorie_id' => 'veranstaltungskategorieID',
        'veranstaltungsort' => 'veranstaltungsort',
        'veranstaltungstermin_nr' => 'veranstaltungsterminNr',
        'veranstaltungstyp_id' => 'veranstaltungstypID',
        'veranstaltungstyp_nr' => 'veranstaltungstypNr',
        'veranstaltungsunterkategorie_id' => 'veranstaltungsunterkategorieID',
        'zielgruppe_id' => 'zielgruppeID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'modifiziert_ab' => 'setModifiziertAb',
        'schlagwort_id' => 'setSchlagwortId',
        'sprache' => 'setSprache',
        'stornierte_termine_abrufen' => 'setStornierteTermineAbrufen',
        'suchbegriff' => 'setSuchbegriff',
        'teilnehmer_plz' => 'setTeilnehmerPlz',
        'teilnehmergruppekuerzel' => 'setTeilnehmergruppekuerzel',
        'termin_fruehestens_von' => 'setTerminFruehestensVon',
        'termin_spaetestens_bis' => 'setTerminSpaetestensBis',
        'veranstaltungsart' => 'setVeranstaltungsart',
        'veranstaltungskategorie_id' => 'setVeranstaltungskategorieId',
        'veranstaltungsort' => 'setVeranstaltungsort',
        'veranstaltungstermin_nr' => 'setVeranstaltungsterminNr',
        'veranstaltungstyp_id' => 'setVeranstaltungstypId',
        'veranstaltungstyp_nr' => 'setVeranstaltungstypNr',
        'veranstaltungsunterkategorie_id' => 'setVeranstaltungsunterkategorieId',
        'zielgruppe_id' => 'setZielgruppeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'modifiziert_ab' => 'getModifiziertAb',
        'schlagwort_id' => 'getSchlagwortId',
        'sprache' => 'getSprache',
        'stornierte_termine_abrufen' => 'getStornierteTermineAbrufen',
        'suchbegriff' => 'getSuchbegriff',
        'teilnehmer_plz' => 'getTeilnehmerPlz',
        'teilnehmergruppekuerzel' => 'getTeilnehmergruppekuerzel',
        'termin_fruehestens_von' => 'getTerminFruehestensVon',
        'termin_spaetestens_bis' => 'getTerminSpaetestensBis',
        'veranstaltungsart' => 'getVeranstaltungsart',
        'veranstaltungskategorie_id' => 'getVeranstaltungskategorieId',
        'veranstaltungsort' => 'getVeranstaltungsort',
        'veranstaltungstermin_nr' => 'getVeranstaltungsterminNr',
        'veranstaltungstyp_id' => 'getVeranstaltungstypId',
        'veranstaltungstyp_nr' => 'getVeranstaltungstypNr',
        'veranstaltungsunterkategorie_id' => 'getVeranstaltungsunterkategorieId',
        'zielgruppe_id' => 'getZielgruppeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VERANSTALTUNGSART_PRAESENZ = 'PRAESENZ';
    public const VERANSTALTUNGSART_VIRTUELL = 'VIRTUELL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVeranstaltungsartAllowableValues()
    {
        return [
            self::VERANSTALTUNGSART_PRAESENZ,
            self::VERANSTALTUNGSART_VIRTUELL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('modifiziert_ab', $data ?? [], null);
        $this->setIfExists('schlagwort_id', $data ?? [], null);
        $this->setIfExists('sprache', $data ?? [], null);
        $this->setIfExists('stornierte_termine_abrufen', $data ?? [], null);
        $this->setIfExists('suchbegriff', $data ?? [], null);
        $this->setIfExists('teilnehmer_plz', $data ?? [], null);
        $this->setIfExists('teilnehmergruppekuerzel', $data ?? [], null);
        $this->setIfExists('termin_fruehestens_von', $data ?? [], null);
        $this->setIfExists('termin_spaetestens_bis', $data ?? [], null);
        $this->setIfExists('veranstaltungsart', $data ?? [], null);
        $this->setIfExists('veranstaltungskategorie_id', $data ?? [], null);
        $this->setIfExists('veranstaltungsort', $data ?? [], null);
        $this->setIfExists('veranstaltungstermin_nr', $data ?? [], null);
        $this->setIfExists('veranstaltungstyp_id', $data ?? [], null);
        $this->setIfExists('veranstaltungstyp_nr', $data ?? [], null);
        $this->setIfExists('veranstaltungsunterkategorie_id', $data ?? [], null);
        $this->setIfExists('zielgruppe_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['teilnehmergruppekuerzel'] === null) {
            $invalidProperties[] = "'teilnehmergruppekuerzel' can't be null";
        }
        $allowedValues = $this->getVeranstaltungsartAllowableValues();
        if (!is_null($this->container['veranstaltungsart']) && !in_array($this->container['veranstaltungsart'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'veranstaltungsart', must be one of '%s'",
                $this->container['veranstaltungsart'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets modifiziert_ab
     *
     * @return \DateTime|null
     */
    public function getModifiziertAb()
    {
        return $this->container['modifiziert_ab'];
    }

    /**
     * Sets modifiziert_ab
     *
     * @param \DateTime|null $modifiziert_ab Änderungs- bzw. Einfügezeitpunkt, ab dem die Veranstaltungstermine geliefert werden sollen. Format: yyyy-MM-ddTHH:mm:ss.SSS
     *
     * @return self
     */
    public function setModifiziertAb($modifiziert_ab)
    {
        if (is_null($modifiziert_ab)) {
            throw new \InvalidArgumentException('non-nullable modifiziert_ab cannot be null');
        }
        $this->container['modifiziert_ab'] = $modifiziert_ab;

        return $this;
    }

    /**
     * Gets schlagwort_id
     *
     * @return string|null
     */
    public function getSchlagwortId()
    {
        return $this->container['schlagwort_id'];
    }

    /**
     * Sets schlagwort_id
     *
     * @param string|null $schlagwort_id Optionale eindeutige ID des gesuchten Schlagwortes.
     *
     * @return self
     */
    public function setSchlagwortId($schlagwort_id)
    {
        if (is_null($schlagwort_id)) {
            throw new \InvalidArgumentException('non-nullable schlagwort_id cannot be null');
        }
        $this->container['schlagwort_id'] = $schlagwort_id;

        return $this;
    }

    /**
     * Gets sprache
     *
     * @return string|null
     */
    public function getSprache()
    {
        return $this->container['sprache'];
    }

    /**
     * Sets sprache
     *
     * @param string|null $sprache Optional die Sprache unter Angabe des zweistelligen Sprachcodes nach ISO-639-1 in der der Termin gehalten wird.
     *
     * @return self
     */
    public function setSprache($sprache)
    {
        if (is_null($sprache)) {
            throw new \InvalidArgumentException('non-nullable sprache cannot be null');
        }
        $this->container['sprache'] = $sprache;

        return $this;
    }

    /**
     * Gets stornierte_termine_abrufen
     *
     * @return bool|null
     */
    public function getStornierteTermineAbrufen()
    {
        return $this->container['stornierte_termine_abrufen'];
    }

    /**
     * Sets stornierte_termine_abrufen
     *
     * @param bool|null $stornierte_termine_abrufen Optionaler Parameter, um zu steuern, ob stornierte oder nicht stornierte Veranstaltungstermine abgerufen werden sollen. Der Default ist false.
     *
     * @return self
     */
    public function setStornierteTermineAbrufen($stornierte_termine_abrufen)
    {
        if (is_null($stornierte_termine_abrufen)) {
            throw new \InvalidArgumentException('non-nullable stornierte_termine_abrufen cannot be null');
        }
        $this->container['stornierte_termine_abrufen'] = $stornierte_termine_abrufen;

        return $this;
    }

    /**
     * Gets suchbegriff
     *
     * @return string|null
     */
    public function getSuchbegriff()
    {
        return $this->container['suchbegriff'];
    }

    /**
     * Sets suchbegriff
     *
     * @param string|null $suchbegriff Die zu suchenden Suchbegriffe
     *
     * @return self
     */
    public function setSuchbegriff($suchbegriff)
    {
        if (is_null($suchbegriff)) {
            throw new \InvalidArgumentException('non-nullable suchbegriff cannot be null');
        }
        $this->container['suchbegriff'] = $suchbegriff;

        return $this;
    }

    /**
     * Gets teilnehmer_plz
     *
     * @return string|null
     */
    public function getTeilnehmerPlz()
    {
        return $this->container['teilnehmer_plz'];
    }

    /**
     * Sets teilnehmer_plz
     *
     * @param string|null $teilnehmer_plz Optional die PLZ des Anmelders/Teilnehmers.
     *
     * @return self
     */
    public function setTeilnehmerPlz($teilnehmer_plz)
    {
        if (is_null($teilnehmer_plz)) {
            throw new \InvalidArgumentException('non-nullable teilnehmer_plz cannot be null');
        }
        $this->container['teilnehmer_plz'] = $teilnehmer_plz;

        return $this;
    }

    /**
     * Gets teilnehmergruppekuerzel
     *
     * @return string
     */
    public function getTeilnehmergruppekuerzel()
    {
        return $this->container['teilnehmergruppekuerzel'];
    }

    /**
     * Sets teilnehmergruppekuerzel
     *
     * @param string $teilnehmergruppekuerzel Dieser Parameter steuert, für welche Teilnehmergruppe die Veranstaltungstermine abgerufen werden sollen. Es werden alle in der Zukunft liegenden und publizierten Veranstaltungen für diese Teilnehmergruppe zurückgegeben.
     *
     * @return self
     */
    public function setTeilnehmergruppekuerzel($teilnehmergruppekuerzel)
    {
        if (is_null($teilnehmergruppekuerzel)) {
            throw new \InvalidArgumentException('non-nullable teilnehmergruppekuerzel cannot be null');
        }
        $this->container['teilnehmergruppekuerzel'] = $teilnehmergruppekuerzel;

        return $this;
    }

    /**
     * Gets termin_fruehestens_von
     *
     * @return \DateTime|null
     */
    public function getTerminFruehestensVon()
    {
        return $this->container['termin_fruehestens_von'];
    }

    /**
     * Sets termin_fruehestens_von
     *
     * @param \DateTime|null $termin_fruehestens_von Optional ab wann die Termine frühestens beginnen. Format: yyyy-MM-ddTHH:mm:ss.SSS
     *
     * @return self
     */
    public function setTerminFruehestensVon($termin_fruehestens_von)
    {
        if (is_null($termin_fruehestens_von)) {
            throw new \InvalidArgumentException('non-nullable termin_fruehestens_von cannot be null');
        }
        $this->container['termin_fruehestens_von'] = $termin_fruehestens_von;

        return $this;
    }

    /**
     * Gets termin_spaetestens_bis
     *
     * @return \DateTime|null
     */
    public function getTerminSpaetestensBis()
    {
        return $this->container['termin_spaetestens_bis'];
    }

    /**
     * Sets termin_spaetestens_bis
     *
     * @param \DateTime|null $termin_spaetestens_bis Optional bis wann die Termine spätestens laufen. Format: yyyy-MM-ddTHH:mm:ss.SSS
     *
     * @return self
     */
    public function setTerminSpaetestensBis($termin_spaetestens_bis)
    {
        if (is_null($termin_spaetestens_bis)) {
            throw new \InvalidArgumentException('non-nullable termin_spaetestens_bis cannot be null');
        }
        $this->container['termin_spaetestens_bis'] = $termin_spaetestens_bis;

        return $this;
    }

    /**
     * Gets veranstaltungsart
     *
     * @return string|null
     */
    public function getVeranstaltungsart()
    {
        return $this->container['veranstaltungsart'];
    }

    /**
     * Sets veranstaltungsart
     *
     * @param string|null $veranstaltungsart Optional die gesuchte Veranstaltungsart als lesbare Konstante. Nur die aufgelisteten Konstanten sind erlaubt.
     *
     * @return self
     */
    public function setVeranstaltungsart($veranstaltungsart)
    {
        if (is_null($veranstaltungsart)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungsart cannot be null');
        }
        $allowedValues = $this->getVeranstaltungsartAllowableValues();
        if (!in_array($veranstaltungsart, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'veranstaltungsart', must be one of '%s'",
                    $veranstaltungsart,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['veranstaltungsart'] = $veranstaltungsart;

        return $this;
    }

    /**
     * Gets veranstaltungskategorie_id
     *
     * @return string|null
     */
    public function getVeranstaltungskategorieId()
    {
        return $this->container['veranstaltungskategorie_id'];
    }

    /**
     * Sets veranstaltungskategorie_id
     *
     * @param string|null $veranstaltungskategorie_id Optionaler Parameter, um Veranstaltungstermine nach einer Veranstaltungskategorie zu filtern.
     *
     * @return self
     */
    public function setVeranstaltungskategorieId($veranstaltungskategorie_id)
    {
        if (is_null($veranstaltungskategorie_id)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungskategorie_id cannot be null');
        }
        $this->container['veranstaltungskategorie_id'] = $veranstaltungskategorie_id;

        return $this;
    }

    /**
     * Gets veranstaltungsort
     *
     * @return string|null
     */
    public function getVeranstaltungsort()
    {
        return $this->container['veranstaltungsort'];
    }

    /**
     * Sets veranstaltungsort
     *
     * @param string|null $veranstaltungsort Optional der Veranstaltungsort an dem der Termin stattfindet.
     *
     * @return self
     */
    public function setVeranstaltungsort($veranstaltungsort)
    {
        if (is_null($veranstaltungsort)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungsort cannot be null');
        }
        $this->container['veranstaltungsort'] = $veranstaltungsort;

        return $this;
    }

    /**
     * Gets veranstaltungstermin_nr
     *
     * @return string|null
     */
    public function getVeranstaltungsterminNr()
    {
        return $this->container['veranstaltungstermin_nr'];
    }

    /**
     * Sets veranstaltungstermin_nr
     *
     * @param string|null $veranstaltungstermin_nr Optional die Terminnummer des Termins.
     *
     * @return self
     */
    public function setVeranstaltungsterminNr($veranstaltungstermin_nr)
    {
        if (is_null($veranstaltungstermin_nr)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungstermin_nr cannot be null');
        }
        $this->container['veranstaltungstermin_nr'] = $veranstaltungstermin_nr;

        return $this;
    }

    /**
     * Gets veranstaltungstyp_id
     *
     * @return string|null
     */
    public function getVeranstaltungstypId()
    {
        return $this->container['veranstaltungstyp_id'];
    }

    /**
     * Sets veranstaltungstyp_id
     *
     * @param string|null $veranstaltungstyp_id Optionaler Parameter, um nur Veranstaltungstermine eines bestimmten Veranstaltungstyps abzurufen.
     *
     * @return self
     */
    public function setVeranstaltungstypId($veranstaltungstyp_id)
    {
        if (is_null($veranstaltungstyp_id)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungstyp_id cannot be null');
        }
        $this->container['veranstaltungstyp_id'] = $veranstaltungstyp_id;

        return $this;
    }

    /**
     * Gets veranstaltungstyp_nr
     *
     * @return string|null
     */
    public function getVeranstaltungstypNr()
    {
        return $this->container['veranstaltungstyp_nr'];
    }

    /**
     * Sets veranstaltungstyp_nr
     *
     * @param string|null $veranstaltungstyp_nr Optional die Veranstaltungsnummer des Termins.
     *
     * @return self
     */
    public function setVeranstaltungstypNr($veranstaltungstyp_nr)
    {
        if (is_null($veranstaltungstyp_nr)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungstyp_nr cannot be null');
        }
        $this->container['veranstaltungstyp_nr'] = $veranstaltungstyp_nr;

        return $this;
    }

    /**
     * Gets veranstaltungsunterkategorie_id
     *
     * @return string|null
     */
    public function getVeranstaltungsunterkategorieId()
    {
        return $this->container['veranstaltungsunterkategorie_id'];
    }

    /**
     * Sets veranstaltungsunterkategorie_id
     *
     * @param string|null $veranstaltungsunterkategorie_id Optionaler Parameter, um Veranstaltungstermine nach einer Veranstaltungsunterkategorie zu filtern. Hinweis: Die Unterkategorie muss zur Kategorie passen.
     *
     * @return self
     */
    public function setVeranstaltungsunterkategorieId($veranstaltungsunterkategorie_id)
    {
        if (is_null($veranstaltungsunterkategorie_id)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungsunterkategorie_id cannot be null');
        }
        $this->container['veranstaltungsunterkategorie_id'] = $veranstaltungsunterkategorie_id;

        return $this;
    }

    /**
     * Gets zielgruppe_id
     *
     * @return string|null
     */
    public function getZielgruppeId()
    {
        return $this->container['zielgruppe_id'];
    }

    /**
     * Sets zielgruppe_id
     *
     * @param string|null $zielgruppe_id Optionale eindeutige ID der gesuchten Zielgruppe.
     *
     * @return self
     */
    public function setZielgruppeId($zielgruppe_id)
    {
        if (is_null($zielgruppe_id)) {
            throw new \InvalidArgumentException('non-nullable zielgruppe_id cannot be null');
        }
        $this->container['zielgruppe_id'] = $zielgruppe_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


