<?php
/**
 * VeranstaltungstypSIGUV
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers f체r die Version 2. Die Dokumentation zu speziellen Versionen kann 체ber die Angabe des zus채tzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 f체r die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * The version of the OpenAPI document: 2
 * Contact: info@veda.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VeranstaltungstypSIGUV Class Doc Comment
 *
 * @category Class
 * @description Veranstaltungstyp mit seinen relevanten Daten.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VeranstaltungstypSIGUV implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Veranstaltungstyp_SIGUV';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'oid' => 'string',
        'alternative_veranstaltungstypen' => 'string[]',
        'anzahl_teilnehmertage' => 'float',
        'anzahl_ue' => 'float',
        'beschreibung' => 'string',
        'dauer_in_tagen' => 'float',
        'fachlicher_ansprechpartner' => '\OpenAPI\Client\Model\Fachlicheransprechpartner',
        'gueltig_ab' => '\DateTime',
        'gueltig_bis' => '\DateTime',
        'hinweise' => 'string',
        'inhalt' => 'string',
        'inhouse_durchfuehrbar' => 'bool',
        'kategorien' => '\OpenAPI\Client\Model\KategorieUndUnterkategorieApiDto[]',
        'kundenzitat' => 'string',
        'kurzbezeichnung' => 'string',
        'links' => '\OpenAPI\Client\Model\Links',
        'methodik' => 'string',
        'mitzubringen_durch_teilnehmer' => 'string',
        'plz_einschraenkung' => 'bool',
        'preise_je_teilnehmergruppe' => '\OpenAPI\Client\Model\TeilnehmergruppePreis[]',
        'publizierung_aktiv' => 'bool',
        'regulaere_uhrzeit_bis' => 'string',
        'regulaere_uhrzeit_von' => 'string',
        'sachbearbeiter' => '\OpenAPI\Client\Model\Sachbearbeiter',
        'sachbearbeiter_tn' => '\OpenAPI\Client\Model\Sachbearbeiter',
        'schlagwoerter' => '\OpenAPI\Client\Model\Schlagwort[]',
        'standardzahlungsbedingung' => '\OpenAPI\Client\Model\Zahlungsbedingung',
        'teilnehmermaximum' => 'int',
        'teilnehmerminimum' => 'int',
        'thema' => 'string',
        'thema2' => 'string',
        'uhrzeit_bis' => 'string',
        'uhrzeit_von' => 'string',
        'veranstaltungs_nr' => 'string',
        'veranstaltungsart' => 'string',
        'veranstaltungsform' => '\OpenAPI\Client\Model\Veranstaltungsform',
        'veranstaltungskategorie' => '\OpenAPI\Client\Model\Veranstaltungskategorie',
        'veranstaltungsunterkategorie' => '\OpenAPI\Client\Model\Veranstaltungsunterkategorie',
        'voraussetzung' => 'string',
        'wbd_relevant' => 'bool',
        'wbd_thema' => 'string',
        'webcode' => 'string',
        'ziel' => 'string',
        'zielgruppen' => '\OpenAPI\Client\Model\Zielgruppe[]',
        'zielgruppen_details' => 'string',
        'zusatzinformationen' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'oid' => null,
        'alternative_veranstaltungstypen' => null,
        'anzahl_teilnehmertage' => null,
        'anzahl_ue' => null,
        'beschreibung' => null,
        'dauer_in_tagen' => null,
        'fachlicher_ansprechpartner' => null,
        'gueltig_ab' => 'date',
        'gueltig_bis' => 'date',
        'hinweise' => null,
        'inhalt' => null,
        'inhouse_durchfuehrbar' => null,
        'kategorien' => null,
        'kundenzitat' => null,
        'kurzbezeichnung' => null,
        'links' => null,
        'methodik' => null,
        'mitzubringen_durch_teilnehmer' => null,
        'plz_einschraenkung' => null,
        'preise_je_teilnehmergruppe' => null,
        'publizierung_aktiv' => null,
        'regulaere_uhrzeit_bis' => null,
        'regulaere_uhrzeit_von' => null,
        'sachbearbeiter' => null,
        'sachbearbeiter_tn' => null,
        'schlagwoerter' => null,
        'standardzahlungsbedingung' => null,
        'teilnehmermaximum' => null,
        'teilnehmerminimum' => null,
        'thema' => null,
        'thema2' => null,
        'uhrzeit_bis' => null,
        'uhrzeit_von' => null,
        'veranstaltungs_nr' => null,
        'veranstaltungsart' => null,
        'veranstaltungsform' => null,
        'veranstaltungskategorie' => null,
        'veranstaltungsunterkategorie' => null,
        'voraussetzung' => null,
        'wbd_relevant' => null,
        'wbd_thema' => null,
        'webcode' => null,
        'ziel' => null,
        'zielgruppen' => null,
        'zielgruppen_details' => null,
        'zusatzinformationen' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'oid' => false,
		'alternative_veranstaltungstypen' => false,
		'anzahl_teilnehmertage' => false,
		'anzahl_ue' => false,
		'beschreibung' => false,
		'dauer_in_tagen' => false,
		'fachlicher_ansprechpartner' => false,
		'gueltig_ab' => false,
		'gueltig_bis' => false,
		'hinweise' => false,
		'inhalt' => false,
		'inhouse_durchfuehrbar' => false,
		'kategorien' => false,
		'kundenzitat' => false,
		'kurzbezeichnung' => false,
		'links' => false,
		'methodik' => false,
		'mitzubringen_durch_teilnehmer' => false,
		'plz_einschraenkung' => false,
		'preise_je_teilnehmergruppe' => false,
		'publizierung_aktiv' => false,
		'regulaere_uhrzeit_bis' => false,
		'regulaere_uhrzeit_von' => false,
		'sachbearbeiter' => false,
		'sachbearbeiter_tn' => false,
		'schlagwoerter' => false,
		'standardzahlungsbedingung' => false,
		'teilnehmermaximum' => false,
		'teilnehmerminimum' => false,
		'thema' => false,
		'thema2' => false,
		'uhrzeit_bis' => false,
		'uhrzeit_von' => false,
		'veranstaltungs_nr' => false,
		'veranstaltungsart' => false,
		'veranstaltungsform' => false,
		'veranstaltungskategorie' => false,
		'veranstaltungsunterkategorie' => false,
		'voraussetzung' => false,
		'wbd_relevant' => false,
		'wbd_thema' => false,
		'webcode' => false,
		'ziel' => false,
		'zielgruppen' => false,
		'zielgruppen_details' => false,
		'zusatzinformationen' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oid' => 'oid',
        'alternative_veranstaltungstypen' => 'alternativeVeranstaltungstypen',
        'anzahl_teilnehmertage' => 'anzahlTeilnehmertage',
        'anzahl_ue' => 'anzahlUE',
        'beschreibung' => 'beschreibung',
        'dauer_in_tagen' => 'dauerInTagen',
        'fachlicher_ansprechpartner' => 'fachlicherAnsprechpartner',
        'gueltig_ab' => 'gueltigAb',
        'gueltig_bis' => 'gueltigBis',
        'hinweise' => 'hinweise',
        'inhalt' => 'inhalt',
        'inhouse_durchfuehrbar' => 'inhouseDurchfuehrbar',
        'kategorien' => 'kategorien',
        'kundenzitat' => 'kundenzitat',
        'kurzbezeichnung' => 'kurzbezeichnung',
        'links' => 'links',
        'methodik' => 'methodik',
        'mitzubringen_durch_teilnehmer' => 'mitzubringenDurchTeilnehmer',
        'plz_einschraenkung' => 'plzEinschraenkung',
        'preise_je_teilnehmergruppe' => 'preiseJeTeilnehmergruppe',
        'publizierung_aktiv' => 'publizierungAktiv',
        'regulaere_uhrzeit_bis' => 'regulaereUhrzeitBis',
        'regulaere_uhrzeit_von' => 'regulaereUhrzeitVon',
        'sachbearbeiter' => 'sachbearbeiter',
        'sachbearbeiter_tn' => 'sachbearbeiterTn',
        'schlagwoerter' => 'schlagwoerter',
        'standardzahlungsbedingung' => 'standardzahlungsbedingung',
        'teilnehmermaximum' => 'teilnehmermaximum',
        'teilnehmerminimum' => 'teilnehmerminimum',
        'thema' => 'thema',
        'thema2' => 'thema2',
        'uhrzeit_bis' => 'uhrzeitBis',
        'uhrzeit_von' => 'uhrzeitVon',
        'veranstaltungs_nr' => 'veranstaltungsNr',
        'veranstaltungsart' => 'veranstaltungsart',
        'veranstaltungsform' => 'veranstaltungsform',
        'veranstaltungskategorie' => 'veranstaltungskategorie',
        'veranstaltungsunterkategorie' => 'veranstaltungsunterkategorie',
        'voraussetzung' => 'voraussetzung',
        'wbd_relevant' => 'wbdRelevant',
        'wbd_thema' => 'wbdThema',
        'webcode' => 'webcode',
        'ziel' => 'ziel',
        'zielgruppen' => 'zielgruppen',
        'zielgruppen_details' => 'zielgruppenDetails',
        'zusatzinformationen' => 'zusatzinformationen'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oid' => 'setOid',
        'alternative_veranstaltungstypen' => 'setAlternativeVeranstaltungstypen',
        'anzahl_teilnehmertage' => 'setAnzahlTeilnehmertage',
        'anzahl_ue' => 'setAnzahlUe',
        'beschreibung' => 'setBeschreibung',
        'dauer_in_tagen' => 'setDauerInTagen',
        'fachlicher_ansprechpartner' => 'setFachlicherAnsprechpartner',
        'gueltig_ab' => 'setGueltigAb',
        'gueltig_bis' => 'setGueltigBis',
        'hinweise' => 'setHinweise',
        'inhalt' => 'setInhalt',
        'inhouse_durchfuehrbar' => 'setInhouseDurchfuehrbar',
        'kategorien' => 'setKategorien',
        'kundenzitat' => 'setKundenzitat',
        'kurzbezeichnung' => 'setKurzbezeichnung',
        'links' => 'setLinks',
        'methodik' => 'setMethodik',
        'mitzubringen_durch_teilnehmer' => 'setMitzubringenDurchTeilnehmer',
        'plz_einschraenkung' => 'setPlzEinschraenkung',
        'preise_je_teilnehmergruppe' => 'setPreiseJeTeilnehmergruppe',
        'publizierung_aktiv' => 'setPublizierungAktiv',
        'regulaere_uhrzeit_bis' => 'setRegulaereUhrzeitBis',
        'regulaere_uhrzeit_von' => 'setRegulaereUhrzeitVon',
        'sachbearbeiter' => 'setSachbearbeiter',
        'sachbearbeiter_tn' => 'setSachbearbeiterTn',
        'schlagwoerter' => 'setSchlagwoerter',
        'standardzahlungsbedingung' => 'setStandardzahlungsbedingung',
        'teilnehmermaximum' => 'setTeilnehmermaximum',
        'teilnehmerminimum' => 'setTeilnehmerminimum',
        'thema' => 'setThema',
        'thema2' => 'setThema2',
        'uhrzeit_bis' => 'setUhrzeitBis',
        'uhrzeit_von' => 'setUhrzeitVon',
        'veranstaltungs_nr' => 'setVeranstaltungsNr',
        'veranstaltungsart' => 'setVeranstaltungsart',
        'veranstaltungsform' => 'setVeranstaltungsform',
        'veranstaltungskategorie' => 'setVeranstaltungskategorie',
        'veranstaltungsunterkategorie' => 'setVeranstaltungsunterkategorie',
        'voraussetzung' => 'setVoraussetzung',
        'wbd_relevant' => 'setWbdRelevant',
        'wbd_thema' => 'setWbdThema',
        'webcode' => 'setWebcode',
        'ziel' => 'setZiel',
        'zielgruppen' => 'setZielgruppen',
        'zielgruppen_details' => 'setZielgruppenDetails',
        'zusatzinformationen' => 'setZusatzinformationen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oid' => 'getOid',
        'alternative_veranstaltungstypen' => 'getAlternativeVeranstaltungstypen',
        'anzahl_teilnehmertage' => 'getAnzahlTeilnehmertage',
        'anzahl_ue' => 'getAnzahlUe',
        'beschreibung' => 'getBeschreibung',
        'dauer_in_tagen' => 'getDauerInTagen',
        'fachlicher_ansprechpartner' => 'getFachlicherAnsprechpartner',
        'gueltig_ab' => 'getGueltigAb',
        'gueltig_bis' => 'getGueltigBis',
        'hinweise' => 'getHinweise',
        'inhalt' => 'getInhalt',
        'inhouse_durchfuehrbar' => 'getInhouseDurchfuehrbar',
        'kategorien' => 'getKategorien',
        'kundenzitat' => 'getKundenzitat',
        'kurzbezeichnung' => 'getKurzbezeichnung',
        'links' => 'getLinks',
        'methodik' => 'getMethodik',
        'mitzubringen_durch_teilnehmer' => 'getMitzubringenDurchTeilnehmer',
        'plz_einschraenkung' => 'getPlzEinschraenkung',
        'preise_je_teilnehmergruppe' => 'getPreiseJeTeilnehmergruppe',
        'publizierung_aktiv' => 'getPublizierungAktiv',
        'regulaere_uhrzeit_bis' => 'getRegulaereUhrzeitBis',
        'regulaere_uhrzeit_von' => 'getRegulaereUhrzeitVon',
        'sachbearbeiter' => 'getSachbearbeiter',
        'sachbearbeiter_tn' => 'getSachbearbeiterTn',
        'schlagwoerter' => 'getSchlagwoerter',
        'standardzahlungsbedingung' => 'getStandardzahlungsbedingung',
        'teilnehmermaximum' => 'getTeilnehmermaximum',
        'teilnehmerminimum' => 'getTeilnehmerminimum',
        'thema' => 'getThema',
        'thema2' => 'getThema2',
        'uhrzeit_bis' => 'getUhrzeitBis',
        'uhrzeit_von' => 'getUhrzeitVon',
        'veranstaltungs_nr' => 'getVeranstaltungsNr',
        'veranstaltungsart' => 'getVeranstaltungsart',
        'veranstaltungsform' => 'getVeranstaltungsform',
        'veranstaltungskategorie' => 'getVeranstaltungskategorie',
        'veranstaltungsunterkategorie' => 'getVeranstaltungsunterkategorie',
        'voraussetzung' => 'getVoraussetzung',
        'wbd_relevant' => 'getWbdRelevant',
        'wbd_thema' => 'getWbdThema',
        'webcode' => 'getWebcode',
        'ziel' => 'getZiel',
        'zielgruppen' => 'getZielgruppen',
        'zielgruppen_details' => 'getZielgruppenDetails',
        'zusatzinformationen' => 'getZusatzinformationen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('oid', $data ?? [], null);
        $this->setIfExists('alternative_veranstaltungstypen', $data ?? [], null);
        $this->setIfExists('anzahl_teilnehmertage', $data ?? [], null);
        $this->setIfExists('anzahl_ue', $data ?? [], null);
        $this->setIfExists('beschreibung', $data ?? [], null);
        $this->setIfExists('dauer_in_tagen', $data ?? [], null);
        $this->setIfExists('fachlicher_ansprechpartner', $data ?? [], null);
        $this->setIfExists('gueltig_ab', $data ?? [], null);
        $this->setIfExists('gueltig_bis', $data ?? [], null);
        $this->setIfExists('hinweise', $data ?? [], null);
        $this->setIfExists('inhalt', $data ?? [], null);
        $this->setIfExists('inhouse_durchfuehrbar', $data ?? [], null);
        $this->setIfExists('kategorien', $data ?? [], null);
        $this->setIfExists('kundenzitat', $data ?? [], null);
        $this->setIfExists('kurzbezeichnung', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('methodik', $data ?? [], null);
        $this->setIfExists('mitzubringen_durch_teilnehmer', $data ?? [], null);
        $this->setIfExists('plz_einschraenkung', $data ?? [], null);
        $this->setIfExists('preise_je_teilnehmergruppe', $data ?? [], null);
        $this->setIfExists('publizierung_aktiv', $data ?? [], null);
        $this->setIfExists('regulaere_uhrzeit_bis', $data ?? [], null);
        $this->setIfExists('regulaere_uhrzeit_von', $data ?? [], null);
        $this->setIfExists('sachbearbeiter', $data ?? [], null);
        $this->setIfExists('sachbearbeiter_tn', $data ?? [], null);
        $this->setIfExists('schlagwoerter', $data ?? [], null);
        $this->setIfExists('standardzahlungsbedingung', $data ?? [], null);
        $this->setIfExists('teilnehmermaximum', $data ?? [], null);
        $this->setIfExists('teilnehmerminimum', $data ?? [], null);
        $this->setIfExists('thema', $data ?? [], null);
        $this->setIfExists('thema2', $data ?? [], null);
        $this->setIfExists('uhrzeit_bis', $data ?? [], null);
        $this->setIfExists('uhrzeit_von', $data ?? [], null);
        $this->setIfExists('veranstaltungs_nr', $data ?? [], null);
        $this->setIfExists('veranstaltungsart', $data ?? [], null);
        $this->setIfExists('veranstaltungsform', $data ?? [], null);
        $this->setIfExists('veranstaltungskategorie', $data ?? [], null);
        $this->setIfExists('veranstaltungsunterkategorie', $data ?? [], null);
        $this->setIfExists('voraussetzung', $data ?? [], null);
        $this->setIfExists('wbd_relevant', $data ?? [], null);
        $this->setIfExists('wbd_thema', $data ?? [], null);
        $this->setIfExists('webcode', $data ?? [], null);
        $this->setIfExists('ziel', $data ?? [], null);
        $this->setIfExists('zielgruppen', $data ?? [], null);
        $this->setIfExists('zielgruppen_details', $data ?? [], null);
        $this->setIfExists('zusatzinformationen', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['oid'] === null) {
            $invalidProperties[] = "'oid' can't be null";
        }
        if ($this->container['thema'] === null) {
            $invalidProperties[] = "'thema' can't be null";
        }
        if ($this->container['veranstaltungs_nr'] === null) {
            $invalidProperties[] = "'veranstaltungs_nr' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets oid
     *
     * @return string
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param string $oid UUID des Datensatzes
     *
     * @return self
     */
    public function setOid($oid)
    {
        if (is_null($oid)) {
            throw new \InvalidArgumentException('non-nullable oid cannot be null');
        }
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets alternative_veranstaltungstypen
     *
     * @return string[]|null
     */
    public function getAlternativeVeranstaltungstypen()
    {
        return $this->container['alternative_veranstaltungstypen'];
    }

    /**
     * Sets alternative_veranstaltungstypen
     *
     * @param string[]|null $alternative_veranstaltungstypen Die Liste der der alternativen Veranstaltungstypen
     *
     * @return self
     */
    public function setAlternativeVeranstaltungstypen($alternative_veranstaltungstypen)
    {
        if (is_null($alternative_veranstaltungstypen)) {
            throw new \InvalidArgumentException('non-nullable alternative_veranstaltungstypen cannot be null');
        }
        $this->container['alternative_veranstaltungstypen'] = $alternative_veranstaltungstypen;

        return $this;
    }

    /**
     * Gets anzahl_teilnehmertage
     *
     * @return float|null
     */
    public function getAnzahlTeilnehmertage()
    {
        return $this->container['anzahl_teilnehmertage'];
    }

    /**
     * Sets anzahl_teilnehmertage
     *
     * @param float|null $anzahl_teilnehmertage Die Anzahl der Teilnehmertage des Veranstaltungstyps
     *
     * @return self
     */
    public function setAnzahlTeilnehmertage($anzahl_teilnehmertage)
    {
        if (is_null($anzahl_teilnehmertage)) {
            throw new \InvalidArgumentException('non-nullable anzahl_teilnehmertage cannot be null');
        }
        $this->container['anzahl_teilnehmertage'] = $anzahl_teilnehmertage;

        return $this;
    }

    /**
     * Gets anzahl_ue
     *
     * @return float|null
     */
    public function getAnzahlUe()
    {
        return $this->container['anzahl_ue'];
    }

    /**
     * Sets anzahl_ue
     *
     * @param float|null $anzahl_ue Die Anzahl der Unterrichtseinheiten des Veranstaltungstyps
     *
     * @return self
     */
    public function setAnzahlUe($anzahl_ue)
    {
        if (is_null($anzahl_ue)) {
            throw new \InvalidArgumentException('non-nullable anzahl_ue cannot be null');
        }
        $this->container['anzahl_ue'] = $anzahl_ue;

        return $this;
    }

    /**
     * Gets beschreibung
     *
     * @return string|null
     */
    public function getBeschreibung()
    {
        return $this->container['beschreibung'];
    }

    /**
     * Sets beschreibung
     *
     * @param string|null $beschreibung Die Beschreibung des Veranstaltungstyps (HTML m철glich)
     *
     * @return self
     */
    public function setBeschreibung($beschreibung)
    {
        if (is_null($beschreibung)) {
            throw new \InvalidArgumentException('non-nullable beschreibung cannot be null');
        }
        $this->container['beschreibung'] = $beschreibung;

        return $this;
    }

    /**
     * Gets dauer_in_tagen
     *
     * @return float|null
     */
    public function getDauerInTagen()
    {
        return $this->container['dauer_in_tagen'];
    }

    /**
     * Sets dauer_in_tagen
     *
     * @param float|null $dauer_in_tagen Die Dauer in Tagen des Veranstaltungstyps
     *
     * @return self
     */
    public function setDauerInTagen($dauer_in_tagen)
    {
        if (is_null($dauer_in_tagen)) {
            throw new \InvalidArgumentException('non-nullable dauer_in_tagen cannot be null');
        }
        $this->container['dauer_in_tagen'] = $dauer_in_tagen;

        return $this;
    }

    /**
     * Gets fachlicher_ansprechpartner
     *
     * @return \OpenAPI\Client\Model\Fachlicheransprechpartner|null
     */
    public function getFachlicherAnsprechpartner()
    {
        return $this->container['fachlicher_ansprechpartner'];
    }

    /**
     * Sets fachlicher_ansprechpartner
     *
     * @param \OpenAPI\Client\Model\Fachlicheransprechpartner|null $fachlicher_ansprechpartner fachlicher_ansprechpartner
     *
     * @return self
     */
    public function setFachlicherAnsprechpartner($fachlicher_ansprechpartner)
    {
        if (is_null($fachlicher_ansprechpartner)) {
            throw new \InvalidArgumentException('non-nullable fachlicher_ansprechpartner cannot be null');
        }
        $this->container['fachlicher_ansprechpartner'] = $fachlicher_ansprechpartner;

        return $this;
    }

    /**
     * Gets gueltig_ab
     *
     * @return \DateTime|null
     */
    public function getGueltigAb()
    {
        return $this->container['gueltig_ab'];
    }

    /**
     * Sets gueltig_ab
     *
     * @param \DateTime|null $gueltig_ab Der G체ltigkeitsbeginn des Veranstaltungstyps
     *
     * @return self
     */
    public function setGueltigAb($gueltig_ab)
    {
        if (is_null($gueltig_ab)) {
            throw new \InvalidArgumentException('non-nullable gueltig_ab cannot be null');
        }
        $this->container['gueltig_ab'] = $gueltig_ab;

        return $this;
    }

    /**
     * Gets gueltig_bis
     *
     * @return \DateTime|null
     */
    public function getGueltigBis()
    {
        return $this->container['gueltig_bis'];
    }

    /**
     * Sets gueltig_bis
     *
     * @param \DateTime|null $gueltig_bis Das G체ltigkeitsende des Veranstaltungstyps
     *
     * @return self
     */
    public function setGueltigBis($gueltig_bis)
    {
        if (is_null($gueltig_bis)) {
            throw new \InvalidArgumentException('non-nullable gueltig_bis cannot be null');
        }
        $this->container['gueltig_bis'] = $gueltig_bis;

        return $this;
    }

    /**
     * Gets hinweise
     *
     * @return string|null
     */
    public function getHinweise()
    {
        return $this->container['hinweise'];
    }

    /**
     * Sets hinweise
     *
     * @param string|null $hinweise Hinweise zum Veranstaltungstyp
     *
     * @return self
     */
    public function setHinweise($hinweise)
    {
        if (is_null($hinweise)) {
            throw new \InvalidArgumentException('non-nullable hinweise cannot be null');
        }
        $this->container['hinweise'] = $hinweise;

        return $this;
    }

    /**
     * Gets inhalt
     *
     * @return string|null
     */
    public function getInhalt()
    {
        return $this->container['inhalt'];
    }

    /**
     * Sets inhalt
     *
     * @param string|null $inhalt Der Inhalt des Veranstaltungstyps (HTML m철glich)
     *
     * @return self
     */
    public function setInhalt($inhalt)
    {
        if (is_null($inhalt)) {
            throw new \InvalidArgumentException('non-nullable inhalt cannot be null');
        }
        $this->container['inhalt'] = $inhalt;

        return $this;
    }

    /**
     * Gets inhouse_durchfuehrbar
     *
     * @return bool|null
     */
    public function getInhouseDurchfuehrbar()
    {
        return $this->container['inhouse_durchfuehrbar'];
    }

    /**
     * Sets inhouse_durchfuehrbar
     *
     * @param bool|null $inhouse_durchfuehrbar Dieses Kennzeichen gibt an, ob der Veranstaltungstyp bei Bedarf auch als Inhouse-Seminar durchgef체hrt werden kann.
     *
     * @return self
     */
    public function setInhouseDurchfuehrbar($inhouse_durchfuehrbar)
    {
        if (is_null($inhouse_durchfuehrbar)) {
            throw new \InvalidArgumentException('non-nullable inhouse_durchfuehrbar cannot be null');
        }
        $this->container['inhouse_durchfuehrbar'] = $inhouse_durchfuehrbar;

        return $this;
    }

    /**
     * Gets kategorien
     *
     * @return \OpenAPI\Client\Model\KategorieUndUnterkategorieApiDto[]|null
     */
    public function getKategorien()
    {
        return $this->container['kategorien'];
    }

    /**
     * Sets kategorien
     *
     * @param \OpenAPI\Client\Model\KategorieUndUnterkategorieApiDto[]|null $kategorien Die Liste der Kategorien, die dem Veranstaltungstyp zugeordnet sind.
     *
     * @return self
     */
    public function setKategorien($kategorien)
    {
        if (is_null($kategorien)) {
            throw new \InvalidArgumentException('non-nullable kategorien cannot be null');
        }
        $this->container['kategorien'] = $kategorien;

        return $this;
    }

    /**
     * Gets kundenzitat
     *
     * @return string|null
     */
    public function getKundenzitat()
    {
        return $this->container['kundenzitat'];
    }

    /**
     * Sets kundenzitat
     *
     * @param string|null $kundenzitat Kundenzitat zum Veranstaltungstyp.
     *
     * @return self
     */
    public function setKundenzitat($kundenzitat)
    {
        if (is_null($kundenzitat)) {
            throw new \InvalidArgumentException('non-nullable kundenzitat cannot be null');
        }
        $this->container['kundenzitat'] = $kundenzitat;

        return $this;
    }

    /**
     * Gets kurzbezeichnung
     *
     * @return string|null
     */
    public function getKurzbezeichnung()
    {
        return $this->container['kurzbezeichnung'];
    }

    /**
     * Sets kurzbezeichnung
     *
     * @param string|null $kurzbezeichnung Die Kurzbezeichnung des Veranstaltungstyps
     *
     * @return self
     */
    public function setKurzbezeichnung($kurzbezeichnung)
    {
        if (is_null($kurzbezeichnung)) {
            throw new \InvalidArgumentException('non-nullable kurzbezeichnung cannot be null');
        }
        $this->container['kurzbezeichnung'] = $kurzbezeichnung;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\Links|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\Links|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets methodik
     *
     * @return string|null
     */
    public function getMethodik()
    {
        return $this->container['methodik'];
    }

    /**
     * Sets methodik
     *
     * @param string|null $methodik Die Methodik des Veranstaltungstyps (HTML m철glich)
     *
     * @return self
     */
    public function setMethodik($methodik)
    {
        if (is_null($methodik)) {
            throw new \InvalidArgumentException('non-nullable methodik cannot be null');
        }
        $this->container['methodik'] = $methodik;

        return $this;
    }

    /**
     * Gets mitzubringen_durch_teilnehmer
     *
     * @return string|null
     */
    public function getMitzubringenDurchTeilnehmer()
    {
        return $this->container['mitzubringen_durch_teilnehmer'];
    }

    /**
     * Sets mitzubringen_durch_teilnehmer
     *
     * @param string|null $mitzubringen_durch_teilnehmer Mitzubringen durch Teilnehmer
     *
     * @return self
     */
    public function setMitzubringenDurchTeilnehmer($mitzubringen_durch_teilnehmer)
    {
        if (is_null($mitzubringen_durch_teilnehmer)) {
            throw new \InvalidArgumentException('non-nullable mitzubringen_durch_teilnehmer cannot be null');
        }
        $this->container['mitzubringen_durch_teilnehmer'] = $mitzubringen_durch_teilnehmer;

        return $this;
    }

    /**
     * Gets plz_einschraenkung
     *
     * @return bool|null
     */
    public function getPlzEinschraenkung()
    {
        return $this->container['plz_einschraenkung'];
    }

    /**
     * Sets plz_einschraenkung
     *
     * @param bool|null $plz_einschraenkung Gibt an, ob die PLZ-Einschr채nkung aktiv ist.
     *
     * @return self
     */
    public function setPlzEinschraenkung($plz_einschraenkung)
    {
        if (is_null($plz_einschraenkung)) {
            throw new \InvalidArgumentException('non-nullable plz_einschraenkung cannot be null');
        }
        $this->container['plz_einschraenkung'] = $plz_einschraenkung;

        return $this;
    }

    /**
     * Gets preise_je_teilnehmergruppe
     *
     * @return \OpenAPI\Client\Model\TeilnehmergruppePreis[]|null
     */
    public function getPreiseJeTeilnehmergruppe()
    {
        return $this->container['preise_je_teilnehmergruppe'];
    }

    /**
     * Sets preise_je_teilnehmergruppe
     *
     * @param \OpenAPI\Client\Model\TeilnehmergruppePreis[]|null $preise_je_teilnehmergruppe Die Preise je nach Teilnehmergruppe des Veranstaltungstyps.
     *
     * @return self
     */
    public function setPreiseJeTeilnehmergruppe($preise_je_teilnehmergruppe)
    {
        if (is_null($preise_je_teilnehmergruppe)) {
            throw new \InvalidArgumentException('non-nullable preise_je_teilnehmergruppe cannot be null');
        }
        $this->container['preise_je_teilnehmergruppe'] = $preise_je_teilnehmergruppe;

        return $this;
    }

    /**
     * Gets publizierung_aktiv
     *
     * @return bool|null
     */
    public function getPublizierungAktiv()
    {
        return $this->container['publizierung_aktiv'];
    }

    /**
     * Sets publizierung_aktiv
     *
     * @param bool|null $publizierung_aktiv Gibt an, ob die Publizierung ins Web aktiv ist. Entspricht dem invertierten Schalter \"Keine Publizierung im Web\".
     *
     * @return self
     */
    public function setPublizierungAktiv($publizierung_aktiv)
    {
        if (is_null($publizierung_aktiv)) {
            throw new \InvalidArgumentException('non-nullable publizierung_aktiv cannot be null');
        }
        $this->container['publizierung_aktiv'] = $publizierung_aktiv;

        return $this;
    }

    /**
     * Gets regulaere_uhrzeit_bis
     *
     * @return string|null
     */
    public function getRegulaereUhrzeitBis()
    {
        return $this->container['regulaere_uhrzeit_bis'];
    }

    /**
     * Sets regulaere_uhrzeit_bis
     *
     * @param string|null $regulaere_uhrzeit_bis Die Regul채re bis Uhrzeit des Veranstaltungstyps.
     *
     * @return self
     */
    public function setRegulaereUhrzeitBis($regulaere_uhrzeit_bis)
    {
        if (is_null($regulaere_uhrzeit_bis)) {
            throw new \InvalidArgumentException('non-nullable regulaere_uhrzeit_bis cannot be null');
        }
        $this->container['regulaere_uhrzeit_bis'] = $regulaere_uhrzeit_bis;

        return $this;
    }

    /**
     * Gets regulaere_uhrzeit_von
     *
     * @return string|null
     */
    public function getRegulaereUhrzeitVon()
    {
        return $this->container['regulaere_uhrzeit_von'];
    }

    /**
     * Sets regulaere_uhrzeit_von
     *
     * @param string|null $regulaere_uhrzeit_von Die Regul채re von Uhrzeit des Veranstaltungstyps.
     *
     * @return self
     */
    public function setRegulaereUhrzeitVon($regulaere_uhrzeit_von)
    {
        if (is_null($regulaere_uhrzeit_von)) {
            throw new \InvalidArgumentException('non-nullable regulaere_uhrzeit_von cannot be null');
        }
        $this->container['regulaere_uhrzeit_von'] = $regulaere_uhrzeit_von;

        return $this;
    }

    /**
     * Gets sachbearbeiter
     *
     * @return \OpenAPI\Client\Model\Sachbearbeiter|null
     */
    public function getSachbearbeiter()
    {
        return $this->container['sachbearbeiter'];
    }

    /**
     * Sets sachbearbeiter
     *
     * @param \OpenAPI\Client\Model\Sachbearbeiter|null $sachbearbeiter sachbearbeiter
     *
     * @return self
     */
    public function setSachbearbeiter($sachbearbeiter)
    {
        if (is_null($sachbearbeiter)) {
            throw new \InvalidArgumentException('non-nullable sachbearbeiter cannot be null');
        }
        $this->container['sachbearbeiter'] = $sachbearbeiter;

        return $this;
    }

    /**
     * Gets sachbearbeiter_tn
     *
     * @return \OpenAPI\Client\Model\Sachbearbeiter|null
     */
    public function getSachbearbeiterTn()
    {
        return $this->container['sachbearbeiter_tn'];
    }

    /**
     * Sets sachbearbeiter_tn
     *
     * @param \OpenAPI\Client\Model\Sachbearbeiter|null $sachbearbeiter_tn sachbearbeiter_tn
     *
     * @return self
     */
    public function setSachbearbeiterTn($sachbearbeiter_tn)
    {
        if (is_null($sachbearbeiter_tn)) {
            throw new \InvalidArgumentException('non-nullable sachbearbeiter_tn cannot be null');
        }
        $this->container['sachbearbeiter_tn'] = $sachbearbeiter_tn;

        return $this;
    }

    /**
     * Gets schlagwoerter
     *
     * @return \OpenAPI\Client\Model\Schlagwort[]|null
     */
    public function getSchlagwoerter()
    {
        return $this->container['schlagwoerter'];
    }

    /**
     * Sets schlagwoerter
     *
     * @param \OpenAPI\Client\Model\Schlagwort[]|null $schlagwoerter Die Schlagw철rter f체r den Veranstaltungstyp.
     *
     * @return self
     */
    public function setSchlagwoerter($schlagwoerter)
    {
        if (is_null($schlagwoerter)) {
            throw new \InvalidArgumentException('non-nullable schlagwoerter cannot be null');
        }
        $this->container['schlagwoerter'] = $schlagwoerter;

        return $this;
    }

    /**
     * Gets standardzahlungsbedingung
     *
     * @return \OpenAPI\Client\Model\Zahlungsbedingung|null
     */
    public function getStandardzahlungsbedingung()
    {
        return $this->container['standardzahlungsbedingung'];
    }

    /**
     * Sets standardzahlungsbedingung
     *
     * @param \OpenAPI\Client\Model\Zahlungsbedingung|null $standardzahlungsbedingung standardzahlungsbedingung
     *
     * @return self
     */
    public function setStandardzahlungsbedingung($standardzahlungsbedingung)
    {
        if (is_null($standardzahlungsbedingung)) {
            throw new \InvalidArgumentException('non-nullable standardzahlungsbedingung cannot be null');
        }
        $this->container['standardzahlungsbedingung'] = $standardzahlungsbedingung;

        return $this;
    }

    /**
     * Gets teilnehmermaximum
     *
     * @return int|null
     */
    public function getTeilnehmermaximum()
    {
        return $this->container['teilnehmermaximum'];
    }

    /**
     * Sets teilnehmermaximum
     *
     * @param int|null $teilnehmermaximum Das Teilnehmermaximum des Veranstaltungstyps
     *
     * @return self
     */
    public function setTeilnehmermaximum($teilnehmermaximum)
    {
        if (is_null($teilnehmermaximum)) {
            throw new \InvalidArgumentException('non-nullable teilnehmermaximum cannot be null');
        }
        $this->container['teilnehmermaximum'] = $teilnehmermaximum;

        return $this;
    }

    /**
     * Gets teilnehmerminimum
     *
     * @return int|null
     */
    public function getTeilnehmerminimum()
    {
        return $this->container['teilnehmerminimum'];
    }

    /**
     * Sets teilnehmerminimum
     *
     * @param int|null $teilnehmerminimum Das Teilnehmerminimum des Veranstaltungstyps
     *
     * @return self
     */
    public function setTeilnehmerminimum($teilnehmerminimum)
    {
        if (is_null($teilnehmerminimum)) {
            throw new \InvalidArgumentException('non-nullable teilnehmerminimum cannot be null');
        }
        $this->container['teilnehmerminimum'] = $teilnehmerminimum;

        return $this;
    }

    /**
     * Gets thema
     *
     * @return string
     */
    public function getThema()
    {
        return $this->container['thema'];
    }

    /**
     * Sets thema
     *
     * @param string $thema Das Thema des Veranstaltungstyps
     *
     * @return self
     */
    public function setThema($thema)
    {
        if (is_null($thema)) {
            throw new \InvalidArgumentException('non-nullable thema cannot be null');
        }
        $this->container['thema'] = $thema;

        return $this;
    }

    /**
     * Gets thema2
     *
     * @return string|null
     */
    public function getThema2()
    {
        return $this->container['thema2'];
    }

    /**
     * Sets thema2
     *
     * @param string|null $thema2 Thema 2 des Veranstaltungstyps
     *
     * @return self
     */
    public function setThema2($thema2)
    {
        if (is_null($thema2)) {
            throw new \InvalidArgumentException('non-nullable thema2 cannot be null');
        }
        $this->container['thema2'] = $thema2;

        return $this;
    }

    /**
     * Gets uhrzeit_bis
     *
     * @return string|null
     */
    public function getUhrzeitBis()
    {
        return $this->container['uhrzeit_bis'];
    }

    /**
     * Sets uhrzeit_bis
     *
     * @param string|null $uhrzeit_bis Die bis Uhrzeit des Veranstaltungstyps, am letzten Tag des Veranstaltungstyps.
     *
     * @return self
     */
    public function setUhrzeitBis($uhrzeit_bis)
    {
        if (is_null($uhrzeit_bis)) {
            throw new \InvalidArgumentException('non-nullable uhrzeit_bis cannot be null');
        }
        $this->container['uhrzeit_bis'] = $uhrzeit_bis;

        return $this;
    }

    /**
     * Gets uhrzeit_von
     *
     * @return string|null
     */
    public function getUhrzeitVon()
    {
        return $this->container['uhrzeit_von'];
    }

    /**
     * Sets uhrzeit_von
     *
     * @param string|null $uhrzeit_von Die von Uhrzeit des Veranstaltungstyps, am ersten Tag des Veranstaltungstyps.
     *
     * @return self
     */
    public function setUhrzeitVon($uhrzeit_von)
    {
        if (is_null($uhrzeit_von)) {
            throw new \InvalidArgumentException('non-nullable uhrzeit_von cannot be null');
        }
        $this->container['uhrzeit_von'] = $uhrzeit_von;

        return $this;
    }

    /**
     * Gets veranstaltungs_nr
     *
     * @return string
     */
    public function getVeranstaltungsNr()
    {
        return $this->container['veranstaltungs_nr'];
    }

    /**
     * Sets veranstaltungs_nr
     *
     * @param string $veranstaltungs_nr Die Veranstaltungs-Nr. des Veranstaltungstyps
     *
     * @return self
     */
    public function setVeranstaltungsNr($veranstaltungs_nr)
    {
        if (is_null($veranstaltungs_nr)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungs_nr cannot be null');
        }
        $this->container['veranstaltungs_nr'] = $veranstaltungs_nr;

        return $this;
    }

    /**
     * Gets veranstaltungsart
     *
     * @return string|null
     */
    public function getVeranstaltungsart()
    {
        return $this->container['veranstaltungsart'];
    }

    /**
     * Sets veranstaltungsart
     *
     * @param string|null $veranstaltungsart Veranstaltungsart des Veranstaltungstyps, zul채ssig sind hier VIRTUELL und PRAESENZ.
     *
     * @return self
     */
    public function setVeranstaltungsart($veranstaltungsart)
    {
        if (is_null($veranstaltungsart)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungsart cannot be null');
        }
        $this->container['veranstaltungsart'] = $veranstaltungsart;

        return $this;
    }

    /**
     * Gets veranstaltungsform
     *
     * @return \OpenAPI\Client\Model\Veranstaltungsform|null
     */
    public function getVeranstaltungsform()
    {
        return $this->container['veranstaltungsform'];
    }

    /**
     * Sets veranstaltungsform
     *
     * @param \OpenAPI\Client\Model\Veranstaltungsform|null $veranstaltungsform veranstaltungsform
     *
     * @return self
     */
    public function setVeranstaltungsform($veranstaltungsform)
    {
        if (is_null($veranstaltungsform)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungsform cannot be null');
        }
        $this->container['veranstaltungsform'] = $veranstaltungsform;

        return $this;
    }

    /**
     * Gets veranstaltungskategorie
     *
     * @return \OpenAPI\Client\Model\Veranstaltungskategorie|null
     */
    public function getVeranstaltungskategorie()
    {
        return $this->container['veranstaltungskategorie'];
    }

    /**
     * Sets veranstaltungskategorie
     *
     * @param \OpenAPI\Client\Model\Veranstaltungskategorie|null $veranstaltungskategorie veranstaltungskategorie
     *
     * @return self
     */
    public function setVeranstaltungskategorie($veranstaltungskategorie)
    {
        if (is_null($veranstaltungskategorie)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungskategorie cannot be null');
        }
        $this->container['veranstaltungskategorie'] = $veranstaltungskategorie;

        return $this;
    }

    /**
     * Gets veranstaltungsunterkategorie
     *
     * @return \OpenAPI\Client\Model\Veranstaltungsunterkategorie|null
     */
    public function getVeranstaltungsunterkategorie()
    {
        return $this->container['veranstaltungsunterkategorie'];
    }

    /**
     * Sets veranstaltungsunterkategorie
     *
     * @param \OpenAPI\Client\Model\Veranstaltungsunterkategorie|null $veranstaltungsunterkategorie veranstaltungsunterkategorie
     *
     * @return self
     */
    public function setVeranstaltungsunterkategorie($veranstaltungsunterkategorie)
    {
        if (is_null($veranstaltungsunterkategorie)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungsunterkategorie cannot be null');
        }
        $this->container['veranstaltungsunterkategorie'] = $veranstaltungsunterkategorie;

        return $this;
    }

    /**
     * Gets voraussetzung
     *
     * @return string|null
     */
    public function getVoraussetzung()
    {
        return $this->container['voraussetzung'];
    }

    /**
     * Sets voraussetzung
     *
     * @param string|null $voraussetzung Die Voraussetzungen f체r den Veranstaltungstyp (HTML m철glich)
     *
     * @return self
     */
    public function setVoraussetzung($voraussetzung)
    {
        if (is_null($voraussetzung)) {
            throw new \InvalidArgumentException('non-nullable voraussetzung cannot be null');
        }
        $this->container['voraussetzung'] = $voraussetzung;

        return $this;
    }

    /**
     * Gets wbd_relevant
     *
     * @return bool|null
     */
    public function getWbdRelevant()
    {
        return $this->container['wbd_relevant'];
    }

    /**
     * Sets wbd_relevant
     *
     * @param bool|null $wbd_relevant Dieses Kennzeichen gibt an, ob der Veranstaltungstyp relevant f체r die Weiterbildungsdatenbank(WBD) ist
     *
     * @return self
     */
    public function setWbdRelevant($wbd_relevant)
    {
        if (is_null($wbd_relevant)) {
            throw new \InvalidArgumentException('non-nullable wbd_relevant cannot be null');
        }
        $this->container['wbd_relevant'] = $wbd_relevant;

        return $this;
    }

    /**
     * Gets wbd_thema
     *
     * @return string|null
     */
    public function getWbdThema()
    {
        return $this->container['wbd_thema'];
    }

    /**
     * Sets wbd_thema
     *
     * @param string|null $wbd_thema Das WBD-Thema des Veranstaltungstyps
     *
     * @return self
     */
    public function setWbdThema($wbd_thema)
    {
        if (is_null($wbd_thema)) {
            throw new \InvalidArgumentException('non-nullable wbd_thema cannot be null');
        }
        $this->container['wbd_thema'] = $wbd_thema;

        return $this;
    }

    /**
     * Gets webcode
     *
     * @return string|null
     */
    public function getWebcode()
    {
        return $this->container['webcode'];
    }

    /**
     * Sets webcode
     *
     * @param string|null $webcode Webcode des Veranstaltungstypen
     *
     * @return self
     */
    public function setWebcode($webcode)
    {
        if (is_null($webcode)) {
            throw new \InvalidArgumentException('non-nullable webcode cannot be null');
        }
        $this->container['webcode'] = $webcode;

        return $this;
    }

    /**
     * Gets ziel
     *
     * @return string|null
     */
    public function getZiel()
    {
        return $this->container['ziel'];
    }

    /**
     * Sets ziel
     *
     * @param string|null $ziel Die Ziele des Veranstaltungstyps (HTML m철glich)
     *
     * @return self
     */
    public function setZiel($ziel)
    {
        if (is_null($ziel)) {
            throw new \InvalidArgumentException('non-nullable ziel cannot be null');
        }
        $this->container['ziel'] = $ziel;

        return $this;
    }

    /**
     * Gets zielgruppen
     *
     * @return \OpenAPI\Client\Model\Zielgruppe[]|null
     */
    public function getZielgruppen()
    {
        return $this->container['zielgruppen'];
    }

    /**
     * Sets zielgruppen
     *
     * @param \OpenAPI\Client\Model\Zielgruppe[]|null $zielgruppen Die Zielgruppen f체r den Veranstaltungstyp.
     *
     * @return self
     */
    public function setZielgruppen($zielgruppen)
    {
        if (is_null($zielgruppen)) {
            throw new \InvalidArgumentException('non-nullable zielgruppen cannot be null');
        }
        $this->container['zielgruppen'] = $zielgruppen;

        return $this;
    }

    /**
     * Gets zielgruppen_details
     *
     * @return string|null
     */
    public function getZielgruppenDetails()
    {
        return $this->container['zielgruppen_details'];
    }

    /**
     * Sets zielgruppen_details
     *
     * @param string|null $zielgruppen_details Die Zielgruppen-Details
     *
     * @return self
     */
    public function setZielgruppenDetails($zielgruppen_details)
    {
        if (is_null($zielgruppen_details)) {
            throw new \InvalidArgumentException('non-nullable zielgruppen_details cannot be null');
        }
        $this->container['zielgruppen_details'] = $zielgruppen_details;

        return $this;
    }

    /**
     * Gets zusatzinformationen
     *
     * @return string|null
     */
    public function getZusatzinformationen()
    {
        return $this->container['zusatzinformationen'];
    }

    /**
     * Sets zusatzinformationen
     *
     * @param string|null $zusatzinformationen Die Zusatzinformationen
     *
     * @return self
     */
    public function setZusatzinformationen($zusatzinformationen)
    {
        if (is_null($zusatzinformationen)) {
            throw new \InvalidArgumentException('non-nullable zusatzinformationen cannot be null');
        }
        $this->container['zusatzinformationen'] = $zusatzinformationen;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


