<?php
/**
 * Veranstaltungstermin
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers für die Version 2. Die Dokumentation zu speziellen Versionen kann über die Angabe des zusätzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 für die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * The version of the OpenAPI document: 2
 * Contact: info@veda.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Veranstaltungstermin Class Doc Comment
 *
 * @category Class
 * @description Ein Veranstaltungstermin mit seinen relevanten Daten
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Veranstaltungstermin implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Veranstaltungstermin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'oid' => 'string',
        'anz_teilnehmertage_pro_teilnehmer' => 'float',
        'anzahl_freier_plaetze' => 'int',
        'anzahl_freier_wartelistenplaetze' => 'int',
        'anzahl_teilnehmerbuchungen' => 'int',
        'anzahl_ue' => 'float',
        'anzahl_wartelistenbuchungen' => 'int',
        'auslastungsstatus' => 'string',
        'beschreibung' => 'string',
        'dauer_in_tagen' => 'float',
        'dozenten' => '\OpenAPI\Client\Model\GebuchterDozentApiDto[]',
        'fachlicher_ansprechpartner' => '\OpenAPI\Client\Model\Fachlicheransprechpartner',
        'geschlossen' => 'bool',
        'hinweise' => 'string',
        'inhalt' => 'string',
        'kategorien' => '\OpenAPI\Client\Model\KategorieUndUnterkategorieApiDto[]',
        'links' => '\OpenAPI\Client\Model\Link[]',
        'max_anzahl_teilnehmer_pro_buchungsanfrage' => 'int',
        'methodik' => 'string',
        'ort_vorgesehener_veranstaltungsort' => 'string',
        'plz_vorgesehener_veranstaltungsort' => 'string',
        'preis' => 'float',
        'preise_je_teilnehmergruppe' => '\OpenAPI\Client\Model\TeilnehmergruppePreis[]',
        'reg_uhrzeit_bis' => 'string',
        'reg_uhrzeit_von' => 'string',
        'sachbearbeiter' => '\OpenAPI\Client\Model\Sachbearbeiter',
        'schlagwoerter' => '\OpenAPI\Client\Model\Schlagwort[]',
        'sprache' => 'string',
        'standardzahlungsbedingung' => '\OpenAPI\Client\Model\Zahlungsbedingung',
        'teilnehmermaximum' => 'int',
        'teilnehmerminimum' => 'int',
        'termin_bis' => '\DateTime',
        'termin_von' => '\DateTime',
        'thema' => 'string',
        'thema2' => 'string',
        'uebernachtung_vorgesehen' => 'string',
        'uebernachtungsort' => '\OpenAPI\Client\Model\Uebernachtungsort',
        'uebernachtungszeitraum_bis' => '\DateTime',
        'uebernachtungszeitraum_von' => '\DateTime',
        'veranstalter' => '\OpenAPI\Client\Model\Veranstalter',
        'veranstaltungs_nr' => 'string',
        'veranstaltungsanbieter' => '\OpenAPI\Client\Model\Veranstaltungsanbieter',
        'veranstaltungsart' => 'string',
        'veranstaltungsform' => '\OpenAPI\Client\Model\Veranstaltungsform',
        'veranstaltungskategorie' => '\OpenAPI\Client\Model\Veranstaltungskategorie',
        'veranstaltungsort' => '\OpenAPI\Client\Model\Veranstaltungsort',
        'veranstaltungstermin_nr' => 'string',
        'veranstaltungstyp_id' => 'string',
        'veranstaltungstyp_nr' => 'string',
        'veranstaltungsunterkategorie' => '\OpenAPI\Client\Model\Veranstaltungsunterkategorie',
        'voraussetzung' => 'string',
        'wartelistenmaximum' => 'int',
        'wbd_relevant' => 'bool',
        'wbd_thema' => 'string',
        'ziel' => 'string',
        'zielgruppen' => '\OpenAPI\Client\Model\Zielgruppe[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'oid' => null,
        'anz_teilnehmertage_pro_teilnehmer' => null,
        'anzahl_freier_plaetze' => null,
        'anzahl_freier_wartelistenplaetze' => null,
        'anzahl_teilnehmerbuchungen' => null,
        'anzahl_ue' => null,
        'anzahl_wartelistenbuchungen' => null,
        'auslastungsstatus' => null,
        'beschreibung' => null,
        'dauer_in_tagen' => null,
        'dozenten' => null,
        'fachlicher_ansprechpartner' => null,
        'geschlossen' => null,
        'hinweise' => null,
        'inhalt' => null,
        'kategorien' => null,
        'links' => null,
        'max_anzahl_teilnehmer_pro_buchungsanfrage' => null,
        'methodik' => null,
        'ort_vorgesehener_veranstaltungsort' => null,
        'plz_vorgesehener_veranstaltungsort' => null,
        'preis' => null,
        'preise_je_teilnehmergruppe' => null,
        'reg_uhrzeit_bis' => null,
        'reg_uhrzeit_von' => null,
        'sachbearbeiter' => null,
        'schlagwoerter' => null,
        'sprache' => null,
        'standardzahlungsbedingung' => null,
        'teilnehmermaximum' => null,
        'teilnehmerminimum' => null,
        'termin_bis' => 'date-time',
        'termin_von' => 'date-time',
        'thema' => null,
        'thema2' => null,
        'uebernachtung_vorgesehen' => null,
        'uebernachtungsort' => null,
        'uebernachtungszeitraum_bis' => 'date',
        'uebernachtungszeitraum_von' => 'date',
        'veranstalter' => null,
        'veranstaltungs_nr' => null,
        'veranstaltungsanbieter' => null,
        'veranstaltungsart' => null,
        'veranstaltungsform' => null,
        'veranstaltungskategorie' => null,
        'veranstaltungsort' => null,
        'veranstaltungstermin_nr' => null,
        'veranstaltungstyp_id' => null,
        'veranstaltungstyp_nr' => null,
        'veranstaltungsunterkategorie' => null,
        'voraussetzung' => null,
        'wartelistenmaximum' => null,
        'wbd_relevant' => null,
        'wbd_thema' => null,
        'ziel' => null,
        'zielgruppen' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'oid' => false,
		'anz_teilnehmertage_pro_teilnehmer' => false,
		'anzahl_freier_plaetze' => false,
		'anzahl_freier_wartelistenplaetze' => false,
		'anzahl_teilnehmerbuchungen' => false,
		'anzahl_ue' => false,
		'anzahl_wartelistenbuchungen' => false,
		'auslastungsstatus' => false,
		'beschreibung' => false,
		'dauer_in_tagen' => false,
		'dozenten' => false,
		'fachlicher_ansprechpartner' => false,
		'geschlossen' => false,
		'hinweise' => false,
		'inhalt' => false,
		'kategorien' => false,
		'links' => false,
		'max_anzahl_teilnehmer_pro_buchungsanfrage' => false,
		'methodik' => false,
		'ort_vorgesehener_veranstaltungsort' => false,
		'plz_vorgesehener_veranstaltungsort' => false,
		'preis' => false,
		'preise_je_teilnehmergruppe' => false,
		'reg_uhrzeit_bis' => false,
		'reg_uhrzeit_von' => false,
		'sachbearbeiter' => false,
		'schlagwoerter' => false,
		'sprache' => false,
		'standardzahlungsbedingung' => false,
		'teilnehmermaximum' => false,
		'teilnehmerminimum' => false,
		'termin_bis' => false,
		'termin_von' => false,
		'thema' => false,
		'thema2' => false,
		'uebernachtung_vorgesehen' => false,
		'uebernachtungsort' => false,
		'uebernachtungszeitraum_bis' => false,
		'uebernachtungszeitraum_von' => false,
		'veranstalter' => false,
		'veranstaltungs_nr' => false,
		'veranstaltungsanbieter' => false,
		'veranstaltungsart' => false,
		'veranstaltungsform' => false,
		'veranstaltungskategorie' => false,
		'veranstaltungsort' => false,
		'veranstaltungstermin_nr' => false,
		'veranstaltungstyp_id' => false,
		'veranstaltungstyp_nr' => false,
		'veranstaltungsunterkategorie' => false,
		'voraussetzung' => false,
		'wartelistenmaximum' => false,
		'wbd_relevant' => false,
		'wbd_thema' => false,
		'ziel' => false,
		'zielgruppen' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oid' => 'oid',
        'anz_teilnehmertage_pro_teilnehmer' => 'anzTeilnehmertageProTeilnehmer',
        'anzahl_freier_plaetze' => 'anzahlFreierPlaetze',
        'anzahl_freier_wartelistenplaetze' => 'anzahlFreierWartelistenplaetze',
        'anzahl_teilnehmerbuchungen' => 'anzahlTeilnehmerbuchungen',
        'anzahl_ue' => 'anzahlUE',
        'anzahl_wartelistenbuchungen' => 'anzahlWartelistenbuchungen',
        'auslastungsstatus' => 'auslastungsstatus',
        'beschreibung' => 'beschreibung',
        'dauer_in_tagen' => 'dauerInTagen',
        'dozenten' => 'dozenten',
        'fachlicher_ansprechpartner' => 'fachlicherAnsprechpartner',
        'geschlossen' => 'geschlossen',
        'hinweise' => 'hinweise',
        'inhalt' => 'inhalt',
        'kategorien' => 'kategorien',
        'links' => 'links',
        'max_anzahl_teilnehmer_pro_buchungsanfrage' => 'maxAnzahlTeilnehmerProBuchungsanfrage',
        'methodik' => 'methodik',
        'ort_vorgesehener_veranstaltungsort' => 'ortVorgesehenerVeranstaltungsort',
        'plz_vorgesehener_veranstaltungsort' => 'plzVorgesehenerVeranstaltungsort',
        'preis' => 'preis',
        'preise_je_teilnehmergruppe' => 'preiseJeTeilnehmergruppe',
        'reg_uhrzeit_bis' => 'regUhrzeitBis',
        'reg_uhrzeit_von' => 'regUhrzeitVon',
        'sachbearbeiter' => 'sachbearbeiter',
        'schlagwoerter' => 'schlagwoerter',
        'sprache' => 'sprache',
        'standardzahlungsbedingung' => 'standardzahlungsbedingung',
        'teilnehmermaximum' => 'teilnehmermaximum',
        'teilnehmerminimum' => 'teilnehmerminimum',
        'termin_bis' => 'terminBis',
        'termin_von' => 'terminVon',
        'thema' => 'thema',
        'thema2' => 'thema2',
        'uebernachtung_vorgesehen' => 'uebernachtungVorgesehen',
        'uebernachtungsort' => 'uebernachtungsort',
        'uebernachtungszeitraum_bis' => 'uebernachtungszeitraumBis',
        'uebernachtungszeitraum_von' => 'uebernachtungszeitraumVon',
        'veranstalter' => 'veranstalter',
        'veranstaltungs_nr' => 'veranstaltungsNr',
        'veranstaltungsanbieter' => 'veranstaltungsanbieter',
        'veranstaltungsart' => 'veranstaltungsart',
        'veranstaltungsform' => 'veranstaltungsform',
        'veranstaltungskategorie' => 'veranstaltungskategorie',
        'veranstaltungsort' => 'veranstaltungsort',
        'veranstaltungstermin_nr' => 'veranstaltungsterminNr',
        'veranstaltungstyp_id' => 'veranstaltungstypID',
        'veranstaltungstyp_nr' => 'veranstaltungstypNr',
        'veranstaltungsunterkategorie' => 'veranstaltungsunterkategorie',
        'voraussetzung' => 'voraussetzung',
        'wartelistenmaximum' => 'wartelistenmaximum',
        'wbd_relevant' => 'wbdRelevant',
        'wbd_thema' => 'wbdThema',
        'ziel' => 'ziel',
        'zielgruppen' => 'zielgruppen'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oid' => 'setOid',
        'anz_teilnehmertage_pro_teilnehmer' => 'setAnzTeilnehmertageProTeilnehmer',
        'anzahl_freier_plaetze' => 'setAnzahlFreierPlaetze',
        'anzahl_freier_wartelistenplaetze' => 'setAnzahlFreierWartelistenplaetze',
        'anzahl_teilnehmerbuchungen' => 'setAnzahlTeilnehmerbuchungen',
        'anzahl_ue' => 'setAnzahlUe',
        'anzahl_wartelistenbuchungen' => 'setAnzahlWartelistenbuchungen',
        'auslastungsstatus' => 'setAuslastungsstatus',
        'beschreibung' => 'setBeschreibung',
        'dauer_in_tagen' => 'setDauerInTagen',
        'dozenten' => 'setDozenten',
        'fachlicher_ansprechpartner' => 'setFachlicherAnsprechpartner',
        'geschlossen' => 'setGeschlossen',
        'hinweise' => 'setHinweise',
        'inhalt' => 'setInhalt',
        'kategorien' => 'setKategorien',
        'links' => 'setLinks',
        'max_anzahl_teilnehmer_pro_buchungsanfrage' => 'setMaxAnzahlTeilnehmerProBuchungsanfrage',
        'methodik' => 'setMethodik',
        'ort_vorgesehener_veranstaltungsort' => 'setOrtVorgesehenerVeranstaltungsort',
        'plz_vorgesehener_veranstaltungsort' => 'setPlzVorgesehenerVeranstaltungsort',
        'preis' => 'setPreis',
        'preise_je_teilnehmergruppe' => 'setPreiseJeTeilnehmergruppe',
        'reg_uhrzeit_bis' => 'setRegUhrzeitBis',
        'reg_uhrzeit_von' => 'setRegUhrzeitVon',
        'sachbearbeiter' => 'setSachbearbeiter',
        'schlagwoerter' => 'setSchlagwoerter',
        'sprache' => 'setSprache',
        'standardzahlungsbedingung' => 'setStandardzahlungsbedingung',
        'teilnehmermaximum' => 'setTeilnehmermaximum',
        'teilnehmerminimum' => 'setTeilnehmerminimum',
        'termin_bis' => 'setTerminBis',
        'termin_von' => 'setTerminVon',
        'thema' => 'setThema',
        'thema2' => 'setThema2',
        'uebernachtung_vorgesehen' => 'setUebernachtungVorgesehen',
        'uebernachtungsort' => 'setUebernachtungsort',
        'uebernachtungszeitraum_bis' => 'setUebernachtungszeitraumBis',
        'uebernachtungszeitraum_von' => 'setUebernachtungszeitraumVon',
        'veranstalter' => 'setVeranstalter',
        'veranstaltungs_nr' => 'setVeranstaltungsNr',
        'veranstaltungsanbieter' => 'setVeranstaltungsanbieter',
        'veranstaltungsart' => 'setVeranstaltungsart',
        'veranstaltungsform' => 'setVeranstaltungsform',
        'veranstaltungskategorie' => 'setVeranstaltungskategorie',
        'veranstaltungsort' => 'setVeranstaltungsort',
        'veranstaltungstermin_nr' => 'setVeranstaltungsterminNr',
        'veranstaltungstyp_id' => 'setVeranstaltungstypId',
        'veranstaltungstyp_nr' => 'setVeranstaltungstypNr',
        'veranstaltungsunterkategorie' => 'setVeranstaltungsunterkategorie',
        'voraussetzung' => 'setVoraussetzung',
        'wartelistenmaximum' => 'setWartelistenmaximum',
        'wbd_relevant' => 'setWbdRelevant',
        'wbd_thema' => 'setWbdThema',
        'ziel' => 'setZiel',
        'zielgruppen' => 'setZielgruppen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oid' => 'getOid',
        'anz_teilnehmertage_pro_teilnehmer' => 'getAnzTeilnehmertageProTeilnehmer',
        'anzahl_freier_plaetze' => 'getAnzahlFreierPlaetze',
        'anzahl_freier_wartelistenplaetze' => 'getAnzahlFreierWartelistenplaetze',
        'anzahl_teilnehmerbuchungen' => 'getAnzahlTeilnehmerbuchungen',
        'anzahl_ue' => 'getAnzahlUe',
        'anzahl_wartelistenbuchungen' => 'getAnzahlWartelistenbuchungen',
        'auslastungsstatus' => 'getAuslastungsstatus',
        'beschreibung' => 'getBeschreibung',
        'dauer_in_tagen' => 'getDauerInTagen',
        'dozenten' => 'getDozenten',
        'fachlicher_ansprechpartner' => 'getFachlicherAnsprechpartner',
        'geschlossen' => 'getGeschlossen',
        'hinweise' => 'getHinweise',
        'inhalt' => 'getInhalt',
        'kategorien' => 'getKategorien',
        'links' => 'getLinks',
        'max_anzahl_teilnehmer_pro_buchungsanfrage' => 'getMaxAnzahlTeilnehmerProBuchungsanfrage',
        'methodik' => 'getMethodik',
        'ort_vorgesehener_veranstaltungsort' => 'getOrtVorgesehenerVeranstaltungsort',
        'plz_vorgesehener_veranstaltungsort' => 'getPlzVorgesehenerVeranstaltungsort',
        'preis' => 'getPreis',
        'preise_je_teilnehmergruppe' => 'getPreiseJeTeilnehmergruppe',
        'reg_uhrzeit_bis' => 'getRegUhrzeitBis',
        'reg_uhrzeit_von' => 'getRegUhrzeitVon',
        'sachbearbeiter' => 'getSachbearbeiter',
        'schlagwoerter' => 'getSchlagwoerter',
        'sprache' => 'getSprache',
        'standardzahlungsbedingung' => 'getStandardzahlungsbedingung',
        'teilnehmermaximum' => 'getTeilnehmermaximum',
        'teilnehmerminimum' => 'getTeilnehmerminimum',
        'termin_bis' => 'getTerminBis',
        'termin_von' => 'getTerminVon',
        'thema' => 'getThema',
        'thema2' => 'getThema2',
        'uebernachtung_vorgesehen' => 'getUebernachtungVorgesehen',
        'uebernachtungsort' => 'getUebernachtungsort',
        'uebernachtungszeitraum_bis' => 'getUebernachtungszeitraumBis',
        'uebernachtungszeitraum_von' => 'getUebernachtungszeitraumVon',
        'veranstalter' => 'getVeranstalter',
        'veranstaltungs_nr' => 'getVeranstaltungsNr',
        'veranstaltungsanbieter' => 'getVeranstaltungsanbieter',
        'veranstaltungsart' => 'getVeranstaltungsart',
        'veranstaltungsform' => 'getVeranstaltungsform',
        'veranstaltungskategorie' => 'getVeranstaltungskategorie',
        'veranstaltungsort' => 'getVeranstaltungsort',
        'veranstaltungstermin_nr' => 'getVeranstaltungsterminNr',
        'veranstaltungstyp_id' => 'getVeranstaltungstypId',
        'veranstaltungstyp_nr' => 'getVeranstaltungstypNr',
        'veranstaltungsunterkategorie' => 'getVeranstaltungsunterkategorie',
        'voraussetzung' => 'getVoraussetzung',
        'wartelistenmaximum' => 'getWartelistenmaximum',
        'wbd_relevant' => 'getWbdRelevant',
        'wbd_thema' => 'getWbdThema',
        'ziel' => 'getZiel',
        'zielgruppen' => 'getZielgruppen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('oid', $data ?? [], null);
        $this->setIfExists('anz_teilnehmertage_pro_teilnehmer', $data ?? [], null);
        $this->setIfExists('anzahl_freier_plaetze', $data ?? [], null);
        $this->setIfExists('anzahl_freier_wartelistenplaetze', $data ?? [], null);
        $this->setIfExists('anzahl_teilnehmerbuchungen', $data ?? [], null);
        $this->setIfExists('anzahl_ue', $data ?? [], null);
        $this->setIfExists('anzahl_wartelistenbuchungen', $data ?? [], null);
        $this->setIfExists('auslastungsstatus', $data ?? [], null);
        $this->setIfExists('beschreibung', $data ?? [], null);
        $this->setIfExists('dauer_in_tagen', $data ?? [], null);
        $this->setIfExists('dozenten', $data ?? [], null);
        $this->setIfExists('fachlicher_ansprechpartner', $data ?? [], null);
        $this->setIfExists('geschlossen', $data ?? [], null);
        $this->setIfExists('hinweise', $data ?? [], null);
        $this->setIfExists('inhalt', $data ?? [], null);
        $this->setIfExists('kategorien', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('max_anzahl_teilnehmer_pro_buchungsanfrage', $data ?? [], null);
        $this->setIfExists('methodik', $data ?? [], null);
        $this->setIfExists('ort_vorgesehener_veranstaltungsort', $data ?? [], null);
        $this->setIfExists('plz_vorgesehener_veranstaltungsort', $data ?? [], null);
        $this->setIfExists('preis', $data ?? [], null);
        $this->setIfExists('preise_je_teilnehmergruppe', $data ?? [], null);
        $this->setIfExists('reg_uhrzeit_bis', $data ?? [], null);
        $this->setIfExists('reg_uhrzeit_von', $data ?? [], null);
        $this->setIfExists('sachbearbeiter', $data ?? [], null);
        $this->setIfExists('schlagwoerter', $data ?? [], null);
        $this->setIfExists('sprache', $data ?? [], null);
        $this->setIfExists('standardzahlungsbedingung', $data ?? [], null);
        $this->setIfExists('teilnehmermaximum', $data ?? [], null);
        $this->setIfExists('teilnehmerminimum', $data ?? [], null);
        $this->setIfExists('termin_bis', $data ?? [], null);
        $this->setIfExists('termin_von', $data ?? [], null);
        $this->setIfExists('thema', $data ?? [], null);
        $this->setIfExists('thema2', $data ?? [], null);
        $this->setIfExists('uebernachtung_vorgesehen', $data ?? [], null);
        $this->setIfExists('uebernachtungsort', $data ?? [], null);
        $this->setIfExists('uebernachtungszeitraum_bis', $data ?? [], null);
        $this->setIfExists('uebernachtungszeitraum_von', $data ?? [], null);
        $this->setIfExists('veranstalter', $data ?? [], null);
        $this->setIfExists('veranstaltungs_nr', $data ?? [], null);
        $this->setIfExists('veranstaltungsanbieter', $data ?? [], null);
        $this->setIfExists('veranstaltungsart', $data ?? [], null);
        $this->setIfExists('veranstaltungsform', $data ?? [], null);
        $this->setIfExists('veranstaltungskategorie', $data ?? [], null);
        $this->setIfExists('veranstaltungsort', $data ?? [], null);
        $this->setIfExists('veranstaltungstermin_nr', $data ?? [], null);
        $this->setIfExists('veranstaltungstyp_id', $data ?? [], null);
        $this->setIfExists('veranstaltungstyp_nr', $data ?? [], null);
        $this->setIfExists('veranstaltungsunterkategorie', $data ?? [], null);
        $this->setIfExists('voraussetzung', $data ?? [], null);
        $this->setIfExists('wartelistenmaximum', $data ?? [], null);
        $this->setIfExists('wbd_relevant', $data ?? [], null);
        $this->setIfExists('wbd_thema', $data ?? [], null);
        $this->setIfExists('ziel', $data ?? [], null);
        $this->setIfExists('zielgruppen', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['oid'] === null) {
            $invalidProperties[] = "'oid' can't be null";
        }
        if ($this->container['termin_bis'] === null) {
            $invalidProperties[] = "'termin_bis' can't be null";
        }
        if ($this->container['termin_von'] === null) {
            $invalidProperties[] = "'termin_von' can't be null";
        }
        if ($this->container['thema'] === null) {
            $invalidProperties[] = "'thema' can't be null";
        }
        if ($this->container['veranstaltungs_nr'] === null) {
            $invalidProperties[] = "'veranstaltungs_nr' can't be null";
        }
        if ($this->container['veranstaltungsart'] === null) {
            $invalidProperties[] = "'veranstaltungsart' can't be null";
        }
        if ($this->container['veranstaltungstyp_id'] === null) {
            $invalidProperties[] = "'veranstaltungstyp_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets oid
     *
     * @return string
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param string $oid UUID des Datensatzes
     *
     * @return self
     */
    public function setOid($oid)
    {
        if (is_null($oid)) {
            throw new \InvalidArgumentException('non-nullable oid cannot be null');
        }
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets anz_teilnehmertage_pro_teilnehmer
     *
     * @return float|null
     */
    public function getAnzTeilnehmertageProTeilnehmer()
    {
        return $this->container['anz_teilnehmertage_pro_teilnehmer'];
    }

    /**
     * Sets anz_teilnehmertage_pro_teilnehmer
     *
     * @param float|null $anz_teilnehmertage_pro_teilnehmer Anzahl Teilnehmertage pro Teilnehmer des Veranstaltungstermins
     *
     * @return self
     */
    public function setAnzTeilnehmertageProTeilnehmer($anz_teilnehmertage_pro_teilnehmer)
    {
        if (is_null($anz_teilnehmertage_pro_teilnehmer)) {
            throw new \InvalidArgumentException('non-nullable anz_teilnehmertage_pro_teilnehmer cannot be null');
        }
        $this->container['anz_teilnehmertage_pro_teilnehmer'] = $anz_teilnehmertage_pro_teilnehmer;

        return $this;
    }

    /**
     * Gets anzahl_freier_plaetze
     *
     * @return int|null
     */
    public function getAnzahlFreierPlaetze()
    {
        return $this->container['anzahl_freier_plaetze'];
    }

    /**
     * Sets anzahl_freier_plaetze
     *
     * @param int|null $anzahl_freier_plaetze Anzahl freier Plätze des Veranstaltungstermins
     *
     * @return self
     */
    public function setAnzahlFreierPlaetze($anzahl_freier_plaetze)
    {
        if (is_null($anzahl_freier_plaetze)) {
            throw new \InvalidArgumentException('non-nullable anzahl_freier_plaetze cannot be null');
        }
        $this->container['anzahl_freier_plaetze'] = $anzahl_freier_plaetze;

        return $this;
    }

    /**
     * Gets anzahl_freier_wartelistenplaetze
     *
     * @return int|null
     */
    public function getAnzahlFreierWartelistenplaetze()
    {
        return $this->container['anzahl_freier_wartelistenplaetze'];
    }

    /**
     * Sets anzahl_freier_wartelistenplaetze
     *
     * @param int|null $anzahl_freier_wartelistenplaetze Anzahl freier Wartelistenplätze des Veranstaltungstermins
     *
     * @return self
     */
    public function setAnzahlFreierWartelistenplaetze($anzahl_freier_wartelistenplaetze)
    {
        if (is_null($anzahl_freier_wartelistenplaetze)) {
            throw new \InvalidArgumentException('non-nullable anzahl_freier_wartelistenplaetze cannot be null');
        }
        $this->container['anzahl_freier_wartelistenplaetze'] = $anzahl_freier_wartelistenplaetze;

        return $this;
    }

    /**
     * Gets anzahl_teilnehmerbuchungen
     *
     * @return int|null
     */
    public function getAnzahlTeilnehmerbuchungen()
    {
        return $this->container['anzahl_teilnehmerbuchungen'];
    }

    /**
     * Sets anzahl_teilnehmerbuchungen
     *
     * @param int|null $anzahl_teilnehmerbuchungen Anzahl Teilnehmerbuchungen des Veranstaltungstermins
     *
     * @return self
     */
    public function setAnzahlTeilnehmerbuchungen($anzahl_teilnehmerbuchungen)
    {
        if (is_null($anzahl_teilnehmerbuchungen)) {
            throw new \InvalidArgumentException('non-nullable anzahl_teilnehmerbuchungen cannot be null');
        }
        $this->container['anzahl_teilnehmerbuchungen'] = $anzahl_teilnehmerbuchungen;

        return $this;
    }

    /**
     * Gets anzahl_ue
     *
     * @return float|null
     */
    public function getAnzahlUe()
    {
        return $this->container['anzahl_ue'];
    }

    /**
     * Sets anzahl_ue
     *
     * @param float|null $anzahl_ue Anzahl der Unterrichtseinheiten des Veranstaltungstermins
     *
     * @return self
     */
    public function setAnzahlUe($anzahl_ue)
    {
        if (is_null($anzahl_ue)) {
            throw new \InvalidArgumentException('non-nullable anzahl_ue cannot be null');
        }
        $this->container['anzahl_ue'] = $anzahl_ue;

        return $this;
    }

    /**
     * Gets anzahl_wartelistenbuchungen
     *
     * @return int|null
     */
    public function getAnzahlWartelistenbuchungen()
    {
        return $this->container['anzahl_wartelistenbuchungen'];
    }

    /**
     * Sets anzahl_wartelistenbuchungen
     *
     * @param int|null $anzahl_wartelistenbuchungen Anzahl Wartelistenbuchungen des Veranstaltungstermins
     *
     * @return self
     */
    public function setAnzahlWartelistenbuchungen($anzahl_wartelistenbuchungen)
    {
        if (is_null($anzahl_wartelistenbuchungen)) {
            throw new \InvalidArgumentException('non-nullable anzahl_wartelistenbuchungen cannot be null');
        }
        $this->container['anzahl_wartelistenbuchungen'] = $anzahl_wartelistenbuchungen;

        return $this;
    }

    /**
     * Gets auslastungsstatus
     *
     * @return string|null
     */
    public function getAuslastungsstatus()
    {
        return $this->container['auslastungsstatus'];
    }

    /**
     * Sets auslastungsstatus
     *
     * @param string|null $auslastungsstatus Auslastungsstatus des Veranstaltungstermins
     *
     * @return self
     */
    public function setAuslastungsstatus($auslastungsstatus)
    {
        if (is_null($auslastungsstatus)) {
            throw new \InvalidArgumentException('non-nullable auslastungsstatus cannot be null');
        }
        $this->container['auslastungsstatus'] = $auslastungsstatus;

        return $this;
    }

    /**
     * Gets beschreibung
     *
     * @return string|null
     */
    public function getBeschreibung()
    {
        return $this->container['beschreibung'];
    }

    /**
     * Sets beschreibung
     *
     * @param string|null $beschreibung Beschreibung des Veranstaltungstermins
     *
     * @return self
     */
    public function setBeschreibung($beschreibung)
    {
        if (is_null($beschreibung)) {
            throw new \InvalidArgumentException('non-nullable beschreibung cannot be null');
        }
        $this->container['beschreibung'] = $beschreibung;

        return $this;
    }

    /**
     * Gets dauer_in_tagen
     *
     * @return float|null
     */
    public function getDauerInTagen()
    {
        return $this->container['dauer_in_tagen'];
    }

    /**
     * Sets dauer_in_tagen
     *
     * @param float|null $dauer_in_tagen Die Dauer in Tagen des Veranstaltungstermins
     *
     * @return self
     */
    public function setDauerInTagen($dauer_in_tagen)
    {
        if (is_null($dauer_in_tagen)) {
            throw new \InvalidArgumentException('non-nullable dauer_in_tagen cannot be null');
        }
        $this->container['dauer_in_tagen'] = $dauer_in_tagen;

        return $this;
    }

    /**
     * Gets dozenten
     *
     * @return \OpenAPI\Client\Model\GebuchterDozentApiDto[]|null
     */
    public function getDozenten()
    {
        return $this->container['dozenten'];
    }

    /**
     * Sets dozenten
     *
     * @param \OpenAPI\Client\Model\GebuchterDozentApiDto[]|null $dozenten Die Dozenten für den Veranstaltungstermin.
     *
     * @return self
     */
    public function setDozenten($dozenten)
    {
        if (is_null($dozenten)) {
            throw new \InvalidArgumentException('non-nullable dozenten cannot be null');
        }
        $this->container['dozenten'] = $dozenten;

        return $this;
    }

    /**
     * Gets fachlicher_ansprechpartner
     *
     * @return \OpenAPI\Client\Model\Fachlicheransprechpartner|null
     */
    public function getFachlicherAnsprechpartner()
    {
        return $this->container['fachlicher_ansprechpartner'];
    }

    /**
     * Sets fachlicher_ansprechpartner
     *
     * @param \OpenAPI\Client\Model\Fachlicheransprechpartner|null $fachlicher_ansprechpartner fachlicher_ansprechpartner
     *
     * @return self
     */
    public function setFachlicherAnsprechpartner($fachlicher_ansprechpartner)
    {
        if (is_null($fachlicher_ansprechpartner)) {
            throw new \InvalidArgumentException('non-nullable fachlicher_ansprechpartner cannot be null');
        }
        $this->container['fachlicher_ansprechpartner'] = $fachlicher_ansprechpartner;

        return $this;
    }

    /**
     * Gets geschlossen
     *
     * @return bool|null
     */
    public function getGeschlossen()
    {
        return $this->container['geschlossen'];
    }

    /**
     * Sets geschlossen
     *
     * @param bool|null $geschlossen Gibt an, ob der Veranstaltungstermin geschlossen ist.
     *
     * @return self
     */
    public function setGeschlossen($geschlossen)
    {
        if (is_null($geschlossen)) {
            throw new \InvalidArgumentException('non-nullable geschlossen cannot be null');
        }
        $this->container['geschlossen'] = $geschlossen;

        return $this;
    }

    /**
     * Gets hinweise
     *
     * @return string|null
     */
    public function getHinweise()
    {
        return $this->container['hinweise'];
    }

    /**
     * Sets hinweise
     *
     * @param string|null $hinweise Hinweise zum Veranstaltungstermin
     *
     * @return self
     */
    public function setHinweise($hinweise)
    {
        if (is_null($hinweise)) {
            throw new \InvalidArgumentException('non-nullable hinweise cannot be null');
        }
        $this->container['hinweise'] = $hinweise;

        return $this;
    }

    /**
     * Gets inhalt
     *
     * @return string|null
     */
    public function getInhalt()
    {
        return $this->container['inhalt'];
    }

    /**
     * Sets inhalt
     *
     * @param string|null $inhalt Inhalte  des Veranstaltungstermins
     *
     * @return self
     */
    public function setInhalt($inhalt)
    {
        if (is_null($inhalt)) {
            throw new \InvalidArgumentException('non-nullable inhalt cannot be null');
        }
        $this->container['inhalt'] = $inhalt;

        return $this;
    }

    /**
     * Gets kategorien
     *
     * @return \OpenAPI\Client\Model\KategorieUndUnterkategorieApiDto[]|null
     */
    public function getKategorien()
    {
        return $this->container['kategorien'];
    }

    /**
     * Sets kategorien
     *
     * @param \OpenAPI\Client\Model\KategorieUndUnterkategorieApiDto[]|null $kategorien Die Liste der Kategorien, die dem Veranstaltungstermin zugeordnet sind.
     *
     * @return self
     */
    public function setKategorien($kategorien)
    {
        if (is_null($kategorien)) {
            throw new \InvalidArgumentException('non-nullable kategorien cannot be null');
        }
        $this->container['kategorien'] = $kategorien;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\Link[]|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\Link[]|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets max_anzahl_teilnehmer_pro_buchungsanfrage
     *
     * @return int|null
     */
    public function getMaxAnzahlTeilnehmerProBuchungsanfrage()
    {
        return $this->container['max_anzahl_teilnehmer_pro_buchungsanfrage'];
    }

    /**
     * Sets max_anzahl_teilnehmer_pro_buchungsanfrage
     *
     * @param int|null $max_anzahl_teilnehmer_pro_buchungsanfrage Maximale Anzahl Teilnehmer pro Buchungsanfrage des Veranstaltungstermins.
     *
     * @return self
     */
    public function setMaxAnzahlTeilnehmerProBuchungsanfrage($max_anzahl_teilnehmer_pro_buchungsanfrage)
    {
        if (is_null($max_anzahl_teilnehmer_pro_buchungsanfrage)) {
            throw new \InvalidArgumentException('non-nullable max_anzahl_teilnehmer_pro_buchungsanfrage cannot be null');
        }
        $this->container['max_anzahl_teilnehmer_pro_buchungsanfrage'] = $max_anzahl_teilnehmer_pro_buchungsanfrage;

        return $this;
    }

    /**
     * Gets methodik
     *
     * @return string|null
     */
    public function getMethodik()
    {
        return $this->container['methodik'];
    }

    /**
     * Sets methodik
     *
     * @param string|null $methodik Methodik des Veranstaltungstermins
     *
     * @return self
     */
    public function setMethodik($methodik)
    {
        if (is_null($methodik)) {
            throw new \InvalidArgumentException('non-nullable methodik cannot be null');
        }
        $this->container['methodik'] = $methodik;

        return $this;
    }

    /**
     * Gets ort_vorgesehener_veranstaltungsort
     *
     * @return string|null
     */
    public function getOrtVorgesehenerVeranstaltungsort()
    {
        return $this->container['ort_vorgesehener_veranstaltungsort'];
    }

    /**
     * Sets ort_vorgesehener_veranstaltungsort
     *
     * @param string|null $ort_vorgesehener_veranstaltungsort Ort des vorgesehenen Veranstaltungsortes des Veranstaltungstermins.
     *
     * @return self
     */
    public function setOrtVorgesehenerVeranstaltungsort($ort_vorgesehener_veranstaltungsort)
    {
        if (is_null($ort_vorgesehener_veranstaltungsort)) {
            throw new \InvalidArgumentException('non-nullable ort_vorgesehener_veranstaltungsort cannot be null');
        }
        $this->container['ort_vorgesehener_veranstaltungsort'] = $ort_vorgesehener_veranstaltungsort;

        return $this;
    }

    /**
     * Gets plz_vorgesehener_veranstaltungsort
     *
     * @return string|null
     */
    public function getPlzVorgesehenerVeranstaltungsort()
    {
        return $this->container['plz_vorgesehener_veranstaltungsort'];
    }

    /**
     * Sets plz_vorgesehener_veranstaltungsort
     *
     * @param string|null $plz_vorgesehener_veranstaltungsort PLZ des vorgesehenen Veranstaltungsortes des Veranstaltungstermins.
     *
     * @return self
     */
    public function setPlzVorgesehenerVeranstaltungsort($plz_vorgesehener_veranstaltungsort)
    {
        if (is_null($plz_vorgesehener_veranstaltungsort)) {
            throw new \InvalidArgumentException('non-nullable plz_vorgesehener_veranstaltungsort cannot be null');
        }
        $this->container['plz_vorgesehener_veranstaltungsort'] = $plz_vorgesehener_veranstaltungsort;

        return $this;
    }

    /**
     * Gets preis
     *
     * @return float|null
     */
    public function getPreis()
    {
        return $this->container['preis'];
    }

    /**
     * Sets preis
     *
     * @param float|null $preis Der Standardpreis des Veranstaltungstermins.
     *
     * @return self
     */
    public function setPreis($preis)
    {
        if (is_null($preis)) {
            throw new \InvalidArgumentException('non-nullable preis cannot be null');
        }
        $this->container['preis'] = $preis;

        return $this;
    }

    /**
     * Gets preise_je_teilnehmergruppe
     *
     * @return \OpenAPI\Client\Model\TeilnehmergruppePreis[]|null
     */
    public function getPreiseJeTeilnehmergruppe()
    {
        return $this->container['preise_je_teilnehmergruppe'];
    }

    /**
     * Sets preise_je_teilnehmergruppe
     *
     * @param \OpenAPI\Client\Model\TeilnehmergruppePreis[]|null $preise_je_teilnehmergruppe Die Preise je nach Teilnehmergruppe des Veranstaltungstermins.
     *
     * @return self
     */
    public function setPreiseJeTeilnehmergruppe($preise_je_teilnehmergruppe)
    {
        if (is_null($preise_je_teilnehmergruppe)) {
            throw new \InvalidArgumentException('non-nullable preise_je_teilnehmergruppe cannot be null');
        }
        $this->container['preise_je_teilnehmergruppe'] = $preise_je_teilnehmergruppe;

        return $this;
    }

    /**
     * Gets reg_uhrzeit_bis
     *
     * @return string|null
     */
    public function getRegUhrzeitBis()
    {
        return $this->container['reg_uhrzeit_bis'];
    }

    /**
     * Sets reg_uhrzeit_bis
     *
     * @param string|null $reg_uhrzeit_bis Reguläres Ende des Veranstaltungstermins
     *
     * @return self
     */
    public function setRegUhrzeitBis($reg_uhrzeit_bis)
    {
        if (is_null($reg_uhrzeit_bis)) {
            throw new \InvalidArgumentException('non-nullable reg_uhrzeit_bis cannot be null');
        }
        $this->container['reg_uhrzeit_bis'] = $reg_uhrzeit_bis;

        return $this;
    }

    /**
     * Gets reg_uhrzeit_von
     *
     * @return string|null
     */
    public function getRegUhrzeitVon()
    {
        return $this->container['reg_uhrzeit_von'];
    }

    /**
     * Sets reg_uhrzeit_von
     *
     * @param string|null $reg_uhrzeit_von Reguläre Startzeit des Veranstaltungstermins
     *
     * @return self
     */
    public function setRegUhrzeitVon($reg_uhrzeit_von)
    {
        if (is_null($reg_uhrzeit_von)) {
            throw new \InvalidArgumentException('non-nullable reg_uhrzeit_von cannot be null');
        }
        $this->container['reg_uhrzeit_von'] = $reg_uhrzeit_von;

        return $this;
    }

    /**
     * Gets sachbearbeiter
     *
     * @return \OpenAPI\Client\Model\Sachbearbeiter|null
     */
    public function getSachbearbeiter()
    {
        return $this->container['sachbearbeiter'];
    }

    /**
     * Sets sachbearbeiter
     *
     * @param \OpenAPI\Client\Model\Sachbearbeiter|null $sachbearbeiter sachbearbeiter
     *
     * @return self
     */
    public function setSachbearbeiter($sachbearbeiter)
    {
        if (is_null($sachbearbeiter)) {
            throw new \InvalidArgumentException('non-nullable sachbearbeiter cannot be null');
        }
        $this->container['sachbearbeiter'] = $sachbearbeiter;

        return $this;
    }

    /**
     * Gets schlagwoerter
     *
     * @return \OpenAPI\Client\Model\Schlagwort[]|null
     */
    public function getSchlagwoerter()
    {
        return $this->container['schlagwoerter'];
    }

    /**
     * Sets schlagwoerter
     *
     * @param \OpenAPI\Client\Model\Schlagwort[]|null $schlagwoerter Die Schlagwörter für den Veranstaltungstermin.
     *
     * @return self
     */
    public function setSchlagwoerter($schlagwoerter)
    {
        if (is_null($schlagwoerter)) {
            throw new \InvalidArgumentException('non-nullable schlagwoerter cannot be null');
        }
        $this->container['schlagwoerter'] = $schlagwoerter;

        return $this;
    }

    /**
     * Gets sprache
     *
     * @return string|null
     */
    public function getSprache()
    {
        return $this->container['sprache'];
    }

    /**
     * Sets sprache
     *
     * @param string|null $sprache Die Sprache, in der der Veranstaltungstermin durchgeführt wird.
     *
     * @return self
     */
    public function setSprache($sprache)
    {
        if (is_null($sprache)) {
            throw new \InvalidArgumentException('non-nullable sprache cannot be null');
        }
        $this->container['sprache'] = $sprache;

        return $this;
    }

    /**
     * Gets standardzahlungsbedingung
     *
     * @return \OpenAPI\Client\Model\Zahlungsbedingung|null
     */
    public function getStandardzahlungsbedingung()
    {
        return $this->container['standardzahlungsbedingung'];
    }

    /**
     * Sets standardzahlungsbedingung
     *
     * @param \OpenAPI\Client\Model\Zahlungsbedingung|null $standardzahlungsbedingung standardzahlungsbedingung
     *
     * @return self
     */
    public function setStandardzahlungsbedingung($standardzahlungsbedingung)
    {
        if (is_null($standardzahlungsbedingung)) {
            throw new \InvalidArgumentException('non-nullable standardzahlungsbedingung cannot be null');
        }
        $this->container['standardzahlungsbedingung'] = $standardzahlungsbedingung;

        return $this;
    }

    /**
     * Gets teilnehmermaximum
     *
     * @return int|null
     */
    public function getTeilnehmermaximum()
    {
        return $this->container['teilnehmermaximum'];
    }

    /**
     * Sets teilnehmermaximum
     *
     * @param int|null $teilnehmermaximum Teilnehmermaximum des Veranstaltungstermins
     *
     * @return self
     */
    public function setTeilnehmermaximum($teilnehmermaximum)
    {
        if (is_null($teilnehmermaximum)) {
            throw new \InvalidArgumentException('non-nullable teilnehmermaximum cannot be null');
        }
        $this->container['teilnehmermaximum'] = $teilnehmermaximum;

        return $this;
    }

    /**
     * Gets teilnehmerminimum
     *
     * @return int|null
     */
    public function getTeilnehmerminimum()
    {
        return $this->container['teilnehmerminimum'];
    }

    /**
     * Sets teilnehmerminimum
     *
     * @param int|null $teilnehmerminimum Teilnehmerminimum des Veranstaltungstermins
     *
     * @return self
     */
    public function setTeilnehmerminimum($teilnehmerminimum)
    {
        if (is_null($teilnehmerminimum)) {
            throw new \InvalidArgumentException('non-nullable teilnehmerminimum cannot be null');
        }
        $this->container['teilnehmerminimum'] = $teilnehmerminimum;

        return $this;
    }

    /**
     * Gets termin_bis
     *
     * @return \DateTime
     */
    public function getTerminBis()
    {
        return $this->container['termin_bis'];
    }

    /**
     * Sets termin_bis
     *
     * @param \DateTime $termin_bis 'Termin bis' des Veranstaltungstermins
     *
     * @return self
     */
    public function setTerminBis($termin_bis)
    {
        if (is_null($termin_bis)) {
            throw new \InvalidArgumentException('non-nullable termin_bis cannot be null');
        }
        $this->container['termin_bis'] = $termin_bis;

        return $this;
    }

    /**
     * Gets termin_von
     *
     * @return \DateTime
     */
    public function getTerminVon()
    {
        return $this->container['termin_von'];
    }

    /**
     * Sets termin_von
     *
     * @param \DateTime $termin_von 'Termin von' des Veranstaltungstermins
     *
     * @return self
     */
    public function setTerminVon($termin_von)
    {
        if (is_null($termin_von)) {
            throw new \InvalidArgumentException('non-nullable termin_von cannot be null');
        }
        $this->container['termin_von'] = $termin_von;

        return $this;
    }

    /**
     * Gets thema
     *
     * @return string
     */
    public function getThema()
    {
        return $this->container['thema'];
    }

    /**
     * Sets thema
     *
     * @param string $thema Das Thema des Veranstaltungstermins.
     *
     * @return self
     */
    public function setThema($thema)
    {
        if (is_null($thema)) {
            throw new \InvalidArgumentException('non-nullable thema cannot be null');
        }
        $this->container['thema'] = $thema;

        return $this;
    }

    /**
     * Gets thema2
     *
     * @return string|null
     */
    public function getThema2()
    {
        return $this->container['thema2'];
    }

    /**
     * Sets thema2
     *
     * @param string|null $thema2 Thema 2 des Veranstaltungstermins.
     *
     * @return self
     */
    public function setThema2($thema2)
    {
        if (is_null($thema2)) {
            throw new \InvalidArgumentException('non-nullable thema2 cannot be null');
        }
        $this->container['thema2'] = $thema2;

        return $this;
    }

    /**
     * Gets uebernachtung_vorgesehen
     *
     * @return string|null
     */
    public function getUebernachtungVorgesehen()
    {
        return $this->container['uebernachtung_vorgesehen'];
    }

    /**
     * Sets uebernachtung_vorgesehen
     *
     * @param string|null $uebernachtung_vorgesehen Gibt an, ob für den Veranstaltungstermin eine Übernachtung vorgesehen ist.
     *
     * @return self
     */
    public function setUebernachtungVorgesehen($uebernachtung_vorgesehen)
    {
        if (is_null($uebernachtung_vorgesehen)) {
            throw new \InvalidArgumentException('non-nullable uebernachtung_vorgesehen cannot be null');
        }
        $this->container['uebernachtung_vorgesehen'] = $uebernachtung_vorgesehen;

        return $this;
    }

    /**
     * Gets uebernachtungsort
     *
     * @return \OpenAPI\Client\Model\Uebernachtungsort|null
     */
    public function getUebernachtungsort()
    {
        return $this->container['uebernachtungsort'];
    }

    /**
     * Sets uebernachtungsort
     *
     * @param \OpenAPI\Client\Model\Uebernachtungsort|null $uebernachtungsort uebernachtungsort
     *
     * @return self
     */
    public function setUebernachtungsort($uebernachtungsort)
    {
        if (is_null($uebernachtungsort)) {
            throw new \InvalidArgumentException('non-nullable uebernachtungsort cannot be null');
        }
        $this->container['uebernachtungsort'] = $uebernachtungsort;

        return $this;
    }

    /**
     * Gets uebernachtungszeitraum_bis
     *
     * @return \DateTime|null
     */
    public function getUebernachtungszeitraumBis()
    {
        return $this->container['uebernachtungszeitraum_bis'];
    }

    /**
     * Sets uebernachtungszeitraum_bis
     *
     * @param \DateTime|null $uebernachtungszeitraum_bis Bis-Datum des Übernachtungszeitraums des Veranstaltungstermins.
     *
     * @return self
     */
    public function setUebernachtungszeitraumBis($uebernachtungszeitraum_bis)
    {
        if (is_null($uebernachtungszeitraum_bis)) {
            throw new \InvalidArgumentException('non-nullable uebernachtungszeitraum_bis cannot be null');
        }
        $this->container['uebernachtungszeitraum_bis'] = $uebernachtungszeitraum_bis;

        return $this;
    }

    /**
     * Gets uebernachtungszeitraum_von
     *
     * @return \DateTime|null
     */
    public function getUebernachtungszeitraumVon()
    {
        return $this->container['uebernachtungszeitraum_von'];
    }

    /**
     * Sets uebernachtungszeitraum_von
     *
     * @param \DateTime|null $uebernachtungszeitraum_von Von-Datum des Übernachtungszeitraums des Veranstaltungstermins.
     *
     * @return self
     */
    public function setUebernachtungszeitraumVon($uebernachtungszeitraum_von)
    {
        if (is_null($uebernachtungszeitraum_von)) {
            throw new \InvalidArgumentException('non-nullable uebernachtungszeitraum_von cannot be null');
        }
        $this->container['uebernachtungszeitraum_von'] = $uebernachtungszeitraum_von;

        return $this;
    }

    /**
     * Gets veranstalter
     *
     * @return \OpenAPI\Client\Model\Veranstalter|null
     */
    public function getVeranstalter()
    {
        return $this->container['veranstalter'];
    }

    /**
     * Sets veranstalter
     *
     * @param \OpenAPI\Client\Model\Veranstalter|null $veranstalter veranstalter
     *
     * @return self
     */
    public function setVeranstalter($veranstalter)
    {
        if (is_null($veranstalter)) {
            throw new \InvalidArgumentException('non-nullable veranstalter cannot be null');
        }
        $this->container['veranstalter'] = $veranstalter;

        return $this;
    }

    /**
     * Gets veranstaltungs_nr
     *
     * @return string
     */
    public function getVeranstaltungsNr()
    {
        return $this->container['veranstaltungs_nr'];
    }

    /**
     * Sets veranstaltungs_nr
     *
     * @param string $veranstaltungs_nr Die Veranstaltungs-Nr. des Veranstaltungstermins.
     *
     * @return self
     */
    public function setVeranstaltungsNr($veranstaltungs_nr)
    {
        if (is_null($veranstaltungs_nr)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungs_nr cannot be null');
        }
        $this->container['veranstaltungs_nr'] = $veranstaltungs_nr;

        return $this;
    }

    /**
     * Gets veranstaltungsanbieter
     *
     * @return \OpenAPI\Client\Model\Veranstaltungsanbieter|null
     */
    public function getVeranstaltungsanbieter()
    {
        return $this->container['veranstaltungsanbieter'];
    }

    /**
     * Sets veranstaltungsanbieter
     *
     * @param \OpenAPI\Client\Model\Veranstaltungsanbieter|null $veranstaltungsanbieter veranstaltungsanbieter
     *
     * @return self
     */
    public function setVeranstaltungsanbieter($veranstaltungsanbieter)
    {
        if (is_null($veranstaltungsanbieter)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungsanbieter cannot be null');
        }
        $this->container['veranstaltungsanbieter'] = $veranstaltungsanbieter;

        return $this;
    }

    /**
     * Gets veranstaltungsart
     *
     * @return string
     */
    public function getVeranstaltungsart()
    {
        return $this->container['veranstaltungsart'];
    }

    /**
     * Sets veranstaltungsart
     *
     * @param string $veranstaltungsart Veranstaltungsart des Veranstaltungstermins, zulässig sind hier VIRTUELL für Virtuell und PRAESENZ für Präsenz.
     *
     * @return self
     */
    public function setVeranstaltungsart($veranstaltungsart)
    {
        if (is_null($veranstaltungsart)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungsart cannot be null');
        }
        $this->container['veranstaltungsart'] = $veranstaltungsart;

        return $this;
    }

    /**
     * Gets veranstaltungsform
     *
     * @return \OpenAPI\Client\Model\Veranstaltungsform|null
     */
    public function getVeranstaltungsform()
    {
        return $this->container['veranstaltungsform'];
    }

    /**
     * Sets veranstaltungsform
     *
     * @param \OpenAPI\Client\Model\Veranstaltungsform|null $veranstaltungsform veranstaltungsform
     *
     * @return self
     */
    public function setVeranstaltungsform($veranstaltungsform)
    {
        if (is_null($veranstaltungsform)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungsform cannot be null');
        }
        $this->container['veranstaltungsform'] = $veranstaltungsform;

        return $this;
    }

    /**
     * Gets veranstaltungskategorie
     *
     * @return \OpenAPI\Client\Model\Veranstaltungskategorie|null
     */
    public function getVeranstaltungskategorie()
    {
        return $this->container['veranstaltungskategorie'];
    }

    /**
     * Sets veranstaltungskategorie
     *
     * @param \OpenAPI\Client\Model\Veranstaltungskategorie|null $veranstaltungskategorie veranstaltungskategorie
     *
     * @return self
     */
    public function setVeranstaltungskategorie($veranstaltungskategorie)
    {
        if (is_null($veranstaltungskategorie)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungskategorie cannot be null');
        }
        $this->container['veranstaltungskategorie'] = $veranstaltungskategorie;

        return $this;
    }

    /**
     * Gets veranstaltungsort
     *
     * @return \OpenAPI\Client\Model\Veranstaltungsort|null
     */
    public function getVeranstaltungsort()
    {
        return $this->container['veranstaltungsort'];
    }

    /**
     * Sets veranstaltungsort
     *
     * @param \OpenAPI\Client\Model\Veranstaltungsort|null $veranstaltungsort veranstaltungsort
     *
     * @return self
     */
    public function setVeranstaltungsort($veranstaltungsort)
    {
        if (is_null($veranstaltungsort)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungsort cannot be null');
        }
        $this->container['veranstaltungsort'] = $veranstaltungsort;

        return $this;
    }

    /**
     * Gets veranstaltungstermin_nr
     *
     * @return string|null
     */
    public function getVeranstaltungsterminNr()
    {
        return $this->container['veranstaltungstermin_nr'];
    }

    /**
     * Sets veranstaltungstermin_nr
     *
     * @param string|null $veranstaltungstermin_nr Die Veranstaltungstermin-Nr des Termins.
     *
     * @return self
     */
    public function setVeranstaltungsterminNr($veranstaltungstermin_nr)
    {
        if (is_null($veranstaltungstermin_nr)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungstermin_nr cannot be null');
        }
        $this->container['veranstaltungstermin_nr'] = $veranstaltungstermin_nr;

        return $this;
    }

    /**
     * Gets veranstaltungstyp_id
     *
     * @return string
     */
    public function getVeranstaltungstypId()
    {
        return $this->container['veranstaltungstyp_id'];
    }

    /**
     * Sets veranstaltungstyp_id
     *
     * @param string $veranstaltungstyp_id Die ID des Veranstaltungstyps des Veranstaltungstermins.
     *
     * @return self
     */
    public function setVeranstaltungstypId($veranstaltungstyp_id)
    {
        if (is_null($veranstaltungstyp_id)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungstyp_id cannot be null');
        }
        $this->container['veranstaltungstyp_id'] = $veranstaltungstyp_id;

        return $this;
    }

    /**
     * Gets veranstaltungstyp_nr
     *
     * @return string|null
     */
    public function getVeranstaltungstypNr()
    {
        return $this->container['veranstaltungstyp_nr'];
    }

    /**
     * Sets veranstaltungstyp_nr
     *
     * @param string|null $veranstaltungstyp_nr Die Veranstaltungs-Nr aus dem Veranstaltungstypen des Termins.
     *
     * @return self
     */
    public function setVeranstaltungstypNr($veranstaltungstyp_nr)
    {
        if (is_null($veranstaltungstyp_nr)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungstyp_nr cannot be null');
        }
        $this->container['veranstaltungstyp_nr'] = $veranstaltungstyp_nr;

        return $this;
    }

    /**
     * Gets veranstaltungsunterkategorie
     *
     * @return \OpenAPI\Client\Model\Veranstaltungsunterkategorie|null
     */
    public function getVeranstaltungsunterkategorie()
    {
        return $this->container['veranstaltungsunterkategorie'];
    }

    /**
     * Sets veranstaltungsunterkategorie
     *
     * @param \OpenAPI\Client\Model\Veranstaltungsunterkategorie|null $veranstaltungsunterkategorie veranstaltungsunterkategorie
     *
     * @return self
     */
    public function setVeranstaltungsunterkategorie($veranstaltungsunterkategorie)
    {
        if (is_null($veranstaltungsunterkategorie)) {
            throw new \InvalidArgumentException('non-nullable veranstaltungsunterkategorie cannot be null');
        }
        $this->container['veranstaltungsunterkategorie'] = $veranstaltungsunterkategorie;

        return $this;
    }

    /**
     * Gets voraussetzung
     *
     * @return string|null
     */
    public function getVoraussetzung()
    {
        return $this->container['voraussetzung'];
    }

    /**
     * Sets voraussetzung
     *
     * @param string|null $voraussetzung Voraussetzungen  des Veranstaltungstermins
     *
     * @return self
     */
    public function setVoraussetzung($voraussetzung)
    {
        if (is_null($voraussetzung)) {
            throw new \InvalidArgumentException('non-nullable voraussetzung cannot be null');
        }
        $this->container['voraussetzung'] = $voraussetzung;

        return $this;
    }

    /**
     * Gets wartelistenmaximum
     *
     * @return int|null
     */
    public function getWartelistenmaximum()
    {
        return $this->container['wartelistenmaximum'];
    }

    /**
     * Sets wartelistenmaximum
     *
     * @param int|null $wartelistenmaximum Wartelistenmaximum des Veranstaltungstermins
     *
     * @return self
     */
    public function setWartelistenmaximum($wartelistenmaximum)
    {
        if (is_null($wartelistenmaximum)) {
            throw new \InvalidArgumentException('non-nullable wartelistenmaximum cannot be null');
        }
        $this->container['wartelistenmaximum'] = $wartelistenmaximum;

        return $this;
    }

    /**
     * Gets wbd_relevant
     *
     * @return bool|null
     */
    public function getWbdRelevant()
    {
        return $this->container['wbd_relevant'];
    }

    /**
     * Sets wbd_relevant
     *
     * @param bool|null $wbd_relevant Flag der Veranstaltungstermins WBD relevant ist oder nicht
     *
     * @return self
     */
    public function setWbdRelevant($wbd_relevant)
    {
        if (is_null($wbd_relevant)) {
            throw new \InvalidArgumentException('non-nullable wbd_relevant cannot be null');
        }
        $this->container['wbd_relevant'] = $wbd_relevant;

        return $this;
    }

    /**
     * Gets wbd_thema
     *
     * @return string|null
     */
    public function getWbdThema()
    {
        return $this->container['wbd_thema'];
    }

    /**
     * Sets wbd_thema
     *
     * @param string|null $wbd_thema WBD Thema des Veranstaltungstermins
     *
     * @return self
     */
    public function setWbdThema($wbd_thema)
    {
        if (is_null($wbd_thema)) {
            throw new \InvalidArgumentException('non-nullable wbd_thema cannot be null');
        }
        $this->container['wbd_thema'] = $wbd_thema;

        return $this;
    }

    /**
     * Gets ziel
     *
     * @return string|null
     */
    public function getZiel()
    {
        return $this->container['ziel'];
    }

    /**
     * Sets ziel
     *
     * @param string|null $ziel Ziele  des Veranstaltungstermins
     *
     * @return self
     */
    public function setZiel($ziel)
    {
        if (is_null($ziel)) {
            throw new \InvalidArgumentException('non-nullable ziel cannot be null');
        }
        $this->container['ziel'] = $ziel;

        return $this;
    }

    /**
     * Gets zielgruppen
     *
     * @return \OpenAPI\Client\Model\Zielgruppe[]|null
     */
    public function getZielgruppen()
    {
        return $this->container['zielgruppen'];
    }

    /**
     * Sets zielgruppen
     *
     * @param \OpenAPI\Client\Model\Zielgruppe[]|null $zielgruppen Die Zielgruppen für den Veranstaltungstermin.
     *
     * @return self
     */
    public function setZielgruppen($zielgruppen)
    {
        if (is_null($zielgruppen)) {
            throw new \InvalidArgumentException('non-nullable zielgruppen cannot be null');
        }
        $this->container['zielgruppen'] = $zielgruppen;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


