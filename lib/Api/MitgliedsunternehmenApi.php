<?php
/**
 * MitgliedsunternehmenApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers für die Version 2. Die Dokumentation zu speziellen Versionen kann über die Angabe des zusätzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 für die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * The version of the OpenAPI document: 2
 * Contact: info@veda.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * MitgliedsunternehmenApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MitgliedsunternehmenApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET' => [
            'application/json',
        ],
        'existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET' => [
            'application/json',
        ],
        'existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET' => [
            'application/json',
        ],
        'getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET' => [
            'application/json',
        ],
        'getMitgliedsunternehmenByBetriebsstaettennummerUsingGET' => [
            'application/json',
        ],
        'getMitgliedsunternehmenByMitgliedsnummerUsingGET' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET
     *
     * Ermittelt, ob ein anmeldeaktives Mitgliedsunternehmen mit der angegebenen Betriebsstättennummer existiert
     *
     * @param  string $betriebsstaettennummer 12-stellige Betriebsstättennummer des Mitgliedsunternehmens. Diese entspricht der bisherigen Mitgliedsnummer, inklusive dem 4-stelligen Betriebsstättenanteil. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,bool>
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET($betriebsstaettennummer, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET'][0])
    {
        list($response) = $this->existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGETWithHttpInfo($betriebsstaettennummer, $contentType);
        return $response;
    }

    /**
     * Operation existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGETWithHttpInfo
     *
     * Ermittelt, ob ein anmeldeaktives Mitgliedsunternehmen mit der angegebenen Betriebsstättennummer existiert
     *
     * @param  string $betriebsstaettennummer 12-stellige Betriebsstättennummer des Mitgliedsunternehmens. Diese entspricht der bisherigen Mitgliedsnummer, inklusive dem 4-stelligen Betriebsstättenanteil. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,bool>, HTTP status code, HTTP response headers (array of strings)
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGETWithHttpInfo($betriebsstaettennummer, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET'][0])
    {
        $request = $this->existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGETRequest($betriebsstaettennummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,bool>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,bool>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,bool>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,bool>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,bool>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGETAsync
     *
     * Ermittelt, ob ein anmeldeaktives Mitgliedsunternehmen mit der angegebenen Betriebsstättennummer existiert
     *
     * @param  string $betriebsstaettennummer 12-stellige Betriebsstättennummer des Mitgliedsunternehmens. Diese entspricht der bisherigen Mitgliedsnummer, inklusive dem 4-stelligen Betriebsstättenanteil. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGETAsync($betriebsstaettennummer, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET'][0])
    {
        return $this->existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGETAsyncWithHttpInfo($betriebsstaettennummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGETAsyncWithHttpInfo
     *
     * Ermittelt, ob ein anmeldeaktives Mitgliedsunternehmen mit der angegebenen Betriebsstättennummer existiert
     *
     * @param  string $betriebsstaettennummer 12-stellige Betriebsstättennummer des Mitgliedsunternehmens. Diese entspricht der bisherigen Mitgliedsnummer, inklusive dem 4-stelligen Betriebsstättenanteil. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGETAsyncWithHttpInfo($betriebsstaettennummer, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET'][0])
    {
        $returnType = 'array<string,bool>';
        $request = $this->existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGETRequest($betriebsstaettennummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET'
     *
     * @param  string $betriebsstaettennummer 12-stellige Betriebsstättennummer des Mitgliedsunternehmens. Diese entspricht der bisherigen Mitgliedsnummer, inklusive dem 4-stelligen Betriebsstättenanteil. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGETRequest($betriebsstaettennummer, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET'][0])
    {

        // verify the required parameter 'betriebsstaettennummer' is set
        if ($betriebsstaettennummer === null || (is_array($betriebsstaettennummer) && count($betriebsstaettennummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betriebsstaettennummer when calling existiertEinAnmeldeAktivesMitgliedsunternehmenPerBetriebsstaettennummerUsingGET'
            );
        }


        $resourcePath = '/v2/20010/mitgliedsunternehmen/existiert/betriebsstaettennummer/{betriebsstaettennummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($betriebsstaettennummer !== null) {
            $resourcePath = str_replace(
                '{' . 'betriebsstaettennummer' . '}',
                ObjectSerializer::toPathValue($betriebsstaettennummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET
     *
     * Ermittelt, ob ein anmeldeaktives Mitgliedsunternehmen mit der angegebenen Mitgliedsnummer existiert
     *
     * @param  string $mitgliedsnummer Mitgliedsnummer des Mitgliedsunternehmens ohne Betriebsstättenanteil (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,bool>
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET($mitgliedsnummer, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET'][0])
    {
        list($response) = $this->existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGETWithHttpInfo($mitgliedsnummer, $contentType);
        return $response;
    }

    /**
     * Operation existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGETWithHttpInfo
     *
     * Ermittelt, ob ein anmeldeaktives Mitgliedsunternehmen mit der angegebenen Mitgliedsnummer existiert
     *
     * @param  string $mitgliedsnummer Mitgliedsnummer des Mitgliedsunternehmens ohne Betriebsstättenanteil (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,bool>, HTTP status code, HTTP response headers (array of strings)
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGETWithHttpInfo($mitgliedsnummer, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET'][0])
    {
        $request = $this->existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGETRequest($mitgliedsnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,bool>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,bool>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,bool>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,bool>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,bool>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGETAsync
     *
     * Ermittelt, ob ein anmeldeaktives Mitgliedsunternehmen mit der angegebenen Mitgliedsnummer existiert
     *
     * @param  string $mitgliedsnummer Mitgliedsnummer des Mitgliedsunternehmens ohne Betriebsstättenanteil (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGETAsync($mitgliedsnummer, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET'][0])
    {
        return $this->existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGETAsyncWithHttpInfo($mitgliedsnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGETAsyncWithHttpInfo
     *
     * Ermittelt, ob ein anmeldeaktives Mitgliedsunternehmen mit der angegebenen Mitgliedsnummer existiert
     *
     * @param  string $mitgliedsnummer Mitgliedsnummer des Mitgliedsunternehmens ohne Betriebsstättenanteil (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGETAsyncWithHttpInfo($mitgliedsnummer, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET'][0])
    {
        $returnType = 'array<string,bool>';
        $request = $this->existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGETRequest($mitgliedsnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET'
     *
     * @param  string $mitgliedsnummer Mitgliedsnummer des Mitgliedsunternehmens ohne Betriebsstättenanteil (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGETRequest($mitgliedsnummer, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET'][0])
    {

        // verify the required parameter 'mitgliedsnummer' is set
        if ($mitgliedsnummer === null || (is_array($mitgliedsnummer) && count($mitgliedsnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mitgliedsnummer when calling existiertEinAnmeldeAktivesMitgliedsunternehmenPerMitgliedsnummerUsingGET'
            );
        }


        $resourcePath = '/v2/20010/mitgliedsunternehmen/existiert/mitgliedsnummer/{mitgliedsnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mitgliedsnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'mitgliedsnummer' . '}',
                ObjectSerializer::toPathValue($mitgliedsnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET
     *
     * Ermittelt, ob mindestens ein anmeldeaktives Mitgliedsunternehmen mit der angegebenen Unternehmensnummer existiert
     *
     * @param  string $unternehmensnummer Unternehmensnummer des Mitgliedsunternehmens (required)
     * @param  string $plz Optional die PLZ zur weiteren Einschränkung der zurück zuliefernden Mitgliedsunternehmen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,bool>
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET($unternehmensnummer, $plz = null, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET'][0])
    {
        list($response) = $this->existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGETWithHttpInfo($unternehmensnummer, $plz, $contentType);
        return $response;
    }

    /**
     * Operation existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGETWithHttpInfo
     *
     * Ermittelt, ob mindestens ein anmeldeaktives Mitgliedsunternehmen mit der angegebenen Unternehmensnummer existiert
     *
     * @param  string $unternehmensnummer Unternehmensnummer des Mitgliedsunternehmens (required)
     * @param  string $plz Optional die PLZ zur weiteren Einschränkung der zurück zuliefernden Mitgliedsunternehmen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,bool>, HTTP status code, HTTP response headers (array of strings)
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGETWithHttpInfo($unternehmensnummer, $plz = null, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET'][0])
    {
        $request = $this->existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGETRequest($unternehmensnummer, $plz, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,bool>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,bool>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,bool>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,bool>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,bool>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGETAsync
     *
     * Ermittelt, ob mindestens ein anmeldeaktives Mitgliedsunternehmen mit der angegebenen Unternehmensnummer existiert
     *
     * @param  string $unternehmensnummer Unternehmensnummer des Mitgliedsunternehmens (required)
     * @param  string $plz Optional die PLZ zur weiteren Einschränkung der zurück zuliefernden Mitgliedsunternehmen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGETAsync($unternehmensnummer, $plz = null, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET'][0])
    {
        return $this->existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGETAsyncWithHttpInfo($unternehmensnummer, $plz, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGETAsyncWithHttpInfo
     *
     * Ermittelt, ob mindestens ein anmeldeaktives Mitgliedsunternehmen mit der angegebenen Unternehmensnummer existiert
     *
     * @param  string $unternehmensnummer Unternehmensnummer des Mitgliedsunternehmens (required)
     * @param  string $plz Optional die PLZ zur weiteren Einschränkung der zurück zuliefernden Mitgliedsunternehmen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGETAsyncWithHttpInfo($unternehmensnummer, $plz = null, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET'][0])
    {
        $returnType = 'array<string,bool>';
        $request = $this->existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGETRequest($unternehmensnummer, $plz, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET'
     *
     * @param  string $unternehmensnummer Unternehmensnummer des Mitgliedsunternehmens (required)
     * @param  string $plz Optional die PLZ zur weiteren Einschränkung der zurück zuliefernden Mitgliedsunternehmen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGETRequest($unternehmensnummer, $plz = null, string $contentType = self::contentTypes['existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET'][0])
    {

        // verify the required parameter 'unternehmensnummer' is set
        if ($unternehmensnummer === null || (is_array($unternehmensnummer) && count($unternehmensnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unternehmensnummer when calling existiertEinAnmeldeAktivesMitgliedsunternehmenPerUnternehmensnummerUndPlzUsingGET'
            );
        }



        $resourcePath = '/v2/20010/mitgliedsunternehmen/existiert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unternehmensnummer,
            'unternehmensnummer', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plz,
            'plz', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET
     *
     * Ruft entsprechende Mitgliedsunternehmen ab.
     *
     * @param  string $unternehmensnummer Unternehmensnummer der Mitgliedsunternehmen (required)
     * @param  string $plz Optional die PLZ zur weiteren Einschränkung der zurück zuliefernden Mitgliedsunternehmen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Mitgliedsunternehmen[]
     */
    public function getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET($unternehmensnummer, $plz = null, string $contentType = self::contentTypes['getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET'][0])
    {
        list($response) = $this->getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGETWithHttpInfo($unternehmensnummer, $plz, $contentType);
        return $response;
    }

    /**
     * Operation getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGETWithHttpInfo
     *
     * Ruft entsprechende Mitgliedsunternehmen ab.
     *
     * @param  string $unternehmensnummer Unternehmensnummer der Mitgliedsunternehmen (required)
     * @param  string $plz Optional die PLZ zur weiteren Einschränkung der zurück zuliefernden Mitgliedsunternehmen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Mitgliedsunternehmen[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGETWithHttpInfo($unternehmensnummer, $plz = null, string $contentType = self::contentTypes['getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET'][0])
    {
        $request = $this->getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGETRequest($unternehmensnummer, $plz, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Mitgliedsunternehmen[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Mitgliedsunternehmen[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Mitgliedsunternehmen[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Mitgliedsunternehmen[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Mitgliedsunternehmen[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGETAsync
     *
     * Ruft entsprechende Mitgliedsunternehmen ab.
     *
     * @param  string $unternehmensnummer Unternehmensnummer der Mitgliedsunternehmen (required)
     * @param  string $plz Optional die PLZ zur weiteren Einschränkung der zurück zuliefernden Mitgliedsunternehmen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGETAsync($unternehmensnummer, $plz = null, string $contentType = self::contentTypes['getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET'][0])
    {
        return $this->getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGETAsyncWithHttpInfo($unternehmensnummer, $plz, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGETAsyncWithHttpInfo
     *
     * Ruft entsprechende Mitgliedsunternehmen ab.
     *
     * @param  string $unternehmensnummer Unternehmensnummer der Mitgliedsunternehmen (required)
     * @param  string $plz Optional die PLZ zur weiteren Einschränkung der zurück zuliefernden Mitgliedsunternehmen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGETAsyncWithHttpInfo($unternehmensnummer, $plz = null, string $contentType = self::contentTypes['getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Mitgliedsunternehmen[]';
        $request = $this->getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGETRequest($unternehmensnummer, $plz, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET'
     *
     * @param  string $unternehmensnummer Unternehmensnummer der Mitgliedsunternehmen (required)
     * @param  string $plz Optional die PLZ zur weiteren Einschränkung der zurück zuliefernden Mitgliedsunternehmen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGETRequest($unternehmensnummer, $plz = null, string $contentType = self::contentTypes['getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET'][0])
    {

        // verify the required parameter 'unternehmensnummer' is set
        if ($unternehmensnummer === null || (is_array($unternehmensnummer) && count($unternehmensnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unternehmensnummer when calling getAlleMitgliedsunternehmenZurUnternehmensnummerUndPlzUsingGET'
            );
        }



        $resourcePath = '/v2/20010/mitgliedsunternehmen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unternehmensnummer,
            'unternehmensnummer', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plz,
            'plz', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMitgliedsunternehmenByBetriebsstaettennummerUsingGET
     *
     * Ruft ein Mitgliedsunternehmen (Betriebsstätte) ab.
     *
     * @param  string $betriebsstaettennummer Betriebsstättennummer der Betriebsstätte (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMitgliedsunternehmenByBetriebsstaettennummerUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Mitgliedsunternehmen
     */
    public function getMitgliedsunternehmenByBetriebsstaettennummerUsingGET($betriebsstaettennummer, string $contentType = self::contentTypes['getMitgliedsunternehmenByBetriebsstaettennummerUsingGET'][0])
    {
        list($response) = $this->getMitgliedsunternehmenByBetriebsstaettennummerUsingGETWithHttpInfo($betriebsstaettennummer, $contentType);
        return $response;
    }

    /**
     * Operation getMitgliedsunternehmenByBetriebsstaettennummerUsingGETWithHttpInfo
     *
     * Ruft ein Mitgliedsunternehmen (Betriebsstätte) ab.
     *
     * @param  string $betriebsstaettennummer Betriebsstättennummer der Betriebsstätte (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMitgliedsunternehmenByBetriebsstaettennummerUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Mitgliedsunternehmen, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMitgliedsunternehmenByBetriebsstaettennummerUsingGETWithHttpInfo($betriebsstaettennummer, string $contentType = self::contentTypes['getMitgliedsunternehmenByBetriebsstaettennummerUsingGET'][0])
    {
        $request = $this->getMitgliedsunternehmenByBetriebsstaettennummerUsingGETRequest($betriebsstaettennummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Mitgliedsunternehmen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Mitgliedsunternehmen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Mitgliedsunternehmen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Mitgliedsunternehmen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Mitgliedsunternehmen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMitgliedsunternehmenByBetriebsstaettennummerUsingGETAsync
     *
     * Ruft ein Mitgliedsunternehmen (Betriebsstätte) ab.
     *
     * @param  string $betriebsstaettennummer Betriebsstättennummer der Betriebsstätte (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMitgliedsunternehmenByBetriebsstaettennummerUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMitgliedsunternehmenByBetriebsstaettennummerUsingGETAsync($betriebsstaettennummer, string $contentType = self::contentTypes['getMitgliedsunternehmenByBetriebsstaettennummerUsingGET'][0])
    {
        return $this->getMitgliedsunternehmenByBetriebsstaettennummerUsingGETAsyncWithHttpInfo($betriebsstaettennummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMitgliedsunternehmenByBetriebsstaettennummerUsingGETAsyncWithHttpInfo
     *
     * Ruft ein Mitgliedsunternehmen (Betriebsstätte) ab.
     *
     * @param  string $betriebsstaettennummer Betriebsstättennummer der Betriebsstätte (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMitgliedsunternehmenByBetriebsstaettennummerUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMitgliedsunternehmenByBetriebsstaettennummerUsingGETAsyncWithHttpInfo($betriebsstaettennummer, string $contentType = self::contentTypes['getMitgliedsunternehmenByBetriebsstaettennummerUsingGET'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Mitgliedsunternehmen';
        $request = $this->getMitgliedsunternehmenByBetriebsstaettennummerUsingGETRequest($betriebsstaettennummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMitgliedsunternehmenByBetriebsstaettennummerUsingGET'
     *
     * @param  string $betriebsstaettennummer Betriebsstättennummer der Betriebsstätte (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMitgliedsunternehmenByBetriebsstaettennummerUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMitgliedsunternehmenByBetriebsstaettennummerUsingGETRequest($betriebsstaettennummer, string $contentType = self::contentTypes['getMitgliedsunternehmenByBetriebsstaettennummerUsingGET'][0])
    {

        // verify the required parameter 'betriebsstaettennummer' is set
        if ($betriebsstaettennummer === null || (is_array($betriebsstaettennummer) && count($betriebsstaettennummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betriebsstaettennummer when calling getMitgliedsunternehmenByBetriebsstaettennummerUsingGET'
            );
        }


        $resourcePath = '/v2/20010/mitgliedsunternehmen/betriebsstaettennummer/{betriebsstaettennummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($betriebsstaettennummer !== null) {
            $resourcePath = str_replace(
                '{' . 'betriebsstaettennummer' . '}',
                ObjectSerializer::toPathValue($betriebsstaettennummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMitgliedsunternehmenByMitgliedsnummerUsingGET
     *
     * Ruft alle Mitgliedsunternehmen mit der gleichen Mitgliedsnummer (8-stellig ohne Betriebsstättenanteil) ab
     *
     * @param  string $mitgliedsnummer Mitgliedsnummer des Mitgliedsunternehmens ohne Betriebsstättenanteil (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMitgliedsunternehmenByMitgliedsnummerUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Mitgliedsunternehmen[]
     */
    public function getMitgliedsunternehmenByMitgliedsnummerUsingGET($mitgliedsnummer, string $contentType = self::contentTypes['getMitgliedsunternehmenByMitgliedsnummerUsingGET'][0])
    {
        list($response) = $this->getMitgliedsunternehmenByMitgliedsnummerUsingGETWithHttpInfo($mitgliedsnummer, $contentType);
        return $response;
    }

    /**
     * Operation getMitgliedsunternehmenByMitgliedsnummerUsingGETWithHttpInfo
     *
     * Ruft alle Mitgliedsunternehmen mit der gleichen Mitgliedsnummer (8-stellig ohne Betriebsstättenanteil) ab
     *
     * @param  string $mitgliedsnummer Mitgliedsnummer des Mitgliedsunternehmens ohne Betriebsstättenanteil (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMitgliedsunternehmenByMitgliedsnummerUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Mitgliedsunternehmen[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMitgliedsunternehmenByMitgliedsnummerUsingGETWithHttpInfo($mitgliedsnummer, string $contentType = self::contentTypes['getMitgliedsunternehmenByMitgliedsnummerUsingGET'][0])
    {
        $request = $this->getMitgliedsunternehmenByMitgliedsnummerUsingGETRequest($mitgliedsnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Mitgliedsunternehmen[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Mitgliedsunternehmen[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Mitgliedsunternehmen[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Mitgliedsunternehmen[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Mitgliedsunternehmen[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMitgliedsunternehmenByMitgliedsnummerUsingGETAsync
     *
     * Ruft alle Mitgliedsunternehmen mit der gleichen Mitgliedsnummer (8-stellig ohne Betriebsstättenanteil) ab
     *
     * @param  string $mitgliedsnummer Mitgliedsnummer des Mitgliedsunternehmens ohne Betriebsstättenanteil (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMitgliedsunternehmenByMitgliedsnummerUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMitgliedsunternehmenByMitgliedsnummerUsingGETAsync($mitgliedsnummer, string $contentType = self::contentTypes['getMitgliedsunternehmenByMitgliedsnummerUsingGET'][0])
    {
        return $this->getMitgliedsunternehmenByMitgliedsnummerUsingGETAsyncWithHttpInfo($mitgliedsnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMitgliedsunternehmenByMitgliedsnummerUsingGETAsyncWithHttpInfo
     *
     * Ruft alle Mitgliedsunternehmen mit der gleichen Mitgliedsnummer (8-stellig ohne Betriebsstättenanteil) ab
     *
     * @param  string $mitgliedsnummer Mitgliedsnummer des Mitgliedsunternehmens ohne Betriebsstättenanteil (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMitgliedsunternehmenByMitgliedsnummerUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMitgliedsunternehmenByMitgliedsnummerUsingGETAsyncWithHttpInfo($mitgliedsnummer, string $contentType = self::contentTypes['getMitgliedsunternehmenByMitgliedsnummerUsingGET'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Mitgliedsunternehmen[]';
        $request = $this->getMitgliedsunternehmenByMitgliedsnummerUsingGETRequest($mitgliedsnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMitgliedsunternehmenByMitgliedsnummerUsingGET'
     *
     * @param  string $mitgliedsnummer Mitgliedsnummer des Mitgliedsunternehmens ohne Betriebsstättenanteil (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMitgliedsunternehmenByMitgliedsnummerUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMitgliedsunternehmenByMitgliedsnummerUsingGETRequest($mitgliedsnummer, string $contentType = self::contentTypes['getMitgliedsunternehmenByMitgliedsnummerUsingGET'][0])
    {

        // verify the required parameter 'mitgliedsnummer' is set
        if ($mitgliedsnummer === null || (is_array($mitgliedsnummer) && count($mitgliedsnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mitgliedsnummer when calling getMitgliedsunternehmenByMitgliedsnummerUsingGET'
            );
        }


        $resourcePath = '/v2/20010/mitgliedsunternehmen/mitgliedsnummer/{mitgliedsnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mitgliedsnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'mitgliedsnummer' . '}',
                ObjectSerializer::toPathValue($mitgliedsnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
