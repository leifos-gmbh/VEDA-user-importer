<?php
/**
 * AusbildungszugabschnitteApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers für die Version 2. Die Dokumentation zu speziellen Versionen kann über die Angabe des zusätzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 für die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * The version of the OpenAPI document: 2
 * Contact: info@veda.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AusbildungszugabschnitteApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AusbildungszugabschnitteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'meldeLernerfolgUsingPUT' => [
            'application/json',
        ],
        'meldePraktikumsberichtEingegangenUsingPUT' => [
            'application/json',
        ],
        'meldePraktikumsberichtKorrigiertUsingPUT' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation meldeLernerfolgUsingPUT
     *
     * Ermöglicht es, den Lernerfolg eines Ausbildungszugabschnitts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\MeldeLernerfolgApiDto $lernerfolg_melden_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldeLernerfolgUsingPUT'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function meldeLernerfolgUsingPUT($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null, string $contentType = self::contentTypes['meldeLernerfolgUsingPUT'][0])
    {
        $this->meldeLernerfolgUsingPUTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto, $contentType);
    }

    /**
     * Operation meldeLernerfolgUsingPUTWithHttpInfo
     *
     * Ermöglicht es, den Lernerfolg eines Ausbildungszugabschnitts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\MeldeLernerfolgApiDto $lernerfolg_melden_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldeLernerfolgUsingPUT'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function meldeLernerfolgUsingPUTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null, string $contentType = self::contentTypes['meldeLernerfolgUsingPUT'][0])
    {
        $request = $this->meldeLernerfolgUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation meldeLernerfolgUsingPUTAsync
     *
     * Ermöglicht es, den Lernerfolg eines Ausbildungszugabschnitts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\MeldeLernerfolgApiDto $lernerfolg_melden_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldeLernerfolgUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function meldeLernerfolgUsingPUTAsync($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null, string $contentType = self::contentTypes['meldeLernerfolgUsingPUT'][0])
    {
        return $this->meldeLernerfolgUsingPUTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation meldeLernerfolgUsingPUTAsyncWithHttpInfo
     *
     * Ermöglicht es, den Lernerfolg eines Ausbildungszugabschnitts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\MeldeLernerfolgApiDto $lernerfolg_melden_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldeLernerfolgUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function meldeLernerfolgUsingPUTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null, string $contentType = self::contentTypes['meldeLernerfolgUsingPUT'][0])
    {
        $returnType = '';
        $request = $this->meldeLernerfolgUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'meldeLernerfolgUsingPUT'
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\MeldeLernerfolgApiDto $lernerfolg_melden_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldeLernerfolgUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function meldeLernerfolgUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null, string $contentType = self::contentTypes['meldeLernerfolgUsingPUT'][0])
    {

        // verify the required parameter 'ausbildungszugabschnitt_id' is set
        if ($ausbildungszugabschnitt_id === null || (is_array($ausbildungszugabschnitt_id) && count($ausbildungszugabschnitt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ausbildungszugabschnitt_id when calling meldeLernerfolgUsingPUT'
            );
        }

        // verify the required parameter 'teilnehmer_id' is set
        if ($teilnehmer_id === null || (is_array($teilnehmer_id) && count($teilnehmer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teilnehmer_id when calling meldeLernerfolgUsingPUT'
            );
        }



        $resourcePath = '/v2/ausbildungszugabschnitte/{ausbildungszugabschnittId}/teilnehmer/{teilnehmerId}/meldelernerfolg';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ausbildungszugabschnitt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ausbildungszugabschnittId' . '}',
                ObjectSerializer::toPathValue($ausbildungszugabschnitt_id),
                $resourcePath
            );
        }
        // path params
        if ($teilnehmer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'teilnehmerId' . '}',
                ObjectSerializer::toPathValue($teilnehmer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($lernerfolg_melden_api_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($lernerfolg_melden_api_dto));
            } else {
                $httpBody = $lernerfolg_melden_api_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation meldePraktikumsberichtEingegangenUsingPUT
     *
     * Ermöglicht es, den Eingang eines Praktikumsberichts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\PraktikumsberichtEingegangenApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldePraktikumsberichtEingegangenUsingPUT'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function meldePraktikumsberichtEingegangenUsingPUT($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null, string $contentType = self::contentTypes['meldePraktikumsberichtEingegangenUsingPUT'][0])
    {
        $this->meldePraktikumsberichtEingegangenUsingPUTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto, $contentType);
    }

    /**
     * Operation meldePraktikumsberichtEingegangenUsingPUTWithHttpInfo
     *
     * Ermöglicht es, den Eingang eines Praktikumsberichts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\PraktikumsberichtEingegangenApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldePraktikumsberichtEingegangenUsingPUT'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function meldePraktikumsberichtEingegangenUsingPUTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null, string $contentType = self::contentTypes['meldePraktikumsberichtEingegangenUsingPUT'][0])
    {
        $request = $this->meldePraktikumsberichtEingegangenUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation meldePraktikumsberichtEingegangenUsingPUTAsync
     *
     * Ermöglicht es, den Eingang eines Praktikumsberichts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\PraktikumsberichtEingegangenApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldePraktikumsberichtEingegangenUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function meldePraktikumsberichtEingegangenUsingPUTAsync($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null, string $contentType = self::contentTypes['meldePraktikumsberichtEingegangenUsingPUT'][0])
    {
        return $this->meldePraktikumsberichtEingegangenUsingPUTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation meldePraktikumsberichtEingegangenUsingPUTAsyncWithHttpInfo
     *
     * Ermöglicht es, den Eingang eines Praktikumsberichts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\PraktikumsberichtEingegangenApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldePraktikumsberichtEingegangenUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function meldePraktikumsberichtEingegangenUsingPUTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null, string $contentType = self::contentTypes['meldePraktikumsberichtEingegangenUsingPUT'][0])
    {
        $returnType = '';
        $request = $this->meldePraktikumsberichtEingegangenUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'meldePraktikumsberichtEingegangenUsingPUT'
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\PraktikumsberichtEingegangenApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldePraktikumsberichtEingegangenUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function meldePraktikumsberichtEingegangenUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null, string $contentType = self::contentTypes['meldePraktikumsberichtEingegangenUsingPUT'][0])
    {

        // verify the required parameter 'ausbildungszugabschnitt_id' is set
        if ($ausbildungszugabschnitt_id === null || (is_array($ausbildungszugabschnitt_id) && count($ausbildungszugabschnitt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ausbildungszugabschnitt_id when calling meldePraktikumsberichtEingegangenUsingPUT'
            );
        }

        // verify the required parameter 'teilnehmer_id' is set
        if ($teilnehmer_id === null || (is_array($teilnehmer_id) && count($teilnehmer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teilnehmer_id when calling meldePraktikumsberichtEingegangenUsingPUT'
            );
        }



        $resourcePath = '/v2/ausbildungszugabschnitte/{ausbildungszugabschnittId}/teilnehmer/{teilnehmerId}/meldepraktikumsberichteingegangen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ausbildungszugabschnitt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ausbildungszugabschnittId' . '}',
                ObjectSerializer::toPathValue($ausbildungszugabschnitt_id),
                $resourcePath
            );
        }
        // path params
        if ($teilnehmer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'teilnehmerId' . '}',
                ObjectSerializer::toPathValue($teilnehmer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($praktikumsbericht_eingegangen_api_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($praktikumsbericht_eingegangen_api_dto));
            } else {
                $httpBody = $praktikumsbericht_eingegangen_api_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation meldePraktikumsberichtKorrigiertUsingPUT
     *
     * Ermöglicht es, den korrigierten Praktikumsbericht für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\PraktikumsberichtKorrigiertApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldePraktikumsberichtKorrigiertUsingPUT'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function meldePraktikumsberichtKorrigiertUsingPUT($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null, string $contentType = self::contentTypes['meldePraktikumsberichtKorrigiertUsingPUT'][0])
    {
        $this->meldePraktikumsberichtKorrigiertUsingPUTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto, $contentType);
    }

    /**
     * Operation meldePraktikumsberichtKorrigiertUsingPUTWithHttpInfo
     *
     * Ermöglicht es, den korrigierten Praktikumsbericht für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\PraktikumsberichtKorrigiertApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldePraktikumsberichtKorrigiertUsingPUT'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function meldePraktikumsberichtKorrigiertUsingPUTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null, string $contentType = self::contentTypes['meldePraktikumsberichtKorrigiertUsingPUT'][0])
    {
        $request = $this->meldePraktikumsberichtKorrigiertUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation meldePraktikumsberichtKorrigiertUsingPUTAsync
     *
     * Ermöglicht es, den korrigierten Praktikumsbericht für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\PraktikumsberichtKorrigiertApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldePraktikumsberichtKorrigiertUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function meldePraktikumsberichtKorrigiertUsingPUTAsync($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null, string $contentType = self::contentTypes['meldePraktikumsberichtKorrigiertUsingPUT'][0])
    {
        return $this->meldePraktikumsberichtKorrigiertUsingPUTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation meldePraktikumsberichtKorrigiertUsingPUTAsyncWithHttpInfo
     *
     * Ermöglicht es, den korrigierten Praktikumsbericht für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\PraktikumsberichtKorrigiertApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldePraktikumsberichtKorrigiertUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function meldePraktikumsberichtKorrigiertUsingPUTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null, string $contentType = self::contentTypes['meldePraktikumsberichtKorrigiertUsingPUT'][0])
    {
        $returnType = '';
        $request = $this->meldePraktikumsberichtKorrigiertUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'meldePraktikumsberichtKorrigiertUsingPUT'
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \OpenAPI\Client\Model\PraktikumsberichtKorrigiertApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['meldePraktikumsberichtKorrigiertUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function meldePraktikumsberichtKorrigiertUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null, string $contentType = self::contentTypes['meldePraktikumsberichtKorrigiertUsingPUT'][0])
    {

        // verify the required parameter 'ausbildungszugabschnitt_id' is set
        if ($ausbildungszugabschnitt_id === null || (is_array($ausbildungszugabschnitt_id) && count($ausbildungszugabschnitt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ausbildungszugabschnitt_id when calling meldePraktikumsberichtKorrigiertUsingPUT'
            );
        }

        // verify the required parameter 'teilnehmer_id' is set
        if ($teilnehmer_id === null || (is_array($teilnehmer_id) && count($teilnehmer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teilnehmer_id when calling meldePraktikumsberichtKorrigiertUsingPUT'
            );
        }



        $resourcePath = '/v2/ausbildungszugabschnitte/{ausbildungszugabschnittId}/teilnehmer/{teilnehmerId}/meldepraktikumsberichtkorrigiert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ausbildungszugabschnitt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ausbildungszugabschnittId' . '}',
                ObjectSerializer::toPathValue($ausbildungszugabschnitt_id),
                $resourcePath
            );
        }
        // path params
        if ($teilnehmer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'teilnehmerId' . '}',
                ObjectSerializer::toPathValue($teilnehmer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($praktikumsbericht_eingegangen_api_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($praktikumsbericht_eingegangen_api_dto));
            } else {
                $httpBody = $praktikumsbericht_eingegangen_api_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
