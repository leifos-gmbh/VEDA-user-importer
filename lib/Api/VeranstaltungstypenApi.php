<?php
/**
 * VeranstaltungstypenApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers für die Version 2. Die Dokumentation zu speziellen Versionen kann über die Angabe des zusätzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 für die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * The version of the OpenAPI document: 2
 * Contact: info@veda.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * VeranstaltungstypenApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VeranstaltungstypenApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAllePraesenzVirtuellVeranstaltungstypenUsingGET' => [
            'application/json',
        ],
        'getAllePraesenzVirtuellVeranstaltungstypenUsingGET1' => [
            'application/json',
        ],
        'getPraesenzVirtuellVeranstaltungstypUsingGET' => [
            'application/json',
        ],
        'getPraesenzVirtuellVeranstaltungstypUsingGET1' => [
            'application/json',
        ],
        'getVeranstaltungstypPlzBereicheUsingGET1' => [
            'application/json',
        ],
        'getVeranstaltungsytpenUsingGET' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAllePraesenzVirtuellVeranstaltungstypenUsingGET
     *
     * Ruft alle Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Veranstaltungstyp[]
     */
    public function getAllePraesenzVirtuellVeranstaltungstypenUsingGET($teilnehmergruppekuerzel = null, string $contentType = self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET'][0])
    {
        list($response) = $this->getAllePraesenzVirtuellVeranstaltungstypenUsingGETWithHttpInfo($teilnehmergruppekuerzel, $contentType);
        return $response;
    }

    /**
     * Operation getAllePraesenzVirtuellVeranstaltungstypenUsingGETWithHttpInfo
     *
     * Ruft alle Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Veranstaltungstyp[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllePraesenzVirtuellVeranstaltungstypenUsingGETWithHttpInfo($teilnehmergruppekuerzel = null, string $contentType = self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET'][0])
    {
        $request = $this->getAllePraesenzVirtuellVeranstaltungstypenUsingGETRequest($teilnehmergruppekuerzel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Veranstaltungstyp[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Veranstaltungstyp[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Veranstaltungstyp[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Veranstaltungstyp[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Veranstaltungstyp[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllePraesenzVirtuellVeranstaltungstypenUsingGETAsync
     *
     * Ruft alle Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllePraesenzVirtuellVeranstaltungstypenUsingGETAsync($teilnehmergruppekuerzel = null, string $contentType = self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET'][0])
    {
        return $this->getAllePraesenzVirtuellVeranstaltungstypenUsingGETAsyncWithHttpInfo($teilnehmergruppekuerzel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllePraesenzVirtuellVeranstaltungstypenUsingGETAsyncWithHttpInfo
     *
     * Ruft alle Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllePraesenzVirtuellVeranstaltungstypenUsingGETAsyncWithHttpInfo($teilnehmergruppekuerzel = null, string $contentType = self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Veranstaltungstyp[]';
        $request = $this->getAllePraesenzVirtuellVeranstaltungstypenUsingGETRequest($teilnehmergruppekuerzel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllePraesenzVirtuellVeranstaltungstypenUsingGET'
     *
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllePraesenzVirtuellVeranstaltungstypenUsingGETRequest($teilnehmergruppekuerzel = null, string $contentType = self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET'][0])
    {



        $resourcePath = '/v2/veranstaltungstypen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $teilnehmergruppekuerzel,
            'teilnehmergruppekuerzel', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllePraesenzVirtuellVeranstaltungstypenUsingGET1
     *
     * Ruft alle Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VeranstaltungstypSIGUV[]
     */
    public function getAllePraesenzVirtuellVeranstaltungstypenUsingGET1($teilnehmergruppekuerzel = null, string $contentType = self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET1'][0])
    {
        list($response) = $this->getAllePraesenzVirtuellVeranstaltungstypenUsingGET1WithHttpInfo($teilnehmergruppekuerzel, $contentType);
        return $response;
    }

    /**
     * Operation getAllePraesenzVirtuellVeranstaltungstypenUsingGET1WithHttpInfo
     *
     * Ruft alle Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VeranstaltungstypSIGUV[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllePraesenzVirtuellVeranstaltungstypenUsingGET1WithHttpInfo($teilnehmergruppekuerzel = null, string $contentType = self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET1'][0])
    {
        $request = $this->getAllePraesenzVirtuellVeranstaltungstypenUsingGET1Request($teilnehmergruppekuerzel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\VeranstaltungstypSIGUV[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\VeranstaltungstypSIGUV[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VeranstaltungstypSIGUV[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\VeranstaltungstypSIGUV[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VeranstaltungstypSIGUV[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllePraesenzVirtuellVeranstaltungstypenUsingGET1Async
     *
     * Ruft alle Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllePraesenzVirtuellVeranstaltungstypenUsingGET1Async($teilnehmergruppekuerzel = null, string $contentType = self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET1'][0])
    {
        return $this->getAllePraesenzVirtuellVeranstaltungstypenUsingGET1AsyncWithHttpInfo($teilnehmergruppekuerzel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllePraesenzVirtuellVeranstaltungstypenUsingGET1AsyncWithHttpInfo
     *
     * Ruft alle Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllePraesenzVirtuellVeranstaltungstypenUsingGET1AsyncWithHttpInfo($teilnehmergruppekuerzel = null, string $contentType = self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET1'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VeranstaltungstypSIGUV[]';
        $request = $this->getAllePraesenzVirtuellVeranstaltungstypenUsingGET1Request($teilnehmergruppekuerzel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllePraesenzVirtuellVeranstaltungstypenUsingGET1'
     *
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllePraesenzVirtuellVeranstaltungstypenUsingGET1Request($teilnehmergruppekuerzel = null, string $contentType = self::contentTypes['getAllePraesenzVirtuellVeranstaltungstypenUsingGET1'][0])
    {



        $resourcePath = '/v2/20010/veranstaltungstypen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $teilnehmergruppekuerzel,
            'teilnehmergruppekuerzel', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPraesenzVirtuellVeranstaltungstypUsingGET
     *
     * Ruft einen Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $id ID des Veranstaltungstypen (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Veranstaltungstyp
     */
    public function getPraesenzVirtuellVeranstaltungstypUsingGET($id, string $contentType = self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET'][0])
    {
        list($response) = $this->getPraesenzVirtuellVeranstaltungstypUsingGETWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getPraesenzVirtuellVeranstaltungstypUsingGETWithHttpInfo
     *
     * Ruft einen Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $id ID des Veranstaltungstypen (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Veranstaltungstyp, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPraesenzVirtuellVeranstaltungstypUsingGETWithHttpInfo($id, string $contentType = self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET'][0])
    {
        $request = $this->getPraesenzVirtuellVeranstaltungstypUsingGETRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Veranstaltungstyp' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Veranstaltungstyp' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Veranstaltungstyp', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Veranstaltungstyp';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Veranstaltungstyp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPraesenzVirtuellVeranstaltungstypUsingGETAsync
     *
     * Ruft einen Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $id ID des Veranstaltungstypen (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPraesenzVirtuellVeranstaltungstypUsingGETAsync($id, string $contentType = self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET'][0])
    {
        return $this->getPraesenzVirtuellVeranstaltungstypUsingGETAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPraesenzVirtuellVeranstaltungstypUsingGETAsyncWithHttpInfo
     *
     * Ruft einen Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $id ID des Veranstaltungstypen (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPraesenzVirtuellVeranstaltungstypUsingGETAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Veranstaltungstyp';
        $request = $this->getPraesenzVirtuellVeranstaltungstypUsingGETRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPraesenzVirtuellVeranstaltungstypUsingGET'
     *
     * @param  string $id ID des Veranstaltungstypen (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPraesenzVirtuellVeranstaltungstypUsingGETRequest($id, string $contentType = self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPraesenzVirtuellVeranstaltungstypUsingGET'
            );
        }


        $resourcePath = '/v2/veranstaltungstypen/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPraesenzVirtuellVeranstaltungstypUsingGET1
     *
     * Ruft einen Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $id ID des Veranstaltungstypen (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VeranstaltungstypSIGUV
     */
    public function getPraesenzVirtuellVeranstaltungstypUsingGET1($id, string $contentType = self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET1'][0])
    {
        list($response) = $this->getPraesenzVirtuellVeranstaltungstypUsingGET1WithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getPraesenzVirtuellVeranstaltungstypUsingGET1WithHttpInfo
     *
     * Ruft einen Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $id ID des Veranstaltungstypen (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VeranstaltungstypSIGUV, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPraesenzVirtuellVeranstaltungstypUsingGET1WithHttpInfo($id, string $contentType = self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET1'][0])
    {
        $request = $this->getPraesenzVirtuellVeranstaltungstypUsingGET1Request($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\VeranstaltungstypSIGUV' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\VeranstaltungstypSIGUV' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VeranstaltungstypSIGUV', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\VeranstaltungstypSIGUV';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VeranstaltungstypSIGUV',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPraesenzVirtuellVeranstaltungstypUsingGET1Async
     *
     * Ruft einen Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $id ID des Veranstaltungstypen (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPraesenzVirtuellVeranstaltungstypUsingGET1Async($id, string $contentType = self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET1'][0])
    {
        return $this->getPraesenzVirtuellVeranstaltungstypUsingGET1AsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPraesenzVirtuellVeranstaltungstypUsingGET1AsyncWithHttpInfo
     *
     * Ruft einen Präsenz- und Virtuell-Veranstaltungstypen ab
     *
     * @param  string $id ID des Veranstaltungstypen (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPraesenzVirtuellVeranstaltungstypUsingGET1AsyncWithHttpInfo($id, string $contentType = self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET1'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VeranstaltungstypSIGUV';
        $request = $this->getPraesenzVirtuellVeranstaltungstypUsingGET1Request($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPraesenzVirtuellVeranstaltungstypUsingGET1'
     *
     * @param  string $id ID des Veranstaltungstypen (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPraesenzVirtuellVeranstaltungstypUsingGET1Request($id, string $contentType = self::contentTypes['getPraesenzVirtuellVeranstaltungstypUsingGET1'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPraesenzVirtuellVeranstaltungstypUsingGET1'
            );
        }


        $resourcePath = '/v2/20010/veranstaltungstypen/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVeranstaltungstypPlzBereicheUsingGET1
     *
     * Ruft Postleitzahl-Bereiche der Veranstaltungstypen ab
     *
     * @param  string $teilnehmergruppekuerzel Parameter, um zu steuern, für welche Teilnehmergruppe die PLZ-Bereiche abgerufen werden sollen. Es werden nur PLZ-Bereiche der für diese Teilnehmergruppe publizierten Veranstaltungstypen zurückgegeben. (optional)
     * @param  string $veranstaltungstyp_nr Optionaler Parameter für die Nummer des Veranstaltungstypen. (optional)
     * @param  string $veranstaltungstyp_id Optionaler Parameter für die ID des Veranstaltungstypen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVeranstaltungstypPlzBereicheUsingGET1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PLZBereichVeranstaltungstyp[]
     */
    public function getVeranstaltungstypPlzBereicheUsingGET1($teilnehmergruppekuerzel = null, $veranstaltungstyp_nr = null, $veranstaltungstyp_id = null, string $contentType = self::contentTypes['getVeranstaltungstypPlzBereicheUsingGET1'][0])
    {
        list($response) = $this->getVeranstaltungstypPlzBereicheUsingGET1WithHttpInfo($teilnehmergruppekuerzel, $veranstaltungstyp_nr, $veranstaltungstyp_id, $contentType);
        return $response;
    }

    /**
     * Operation getVeranstaltungstypPlzBereicheUsingGET1WithHttpInfo
     *
     * Ruft Postleitzahl-Bereiche der Veranstaltungstypen ab
     *
     * @param  string $teilnehmergruppekuerzel Parameter, um zu steuern, für welche Teilnehmergruppe die PLZ-Bereiche abgerufen werden sollen. Es werden nur PLZ-Bereiche der für diese Teilnehmergruppe publizierten Veranstaltungstypen zurückgegeben. (optional)
     * @param  string $veranstaltungstyp_nr Optionaler Parameter für die Nummer des Veranstaltungstypen. (optional)
     * @param  string $veranstaltungstyp_id Optionaler Parameter für die ID des Veranstaltungstypen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVeranstaltungstypPlzBereicheUsingGET1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PLZBereichVeranstaltungstyp[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getVeranstaltungstypPlzBereicheUsingGET1WithHttpInfo($teilnehmergruppekuerzel = null, $veranstaltungstyp_nr = null, $veranstaltungstyp_id = null, string $contentType = self::contentTypes['getVeranstaltungstypPlzBereicheUsingGET1'][0])
    {
        $request = $this->getVeranstaltungstypPlzBereicheUsingGET1Request($teilnehmergruppekuerzel, $veranstaltungstyp_nr, $veranstaltungstyp_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PLZBereichVeranstaltungstyp[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PLZBereichVeranstaltungstyp[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PLZBereichVeranstaltungstyp[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PLZBereichVeranstaltungstyp[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PLZBereichVeranstaltungstyp[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVeranstaltungstypPlzBereicheUsingGET1Async
     *
     * Ruft Postleitzahl-Bereiche der Veranstaltungstypen ab
     *
     * @param  string $teilnehmergruppekuerzel Parameter, um zu steuern, für welche Teilnehmergruppe die PLZ-Bereiche abgerufen werden sollen. Es werden nur PLZ-Bereiche der für diese Teilnehmergruppe publizierten Veranstaltungstypen zurückgegeben. (optional)
     * @param  string $veranstaltungstyp_nr Optionaler Parameter für die Nummer des Veranstaltungstypen. (optional)
     * @param  string $veranstaltungstyp_id Optionaler Parameter für die ID des Veranstaltungstypen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVeranstaltungstypPlzBereicheUsingGET1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVeranstaltungstypPlzBereicheUsingGET1Async($teilnehmergruppekuerzel = null, $veranstaltungstyp_nr = null, $veranstaltungstyp_id = null, string $contentType = self::contentTypes['getVeranstaltungstypPlzBereicheUsingGET1'][0])
    {
        return $this->getVeranstaltungstypPlzBereicheUsingGET1AsyncWithHttpInfo($teilnehmergruppekuerzel, $veranstaltungstyp_nr, $veranstaltungstyp_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVeranstaltungstypPlzBereicheUsingGET1AsyncWithHttpInfo
     *
     * Ruft Postleitzahl-Bereiche der Veranstaltungstypen ab
     *
     * @param  string $teilnehmergruppekuerzel Parameter, um zu steuern, für welche Teilnehmergruppe die PLZ-Bereiche abgerufen werden sollen. Es werden nur PLZ-Bereiche der für diese Teilnehmergruppe publizierten Veranstaltungstypen zurückgegeben. (optional)
     * @param  string $veranstaltungstyp_nr Optionaler Parameter für die Nummer des Veranstaltungstypen. (optional)
     * @param  string $veranstaltungstyp_id Optionaler Parameter für die ID des Veranstaltungstypen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVeranstaltungstypPlzBereicheUsingGET1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVeranstaltungstypPlzBereicheUsingGET1AsyncWithHttpInfo($teilnehmergruppekuerzel = null, $veranstaltungstyp_nr = null, $veranstaltungstyp_id = null, string $contentType = self::contentTypes['getVeranstaltungstypPlzBereicheUsingGET1'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PLZBereichVeranstaltungstyp[]';
        $request = $this->getVeranstaltungstypPlzBereicheUsingGET1Request($teilnehmergruppekuerzel, $veranstaltungstyp_nr, $veranstaltungstyp_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVeranstaltungstypPlzBereicheUsingGET1'
     *
     * @param  string $teilnehmergruppekuerzel Parameter, um zu steuern, für welche Teilnehmergruppe die PLZ-Bereiche abgerufen werden sollen. Es werden nur PLZ-Bereiche der für diese Teilnehmergruppe publizierten Veranstaltungstypen zurückgegeben. (optional)
     * @param  string $veranstaltungstyp_nr Optionaler Parameter für die Nummer des Veranstaltungstypen. (optional)
     * @param  string $veranstaltungstyp_id Optionaler Parameter für die ID des Veranstaltungstypen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVeranstaltungstypPlzBereicheUsingGET1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVeranstaltungstypPlzBereicheUsingGET1Request($teilnehmergruppekuerzel = null, $veranstaltungstyp_nr = null, $veranstaltungstyp_id = null, string $contentType = self::contentTypes['getVeranstaltungstypPlzBereicheUsingGET1'][0])
    {





        $resourcePath = '/v2/veranstaltungstypen/plzbereiche';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $teilnehmergruppekuerzel,
            'teilnehmergruppekuerzel', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $veranstaltungstyp_nr,
            'veranstaltungstypNr', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $veranstaltungstyp_id,
            'veranstaltungstypID', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVeranstaltungsytpenUsingGET
     *
     * Ruft Veranstaltungstypen ab (Websuche)
     *
     * @param  \OpenAPI\Client\Model\VeranstaltungstypSuche $veranstaltungstyp_suche_api_dto veranstaltungstypSucheApiDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVeranstaltungsytpenUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Veranstaltungstyp[]
     */
    public function getVeranstaltungsytpenUsingGET($veranstaltungstyp_suche_api_dto, string $contentType = self::contentTypes['getVeranstaltungsytpenUsingGET'][0])
    {
        list($response) = $this->getVeranstaltungsytpenUsingGETWithHttpInfo($veranstaltungstyp_suche_api_dto, $contentType);
        return $response;
    }

    /**
     * Operation getVeranstaltungsytpenUsingGETWithHttpInfo
     *
     * Ruft Veranstaltungstypen ab (Websuche)
     *
     * @param  \OpenAPI\Client\Model\VeranstaltungstypSuche $veranstaltungstyp_suche_api_dto veranstaltungstypSucheApiDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVeranstaltungsytpenUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Veranstaltungstyp[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getVeranstaltungsytpenUsingGETWithHttpInfo($veranstaltungstyp_suche_api_dto, string $contentType = self::contentTypes['getVeranstaltungsytpenUsingGET'][0])
    {
        $request = $this->getVeranstaltungsytpenUsingGETRequest($veranstaltungstyp_suche_api_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Veranstaltungstyp[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Veranstaltungstyp[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Veranstaltungstyp[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Veranstaltungstyp[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Veranstaltungstyp[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVeranstaltungsytpenUsingGETAsync
     *
     * Ruft Veranstaltungstypen ab (Websuche)
     *
     * @param  \OpenAPI\Client\Model\VeranstaltungstypSuche $veranstaltungstyp_suche_api_dto veranstaltungstypSucheApiDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVeranstaltungsytpenUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVeranstaltungsytpenUsingGETAsync($veranstaltungstyp_suche_api_dto, string $contentType = self::contentTypes['getVeranstaltungsytpenUsingGET'][0])
    {
        return $this->getVeranstaltungsytpenUsingGETAsyncWithHttpInfo($veranstaltungstyp_suche_api_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVeranstaltungsytpenUsingGETAsyncWithHttpInfo
     *
     * Ruft Veranstaltungstypen ab (Websuche)
     *
     * @param  \OpenAPI\Client\Model\VeranstaltungstypSuche $veranstaltungstyp_suche_api_dto veranstaltungstypSucheApiDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVeranstaltungsytpenUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVeranstaltungsytpenUsingGETAsyncWithHttpInfo($veranstaltungstyp_suche_api_dto, string $contentType = self::contentTypes['getVeranstaltungsytpenUsingGET'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Veranstaltungstyp[]';
        $request = $this->getVeranstaltungsytpenUsingGETRequest($veranstaltungstyp_suche_api_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVeranstaltungsytpenUsingGET'
     *
     * @param  \OpenAPI\Client\Model\VeranstaltungstypSuche $veranstaltungstyp_suche_api_dto veranstaltungstypSucheApiDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVeranstaltungsytpenUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVeranstaltungsytpenUsingGETRequest($veranstaltungstyp_suche_api_dto, string $contentType = self::contentTypes['getVeranstaltungsytpenUsingGET'][0])
    {

        // verify the required parameter 'veranstaltungstyp_suche_api_dto' is set
        if ($veranstaltungstyp_suche_api_dto === null || (is_array($veranstaltungstyp_suche_api_dto) && count($veranstaltungstyp_suche_api_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $veranstaltungstyp_suche_api_dto when calling getVeranstaltungsytpenUsingGET'
            );
        }


        $resourcePath = '/v2/veranstaltungstypen/websuche';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($veranstaltungstyp_suche_api_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($veranstaltungstyp_suche_api_dto));
            } else {
                $httpBody = $veranstaltungstyp_suche_api_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
